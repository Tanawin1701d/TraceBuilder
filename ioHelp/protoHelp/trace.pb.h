// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trace.proto

#ifndef PROTOBUF_INCLUDED_trace_2eproto
#define PROTOBUF_INCLUDED_trace_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_trace_2eproto 

namespace protobuf_trace_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_trace_2eproto
namespace ProtoMessage {
class traceRecord;
class traceRecordDefaultTypeInternal;
extern traceRecordDefaultTypeInternal _traceRecord_default_instance_;
}  // namespace ProtoMessage
namespace google {
namespace protobuf {
template<> ::ProtoMessage::traceRecord* Arena::CreateMaybeMessage<::ProtoMessage::traceRecord>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ProtoMessage {

enum traceRecord_addrCmd {
  traceRecord_addrCmd_LOAD = 0,
  traceRecord_addrCmd_STORE = 1
};
bool traceRecord_addrCmd_IsValid(int value);
const traceRecord_addrCmd traceRecord_addrCmd_addrCmd_MIN = traceRecord_addrCmd_LOAD;
const traceRecord_addrCmd traceRecord_addrCmd_addrCmd_MAX = traceRecord_addrCmd_STORE;
const int traceRecord_addrCmd_addrCmd_ARRAYSIZE = traceRecord_addrCmd_addrCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* traceRecord_addrCmd_descriptor();
inline const ::std::string& traceRecord_addrCmd_Name(traceRecord_addrCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    traceRecord_addrCmd_descriptor(), value);
}
inline bool traceRecord_addrCmd_Parse(
    const ::std::string& name, traceRecord_addrCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<traceRecord_addrCmd>(
    traceRecord_addrCmd_descriptor(), name, value);
}
// ===================================================================

class traceRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoMessage.traceRecord) */ {
 public:
  traceRecord();
  virtual ~traceRecord();

  traceRecord(const traceRecord& from);

  inline traceRecord& operator=(const traceRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  traceRecord(traceRecord&& from) noexcept
    : traceRecord() {
    *this = ::std::move(from);
  }

  inline traceRecord& operator=(traceRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const traceRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const traceRecord* internal_default_instance() {
    return reinterpret_cast<const traceRecord*>(
               &_traceRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(traceRecord* other);
  friend void swap(traceRecord& a, traceRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline traceRecord* New() const final {
    return CreateMaybeMessage<traceRecord>(NULL);
  }

  traceRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<traceRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const traceRecord& from);
  void MergeFrom(const traceRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(traceRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef traceRecord_addrCmd addrCmd;
  static const addrCmd LOAD =
    traceRecord_addrCmd_LOAD;
  static const addrCmd STORE =
    traceRecord_addrCmd_STORE;
  static inline bool addrCmd_IsValid(int value) {
    return traceRecord_addrCmd_IsValid(value);
  }
  static const addrCmd addrCmd_MIN =
    traceRecord_addrCmd_addrCmd_MIN;
  static const addrCmd addrCmd_MAX =
    traceRecord_addrCmd_addrCmd_MAX;
  static const int addrCmd_ARRAYSIZE =
    traceRecord_addrCmd_addrCmd_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  addrCmd_descriptor() {
    return traceRecord_addrCmd_descriptor();
  }
  static inline const ::std::string& addrCmd_Name(addrCmd value) {
    return traceRecord_addrCmd_Name(value);
  }
  static inline bool addrCmd_Parse(const ::std::string& name,
      addrCmd* value) {
    return traceRecord_addrCmd_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint64 addr = 2;
  int addr_size() const;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  ::google::protobuf::uint64 addr(int index) const;
  void set_addr(int index, ::google::protobuf::uint64 value);
  void add_addr(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      addr() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_addr();

  // required uint64 fetnumber = 1;
  bool has_fetnumber() const;
  void clear_fetnumber();
  static const int kFetnumberFieldNumber = 1;
  ::google::protobuf::uint64 fetnumber() const;
  void set_fetnumber(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ProtoMessage.traceRecord)
 private:
  void set_has_fetnumber();
  void clear_has_fetnumber();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > addr_;
  ::google::protobuf::uint64 fetnumber_;
  friend struct ::protobuf_trace_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// traceRecord

// required uint64 fetnumber = 1;
inline bool traceRecord::has_fetnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void traceRecord::set_has_fetnumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void traceRecord::clear_has_fetnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void traceRecord::clear_fetnumber() {
  fetnumber_ = GOOGLE_ULONGLONG(0);
  clear_has_fetnumber();
}
inline ::google::protobuf::uint64 traceRecord::fetnumber() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.traceRecord.fetnumber)
  return fetnumber_;
}
inline void traceRecord::set_fetnumber(::google::protobuf::uint64 value) {
  set_has_fetnumber();
  fetnumber_ = value;
  // @@protoc_insertion_point(field_set:ProtoMessage.traceRecord.fetnumber)
}

// repeated uint64 addr = 2;
inline int traceRecord::addr_size() const {
  return addr_.size();
}
inline void traceRecord::clear_addr() {
  addr_.Clear();
}
inline ::google::protobuf::uint64 traceRecord::addr(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMessage.traceRecord.addr)
  return addr_.Get(index);
}
inline void traceRecord::set_addr(int index, ::google::protobuf::uint64 value) {
  addr_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoMessage.traceRecord.addr)
}
inline void traceRecord::add_addr(::google::protobuf::uint64 value) {
  addr_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoMessage.traceRecord.addr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
traceRecord::addr() const {
  // @@protoc_insertion_point(field_list:ProtoMessage.traceRecord.addr)
  return addr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
traceRecord::mutable_addr() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMessage.traceRecord.addr)
  return &addr_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMessage

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ProtoMessage::traceRecord_addrCmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMessage::traceRecord_addrCmd>() {
  return ::ProtoMessage::traceRecord_addrCmd_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_trace_2eproto
