#include"X86_dec.h"
#include"models/inst_model/rt_instr.h"
namespace traceBuilder::model {







X86_DECODER::X86_DECODER(): DECODER_BASE(){



     decodeStorage.insert({"ADC$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"ADD$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"AND$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"OR$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"ROL$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"ROR$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"SAL$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"SAR$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"SBB$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"SHL$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"SHLD$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"SHR$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"SHRD$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"SUB$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"XCHG$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"XOR$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"CMP$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"INC$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"RCL$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"RCR$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"JMP$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"LEA$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"CMPXCHG$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"V64_INT_ALU$R_R$R_R", (MOP_BASE*)(new COMP_INT$R_R$R_R())});
     decodeStorage.insert({"ADC$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"ADD$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"AND$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"OR$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"ROL$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"ROR$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"SAL$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"SAR$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"SBB$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"SHL$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"SHLD$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"SHR$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"SHRD$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"SUB$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"XCHG$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"XOR$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"CMP$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"INC$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"RCL$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"RCR$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"JMP$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"LEA$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"CMPXCHG$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"V64_INT_ALU$R_R$R_M", (MOP_BASE*)(new COMP_INT$R_R$R_M())});
     decodeStorage.insert({"ADC$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"ADD$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"AND$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"OR$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"ROL$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"ROR$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"SAL$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"SAR$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"SBB$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"SHL$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"SHLD$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"SHR$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"SHRD$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"SUB$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"XCHG$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"XOR$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"CMP$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"INC$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"RCL$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"RCR$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"JMP$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"LEA$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"CMPXCHG$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"V64_INT_ALU$R_R$R", (MOP_BASE*)(new COMP_INT$R_R$R())});
     decodeStorage.insert({"ADC$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"ADD$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"AND$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"OR$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"ROL$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"ROR$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"SAL$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"SAR$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"SBB$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"SHL$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"SHLD$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"SHR$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"SHRD$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"SUB$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"XCHG$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"XOR$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"CMP$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"INC$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"RCL$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"RCR$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"JMP$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"LEA$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"CMPXCHG$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"V64_INT_ALU$R_R$M_R", (MOP_BASE*)(new COMP_INT$R_R$M_R())});
     decodeStorage.insert({"ADC$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"ADD$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"AND$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"OR$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"ROL$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"ROR$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"SAL$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"SAR$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"SBB$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"SHL$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"SHLD$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"SHR$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"SHRD$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"SUB$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"XCHG$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"XOR$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"CMP$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"INC$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"RCL$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"RCR$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"JMP$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"LEA$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"CMPXCHG$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"V64_INT_ALU$R_R$M_M", (MOP_BASE*)(new COMP_INT$R_R$M_M())});
     decodeStorage.insert({"ADC$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"ADD$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"AND$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"OR$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"ROL$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"ROR$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"SAL$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"SAR$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"SBB$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"SHL$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"SHLD$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"SHR$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"SHRD$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"SUB$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"XCHG$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"XOR$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"CMP$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"INC$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"RCL$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"RCR$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"JMP$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"LEA$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"CMPXCHG$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"V64_INT_ALU$R_R$M", (MOP_BASE*)(new COMP_INT$R_R$M())});
     decodeStorage.insert({"ADC$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"ADD$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"AND$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"OR$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"ROL$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"ROR$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"SAL$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"SAR$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"SBB$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"SHL$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"SHLD$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"SHR$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"SHRD$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"SUB$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"XCHG$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"XOR$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"CMP$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"INC$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"RCL$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"RCR$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"JMP$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"LEA$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"CMPXCHG$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"V64_INT_ALU$R_I$R_R", (MOP_BASE*)(new COMP_INT$R_I$R_R())});
     decodeStorage.insert({"ADC$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"ADD$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"AND$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"OR$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"ROL$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"ROR$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"SAL$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"SAR$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"SBB$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"SHL$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"SHLD$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"SHR$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"SHRD$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"SUB$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"XCHG$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"XOR$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"CMP$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"INC$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"RCL$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"RCR$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"JMP$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"LEA$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"CMPXCHG$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"V64_INT_ALU$R_I$R_M", (MOP_BASE*)(new COMP_INT$R_I$R_M())});
     decodeStorage.insert({"ADC$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"ADD$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"AND$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"OR$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"ROL$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"ROR$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"SAL$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"SAR$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"SBB$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"SHL$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"SHLD$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"SHR$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"SHRD$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"SUB$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"XCHG$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"XOR$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"CMP$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"INC$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"RCL$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"RCR$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"JMP$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"LEA$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"CMPXCHG$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"V64_INT_ALU$R_I$R", (MOP_BASE*)(new COMP_INT$R_I$R())});
     decodeStorage.insert({"ADC$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"ADD$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"AND$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"OR$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"ROL$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"ROR$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"SAL$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"SAR$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"SBB$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"SHL$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"SHLD$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"SHR$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"SHRD$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"SUB$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"XCHG$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"XOR$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"CMP$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"INC$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"RCL$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"RCR$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"JMP$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"LEA$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"CMPXCHG$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"V64_INT_ALU$R_I$M_R", (MOP_BASE*)(new COMP_INT$R_I$M_R())});
     decodeStorage.insert({"ADC$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"ADD$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"AND$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"OR$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"ROL$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"ROR$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"SAL$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"SAR$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"SBB$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"SHL$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"SHLD$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"SHR$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"SHRD$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"SUB$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"XCHG$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"XOR$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"CMP$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"INC$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"RCL$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"RCR$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"JMP$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"LEA$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"CMPXCHG$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"V64_INT_ALU$R_I$M_M", (MOP_BASE*)(new COMP_INT$R_I$M_M())});
     decodeStorage.insert({"ADC$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"ADD$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"AND$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"OR$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"ROL$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"ROR$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"SAL$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"SAR$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"SBB$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"SHL$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"SHLD$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"SHR$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"SHRD$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"SUB$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"XCHG$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"XOR$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"CMP$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"INC$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"RCL$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"RCR$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"JMP$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"LEA$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"CMPXCHG$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"V64_INT_ALU$R_I$M", (MOP_BASE*)(new COMP_INT$R_I$M())});
     decodeStorage.insert({"ADC$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"ADD$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"AND$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"OR$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"ROL$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"ROR$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"SAL$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"SAR$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"SBB$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"SHL$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"SHLD$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"SHR$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"SHRD$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"SUB$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"XCHG$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"XOR$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"CMP$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"INC$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"RCL$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"RCR$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"JMP$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"LEA$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"CMPXCHG$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"V64_INT_ALU$R_M$R_R", (MOP_BASE*)(new COMP_INT$R_M$R_R())});
     decodeStorage.insert({"ADC$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"ADD$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"AND$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"OR$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"ROL$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"ROR$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"SAL$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"SAR$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"SBB$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"SHL$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"SHLD$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"SHR$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"SHRD$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"SUB$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"XCHG$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"XOR$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"CMP$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"INC$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"RCL$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"RCR$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"JMP$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"LEA$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"CMPXCHG$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"V64_INT_ALU$R_M$R_M", (MOP_BASE*)(new COMP_INT$R_M$R_M())});
     decodeStorage.insert({"ADC$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"ADD$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"AND$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"OR$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"ROL$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"ROR$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"SAL$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"SAR$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"SBB$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"SHL$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"SHLD$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"SHR$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"SHRD$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"SUB$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"XCHG$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"XOR$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"CMP$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"INC$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"RCL$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"RCR$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"JMP$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"LEA$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"CMPXCHG$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"V64_INT_ALU$R_M$R", (MOP_BASE*)(new COMP_INT$R_M$R())});
     decodeStorage.insert({"ADC$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"ADD$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"AND$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"OR$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"ROL$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"ROR$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"SAL$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"SAR$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"SBB$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"SHL$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"SHLD$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"SHR$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"SHRD$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"SUB$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"XCHG$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"XOR$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"CMP$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"INC$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"RCL$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"RCR$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"JMP$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"LEA$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"CMPXCHG$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"V64_INT_ALU$R_M$M_R", (MOP_BASE*)(new COMP_INT$R_M$M_R())});
     decodeStorage.insert({"ADC$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"ADD$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"AND$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"OR$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"ROL$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"ROR$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"SAL$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"SAR$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"SBB$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"SHL$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"SHLD$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"SHR$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"SHRD$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"SUB$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"XCHG$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"XOR$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"CMP$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"INC$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"RCL$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"RCR$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"JMP$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"LEA$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"CMPXCHG$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"V64_INT_ALU$R_M$M_M", (MOP_BASE*)(new COMP_INT$R_M$M_M())});
     decodeStorage.insert({"ADC$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"ADD$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"AND$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"OR$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"ROL$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"ROR$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"SAL$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"SAR$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"SBB$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"SHL$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"SHLD$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"SHR$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"SHRD$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"SUB$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"XCHG$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"XOR$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"CMP$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"INC$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"RCL$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"RCR$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"JMP$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"LEA$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"CMPXCHG$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"V64_INT_ALU$R_M$M", (MOP_BASE*)(new COMP_INT$R_M$M())});
     decodeStorage.insert({"ADC$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"ADD$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"AND$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"OR$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"ROL$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"ROR$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"SAL$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"SAR$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"SBB$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"SHL$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"SHLD$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"SHR$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"SHRD$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"SUB$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"XCHG$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"XOR$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"CMP$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"INC$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"RCL$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"RCR$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"JMP$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"LEA$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"CMPXCHG$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"V64_INT_ALU$I_R$R_R", (MOP_BASE*)(new COMP_INT$I_R$R_R())});
     decodeStorage.insert({"ADC$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"ADD$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"AND$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"OR$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"ROL$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"ROR$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"SAL$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"SAR$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"SBB$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"SHL$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"SHLD$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"SHR$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"SHRD$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"SUB$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"XCHG$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"XOR$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"CMP$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"INC$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"RCL$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"RCR$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"JMP$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"LEA$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"CMPXCHG$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"V64_INT_ALU$I_R$R_M", (MOP_BASE*)(new COMP_INT$I_R$R_M())});
     decodeStorage.insert({"ADC$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"ADD$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"AND$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"OR$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"ROL$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"ROR$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"SAL$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"SAR$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"SBB$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"SHL$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"SHLD$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"SHR$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"SHRD$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"SUB$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"XCHG$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"XOR$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"CMP$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"INC$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"RCL$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"RCR$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"JMP$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"LEA$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"CMPXCHG$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"V64_INT_ALU$I_R$R", (MOP_BASE*)(new COMP_INT$I_R$R())});
     decodeStorage.insert({"ADC$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"ADD$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"AND$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"OR$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"ROL$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"ROR$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"SAL$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"SAR$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"SBB$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"SHL$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"SHLD$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"SHR$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"SHRD$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"SUB$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"XCHG$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"XOR$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"CMP$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"INC$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"RCL$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"RCR$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"JMP$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"LEA$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"CMPXCHG$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"V64_INT_ALU$I_R$M_R", (MOP_BASE*)(new COMP_INT$I_R$M_R())});
     decodeStorage.insert({"ADC$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"ADD$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"AND$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"OR$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"ROL$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"ROR$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"SAL$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"SAR$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"SBB$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"SHL$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"SHLD$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"SHR$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"SHRD$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"SUB$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"XCHG$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"XOR$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"CMP$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"INC$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"RCL$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"RCR$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"JMP$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"LEA$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"CMPXCHG$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"V64_INT_ALU$I_R$M_M", (MOP_BASE*)(new COMP_INT$I_R$M_M())});
     decodeStorage.insert({"ADC$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"ADD$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"AND$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"OR$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"ROL$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"ROR$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"SAL$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"SAR$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"SBB$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"SHL$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"SHLD$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"SHR$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"SHRD$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"SUB$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"XCHG$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"XOR$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"CMP$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"INC$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"RCL$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"RCR$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"JMP$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"LEA$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"CMPXCHG$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"V64_INT_ALU$I_R$M", (MOP_BASE*)(new COMP_INT$I_R$M())});
     decodeStorage.insert({"ADC$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"ADD$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"AND$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"OR$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"ROL$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"ROR$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"SAL$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"SAR$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"SBB$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"SHL$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"SHLD$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"SHR$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"SHRD$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"SUB$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"XCHG$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"XOR$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"CMP$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"INC$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"RCL$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"RCR$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"JMP$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"LEA$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"CMPXCHG$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"V64_INT_ALU$I_I$R_R", (MOP_BASE*)(new COMP_INT$I_I$R_R())});
     decodeStorage.insert({"ADC$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"ADD$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"AND$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"OR$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"ROL$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"ROR$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"SAL$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"SAR$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"SBB$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"SHL$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"SHLD$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"SHR$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"SHRD$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"SUB$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"XCHG$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"XOR$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"CMP$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"INC$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"RCL$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"RCR$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"JMP$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"LEA$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"CMPXCHG$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"V64_INT_ALU$I_I$R_M", (MOP_BASE*)(new COMP_INT$I_I$R_M())});
     decodeStorage.insert({"ADC$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"ADD$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"AND$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"OR$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"ROL$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"ROR$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"SAL$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"SAR$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"SBB$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"SHL$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"SHLD$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"SHR$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"SHRD$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"SUB$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"XCHG$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"XOR$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"CMP$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"INC$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"RCL$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"RCR$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"JMP$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"LEA$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"CMPXCHG$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"V64_INT_ALU$I_I$R", (MOP_BASE*)(new COMP_INT$I_I$R())});
     decodeStorage.insert({"ADC$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"ADD$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"AND$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"OR$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"ROL$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"ROR$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"SAL$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"SAR$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"SBB$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"SHL$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"SHLD$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"SHR$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"SHRD$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"SUB$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"XCHG$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"XOR$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"CMP$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"INC$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"RCL$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"RCR$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"JMP$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"LEA$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"CMPXCHG$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"V64_INT_ALU$I_I$M_R", (MOP_BASE*)(new COMP_INT$I_I$M_R())});
     decodeStorage.insert({"ADC$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"ADD$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"AND$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"OR$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"ROL$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"ROR$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"SAL$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"SAR$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"SBB$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"SHL$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"SHLD$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"SHR$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"SHRD$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"SUB$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"XCHG$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"XOR$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"CMP$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"INC$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"RCL$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"RCR$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"JMP$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"LEA$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"CMPXCHG$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"V64_INT_ALU$I_I$M_M", (MOP_BASE*)(new COMP_INT$I_I$M_M())});
     decodeStorage.insert({"ADC$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"ADD$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"AND$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"OR$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"ROL$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"ROR$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"SAL$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"SAR$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"SBB$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"SHL$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"SHLD$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"SHR$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"SHRD$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"SUB$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"XCHG$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"XOR$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"CMP$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"INC$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"RCL$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"RCR$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"JMP$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"LEA$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"CMPXCHG$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"V64_INT_ALU$I_I$M", (MOP_BASE*)(new COMP_INT$I_I$M())});
     decodeStorage.insert({"ADC$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"ADD$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"AND$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"OR$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"ROL$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"ROR$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"SAL$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"SAR$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"SBB$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"SHL$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"SHLD$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"SHR$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"SHRD$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"SUB$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"XCHG$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"XOR$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"CMP$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"INC$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"RCL$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"RCR$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"JMP$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"LEA$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"CMPXCHG$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"V64_INT_ALU$I_M$R_R", (MOP_BASE*)(new COMP_INT$I_M$R_R())});
     decodeStorage.insert({"ADC$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"ADD$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"AND$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"OR$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"ROL$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"ROR$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"SAL$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"SAR$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"SBB$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"SHL$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"SHLD$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"SHR$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"SHRD$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"SUB$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"XCHG$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"XOR$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"CMP$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"INC$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"RCL$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"RCR$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"JMP$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"LEA$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"CMPXCHG$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"V64_INT_ALU$I_M$R_M", (MOP_BASE*)(new COMP_INT$I_M$R_M())});
     decodeStorage.insert({"ADC$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"ADD$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"AND$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"OR$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"ROL$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"ROR$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"SAL$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"SAR$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"SBB$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"SHL$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"SHLD$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"SHR$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"SHRD$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"SUB$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"XCHG$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"XOR$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"CMP$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"INC$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"RCL$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"RCR$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"JMP$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"LEA$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"CMPXCHG$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"V64_INT_ALU$I_M$R", (MOP_BASE*)(new COMP_INT$I_M$R())});
     decodeStorage.insert({"ADC$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"ADD$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"AND$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"OR$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"ROL$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"ROR$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"SAL$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"SAR$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"SBB$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"SHL$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"SHLD$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"SHR$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"SHRD$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"SUB$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"XCHG$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"XOR$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"CMP$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"INC$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"RCL$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"RCR$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"JMP$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"LEA$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"CMPXCHG$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"V64_INT_ALU$I_M$M_R", (MOP_BASE*)(new COMP_INT$I_M$M_R())});
     decodeStorage.insert({"ADC$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"ADD$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"AND$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"OR$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"ROL$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"ROR$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"SAL$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"SAR$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"SBB$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"SHL$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"SHLD$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"SHR$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"SHRD$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"SUB$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"XCHG$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"XOR$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"CMP$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"INC$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"RCL$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"RCR$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"JMP$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"LEA$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"CMPXCHG$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"V64_INT_ALU$I_M$M_M", (MOP_BASE*)(new COMP_INT$I_M$M_M())});
     decodeStorage.insert({"ADC$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"ADD$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"AND$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"OR$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"ROL$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"ROR$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"SAL$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"SAR$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"SBB$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"SHL$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"SHLD$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"SHR$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"SHRD$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"SUB$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"XCHG$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"XOR$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"CMP$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"INC$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"RCL$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"RCR$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"JMP$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"LEA$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"CMPXCHG$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"V64_INT_ALU$I_M$M", (MOP_BASE*)(new COMP_INT$I_M$M())});
     decodeStorage.insert({"ADC$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"ADD$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"AND$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"OR$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"ROL$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"ROR$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"SAL$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"SAR$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"SBB$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"SHL$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"SHLD$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"SHR$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"SHRD$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"SUB$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"XCHG$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"XOR$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"CMP$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"INC$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"RCL$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"RCR$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"JMP$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"LEA$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"CMPXCHG$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"V64_INT_ALU$M_R$R_R", (MOP_BASE*)(new COMP_INT$M_R$R_R())});
     decodeStorage.insert({"ADC$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"ADD$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"AND$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"OR$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"ROL$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"ROR$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"SAL$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"SAR$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"SBB$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"SHL$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"SHLD$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"SHR$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"SHRD$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"SUB$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"XCHG$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"XOR$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"CMP$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"INC$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"RCL$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"RCR$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"JMP$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"LEA$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"CMPXCHG$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"V64_INT_ALU$M_R$R_M", (MOP_BASE*)(new COMP_INT$M_R$R_M())});
     decodeStorage.insert({"ADC$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"ADD$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"AND$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"OR$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"ROL$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"ROR$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"SAL$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"SAR$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"SBB$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"SHL$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"SHLD$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"SHR$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"SHRD$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"SUB$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"XCHG$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"XOR$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"CMP$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"INC$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"RCL$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"RCR$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"JMP$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"LEA$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"CMPXCHG$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"V64_INT_ALU$M_R$R", (MOP_BASE*)(new COMP_INT$M_R$R())});
     decodeStorage.insert({"ADC$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"ADD$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"AND$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"OR$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"ROL$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"ROR$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"SAL$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"SAR$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"SBB$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"SHL$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"SHLD$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"SHR$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"SHRD$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"SUB$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"XCHG$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"XOR$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"CMP$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"INC$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"RCL$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"RCR$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"JMP$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"LEA$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"CMPXCHG$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"V64_INT_ALU$M_R$M_R", (MOP_BASE*)(new COMP_INT$M_R$M_R())});
     decodeStorage.insert({"ADC$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"ADD$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"AND$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"OR$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"ROL$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"ROR$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"SAL$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"SAR$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"SBB$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"SHL$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"SHLD$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"SHR$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"SHRD$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"SUB$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"XCHG$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"XOR$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"CMP$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"INC$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"RCL$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"RCR$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"JMP$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"LEA$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"CMPXCHG$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"V64_INT_ALU$M_R$M_M", (MOP_BASE*)(new COMP_INT$M_R$M_M())});
     decodeStorage.insert({"ADC$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"ADD$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"AND$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"OR$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"ROL$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"ROR$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"SAL$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"SAR$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"SBB$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"SHL$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"SHLD$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"SHR$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"SHRD$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"SUB$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"XCHG$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"XOR$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"CMP$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"INC$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"RCL$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"RCR$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"JMP$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"LEA$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"CMPXCHG$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"V64_INT_ALU$M_R$M", (MOP_BASE*)(new COMP_INT$M_R$M())});
     decodeStorage.insert({"ADC$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"ADD$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"AND$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"OR$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"ROL$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"ROR$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"SAL$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"SAR$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"SBB$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"SHL$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"SHLD$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"SHR$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"SHRD$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"SUB$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"XCHG$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"XOR$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"CMP$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"INC$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"RCL$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"RCR$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"JMP$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"LEA$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"CMPXCHG$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"V64_INT_ALU$M_I$R_R", (MOP_BASE*)(new COMP_INT$M_I$R_R())});
     decodeStorage.insert({"ADC$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"ADD$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"AND$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"OR$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"ROL$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"ROR$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"SAL$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"SAR$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"SBB$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"SHL$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"SHLD$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"SHR$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"SHRD$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"SUB$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"XCHG$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"XOR$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"CMP$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"INC$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"RCL$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"RCR$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"JMP$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"LEA$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"CMPXCHG$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"V64_INT_ALU$M_I$R_M", (MOP_BASE*)(new COMP_INT$M_I$R_M())});
     decodeStorage.insert({"ADC$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"ADD$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"AND$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"OR$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"ROL$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"ROR$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"SAL$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"SAR$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"SBB$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"SHL$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"SHLD$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"SHR$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"SHRD$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"SUB$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"XCHG$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"XOR$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"CMP$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"INC$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"RCL$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"RCR$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"JMP$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"LEA$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"CMPXCHG$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"V64_INT_ALU$M_I$R", (MOP_BASE*)(new COMP_INT$M_I$R())});
     decodeStorage.insert({"ADC$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"ADD$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"AND$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"OR$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"ROL$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"ROR$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"SAL$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"SAR$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"SBB$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"SHL$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"SHLD$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"SHR$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"SHRD$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"SUB$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"XCHG$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"XOR$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"CMP$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"INC$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"RCL$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"RCR$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"JMP$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"LEA$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"CMPXCHG$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"V64_INT_ALU$M_I$M_R", (MOP_BASE*)(new COMP_INT$M_I$M_R())});
     decodeStorage.insert({"ADC$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"ADD$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"AND$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"OR$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"ROL$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"ROR$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"SAL$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"SAR$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"SBB$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"SHL$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"SHLD$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"SHR$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"SHRD$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"SUB$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"XCHG$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"XOR$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"CMP$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"INC$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"RCL$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"RCR$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"JMP$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"LEA$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"CMPXCHG$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"V64_INT_ALU$M_I$M_M", (MOP_BASE*)(new COMP_INT$M_I$M_M())});
     decodeStorage.insert({"ADC$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"ADD$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"AND$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"OR$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"ROL$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"ROR$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"SAL$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"SAR$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"SBB$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"SHL$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"SHLD$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"SHR$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"SHRD$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"SUB$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"XCHG$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"XOR$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"CMP$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"INC$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"RCL$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"RCR$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"JMP$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"LEA$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"CMPXCHG$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"V64_INT_ALU$M_I$M", (MOP_BASE*)(new COMP_INT$M_I$M())});
     decodeStorage.insert({"ADC$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"ADD$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"AND$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"OR$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"ROL$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"ROR$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"SAL$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"SAR$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"SBB$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"SHL$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"SHLD$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"SHR$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"SHRD$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"SUB$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"XCHG$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"XOR$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"CMP$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"INC$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"RCL$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"RCR$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"JMP$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"LEA$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"CMPXCHG$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"V64_INT_ALU$M_M$R_R", (MOP_BASE*)(new COMP_INT$M_M$R_R())});
     decodeStorage.insert({"ADC$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"ADD$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"AND$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"OR$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"ROL$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"ROR$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"SAL$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"SAR$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"SBB$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"SHL$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"SHLD$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"SHR$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"SHRD$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"SUB$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"XCHG$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"XOR$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"CMP$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"INC$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"RCL$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"RCR$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"JMP$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"LEA$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"CMPXCHG$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"V64_INT_ALU$M_M$R_M", (MOP_BASE*)(new COMP_INT$M_M$R_M())});
     decodeStorage.insert({"ADC$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"ADD$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"AND$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"OR$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"ROL$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"ROR$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"SAL$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"SAR$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"SBB$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"SHL$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"SHLD$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"SHR$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"SHRD$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"SUB$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"XCHG$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"XOR$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"CMP$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"INC$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"RCL$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"RCR$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"JMP$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"LEA$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"CMPXCHG$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"V64_INT_ALU$M_M$R", (MOP_BASE*)(new COMP_INT$M_M$R())});
     decodeStorage.insert({"ADC$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"ADD$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"AND$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"OR$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"ROL$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"ROR$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"SAL$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"SAR$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"SBB$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"SHL$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"SHLD$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"SHR$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"SHRD$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"SUB$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"XCHG$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"XOR$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"CMP$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"INC$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"RCL$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"RCR$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"JMP$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"LEA$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"CMPXCHG$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"V64_INT_ALU$M_M$M_R", (MOP_BASE*)(new COMP_INT$M_M$M_R())});
     decodeStorage.insert({"ADC$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"ADD$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"AND$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"OR$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"ROL$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"ROR$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"SAL$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"SAR$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"SBB$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"SHL$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"SHLD$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"SHR$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"SHRD$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"SUB$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"XCHG$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"XOR$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"CMP$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"INC$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"RCL$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"RCR$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"JMP$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"LEA$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"CMPXCHG$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"V64_INT_ALU$M_M$M_M", (MOP_BASE*)(new COMP_INT$M_M$M_M())});
     decodeStorage.insert({"ADC$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"ADD$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"AND$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"OR$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"ROL$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"ROR$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"SAL$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"SAR$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"SBB$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"SHL$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"SHLD$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"SHR$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"SHRD$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"SUB$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"XCHG$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"XOR$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"CMP$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"INC$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"RCL$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"RCR$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"JMP$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"LEA$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"CMPXCHG$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"V64_INT_ALU$M_M$M", (MOP_BASE*)(new COMP_INT$M_M$M())});
     decodeStorage.insert({"MUL$R_R$R_R", (MOP_BASE*)(new COMP_MUL$R_R$R_R())});
     decodeStorage.insert({"IMUL$R_R$R_R", (MOP_BASE*)(new COMP_MUL$R_R$R_R())});
     decodeStorage.insert({"MULX$R_R$R_R", (MOP_BASE*)(new COMP_MUL$R_R$R_R())});
     decodeStorage.insert({"V64_INT_MUL$R_R$R_R", (MOP_BASE*)(new COMP_MUL$R_R$R_R())});
     decodeStorage.insert({"MUL$R_R$R_M", (MOP_BASE*)(new COMP_MUL$R_R$R_M())});
     decodeStorage.insert({"IMUL$R_R$R_M", (MOP_BASE*)(new COMP_MUL$R_R$R_M())});
     decodeStorage.insert({"MULX$R_R$R_M", (MOP_BASE*)(new COMP_MUL$R_R$R_M())});
     decodeStorage.insert({"V64_INT_MUL$R_R$R_M", (MOP_BASE*)(new COMP_MUL$R_R$R_M())});
     decodeStorage.insert({"MUL$R_R$R", (MOP_BASE*)(new COMP_MUL$R_R$R())});
     decodeStorage.insert({"IMUL$R_R$R", (MOP_BASE*)(new COMP_MUL$R_R$R())});
     decodeStorage.insert({"MULX$R_R$R", (MOP_BASE*)(new COMP_MUL$R_R$R())});
     decodeStorage.insert({"V64_INT_MUL$R_R$R", (MOP_BASE*)(new COMP_MUL$R_R$R())});
     decodeStorage.insert({"MUL$R_R$M_R", (MOP_BASE*)(new COMP_MUL$R_R$M_R())});
     decodeStorage.insert({"IMUL$R_R$M_R", (MOP_BASE*)(new COMP_MUL$R_R$M_R())});
     decodeStorage.insert({"MULX$R_R$M_R", (MOP_BASE*)(new COMP_MUL$R_R$M_R())});
     decodeStorage.insert({"V64_INT_MUL$R_R$M_R", (MOP_BASE*)(new COMP_MUL$R_R$M_R())});
     decodeStorage.insert({"MUL$R_R$M_M", (MOP_BASE*)(new COMP_MUL$R_R$M_M())});
     decodeStorage.insert({"IMUL$R_R$M_M", (MOP_BASE*)(new COMP_MUL$R_R$M_M())});
     decodeStorage.insert({"MULX$R_R$M_M", (MOP_BASE*)(new COMP_MUL$R_R$M_M())});
     decodeStorage.insert({"V64_INT_MUL$R_R$M_M", (MOP_BASE*)(new COMP_MUL$R_R$M_M())});
     decodeStorage.insert({"MUL$R_R$M", (MOP_BASE*)(new COMP_MUL$R_R$M())});
     decodeStorage.insert({"IMUL$R_R$M", (MOP_BASE*)(new COMP_MUL$R_R$M())});
     decodeStorage.insert({"MULX$R_R$M", (MOP_BASE*)(new COMP_MUL$R_R$M())});
     decodeStorage.insert({"V64_INT_MUL$R_R$M", (MOP_BASE*)(new COMP_MUL$R_R$M())});
     decodeStorage.insert({"MUL$R_I$R_R", (MOP_BASE*)(new COMP_MUL$R_I$R_R())});
     decodeStorage.insert({"IMUL$R_I$R_R", (MOP_BASE*)(new COMP_MUL$R_I$R_R())});
     decodeStorage.insert({"MULX$R_I$R_R", (MOP_BASE*)(new COMP_MUL$R_I$R_R())});
     decodeStorage.insert({"V64_INT_MUL$R_I$R_R", (MOP_BASE*)(new COMP_MUL$R_I$R_R())});
     decodeStorage.insert({"MUL$R_I$R_M", (MOP_BASE*)(new COMP_MUL$R_I$R_M())});
     decodeStorage.insert({"IMUL$R_I$R_M", (MOP_BASE*)(new COMP_MUL$R_I$R_M())});
     decodeStorage.insert({"MULX$R_I$R_M", (MOP_BASE*)(new COMP_MUL$R_I$R_M())});
     decodeStorage.insert({"V64_INT_MUL$R_I$R_M", (MOP_BASE*)(new COMP_MUL$R_I$R_M())});
     decodeStorage.insert({"MUL$R_I$R", (MOP_BASE*)(new COMP_MUL$R_I$R())});
     decodeStorage.insert({"IMUL$R_I$R", (MOP_BASE*)(new COMP_MUL$R_I$R())});
     decodeStorage.insert({"MULX$R_I$R", (MOP_BASE*)(new COMP_MUL$R_I$R())});
     decodeStorage.insert({"V64_INT_MUL$R_I$R", (MOP_BASE*)(new COMP_MUL$R_I$R())});
     decodeStorage.insert({"MUL$R_I$M_R", (MOP_BASE*)(new COMP_MUL$R_I$M_R())});
     decodeStorage.insert({"IMUL$R_I$M_R", (MOP_BASE*)(new COMP_MUL$R_I$M_R())});
     decodeStorage.insert({"MULX$R_I$M_R", (MOP_BASE*)(new COMP_MUL$R_I$M_R())});
     decodeStorage.insert({"V64_INT_MUL$R_I$M_R", (MOP_BASE*)(new COMP_MUL$R_I$M_R())});
     decodeStorage.insert({"MUL$R_I$M_M", (MOP_BASE*)(new COMP_MUL$R_I$M_M())});
     decodeStorage.insert({"IMUL$R_I$M_M", (MOP_BASE*)(new COMP_MUL$R_I$M_M())});
     decodeStorage.insert({"MULX$R_I$M_M", (MOP_BASE*)(new COMP_MUL$R_I$M_M())});
     decodeStorage.insert({"V64_INT_MUL$R_I$M_M", (MOP_BASE*)(new COMP_MUL$R_I$M_M())});
     decodeStorage.insert({"MUL$R_I$M", (MOP_BASE*)(new COMP_MUL$R_I$M())});
     decodeStorage.insert({"IMUL$R_I$M", (MOP_BASE*)(new COMP_MUL$R_I$M())});
     decodeStorage.insert({"MULX$R_I$M", (MOP_BASE*)(new COMP_MUL$R_I$M())});
     decodeStorage.insert({"V64_INT_MUL$R_I$M", (MOP_BASE*)(new COMP_MUL$R_I$M())});
     decodeStorage.insert({"MUL$R_M$R_R", (MOP_BASE*)(new COMP_MUL$R_M$R_R())});
     decodeStorage.insert({"IMUL$R_M$R_R", (MOP_BASE*)(new COMP_MUL$R_M$R_R())});
     decodeStorage.insert({"MULX$R_M$R_R", (MOP_BASE*)(new COMP_MUL$R_M$R_R())});
     decodeStorage.insert({"V64_INT_MUL$R_M$R_R", (MOP_BASE*)(new COMP_MUL$R_M$R_R())});
     decodeStorage.insert({"MUL$R_M$R_M", (MOP_BASE*)(new COMP_MUL$R_M$R_M())});
     decodeStorage.insert({"IMUL$R_M$R_M", (MOP_BASE*)(new COMP_MUL$R_M$R_M())});
     decodeStorage.insert({"MULX$R_M$R_M", (MOP_BASE*)(new COMP_MUL$R_M$R_M())});
     decodeStorage.insert({"V64_INT_MUL$R_M$R_M", (MOP_BASE*)(new COMP_MUL$R_M$R_M())});
     decodeStorage.insert({"MUL$R_M$R", (MOP_BASE*)(new COMP_MUL$R_M$R())});
     decodeStorage.insert({"IMUL$R_M$R", (MOP_BASE*)(new COMP_MUL$R_M$R())});
     decodeStorage.insert({"MULX$R_M$R", (MOP_BASE*)(new COMP_MUL$R_M$R())});
     decodeStorage.insert({"V64_INT_MUL$R_M$R", (MOP_BASE*)(new COMP_MUL$R_M$R())});
     decodeStorage.insert({"MUL$R_M$M_R", (MOP_BASE*)(new COMP_MUL$R_M$M_R())});
     decodeStorage.insert({"IMUL$R_M$M_R", (MOP_BASE*)(new COMP_MUL$R_M$M_R())});
     decodeStorage.insert({"MULX$R_M$M_R", (MOP_BASE*)(new COMP_MUL$R_M$M_R())});
     decodeStorage.insert({"V64_INT_MUL$R_M$M_R", (MOP_BASE*)(new COMP_MUL$R_M$M_R())});
     decodeStorage.insert({"MUL$R_M$M_M", (MOP_BASE*)(new COMP_MUL$R_M$M_M())});
     decodeStorage.insert({"IMUL$R_M$M_M", (MOP_BASE*)(new COMP_MUL$R_M$M_M())});
     decodeStorage.insert({"MULX$R_M$M_M", (MOP_BASE*)(new COMP_MUL$R_M$M_M())});
     decodeStorage.insert({"V64_INT_MUL$R_M$M_M", (MOP_BASE*)(new COMP_MUL$R_M$M_M())});
     decodeStorage.insert({"MUL$R_M$M", (MOP_BASE*)(new COMP_MUL$R_M$M())});
     decodeStorage.insert({"IMUL$R_M$M", (MOP_BASE*)(new COMP_MUL$R_M$M())});
     decodeStorage.insert({"MULX$R_M$M", (MOP_BASE*)(new COMP_MUL$R_M$M())});
     decodeStorage.insert({"V64_INT_MUL$R_M$M", (MOP_BASE*)(new COMP_MUL$R_M$M())});
     decodeStorage.insert({"MUL$I_R$R_R", (MOP_BASE*)(new COMP_MUL$I_R$R_R())});
     decodeStorage.insert({"IMUL$I_R$R_R", (MOP_BASE*)(new COMP_MUL$I_R$R_R())});
     decodeStorage.insert({"MULX$I_R$R_R", (MOP_BASE*)(new COMP_MUL$I_R$R_R())});
     decodeStorage.insert({"V64_INT_MUL$I_R$R_R", (MOP_BASE*)(new COMP_MUL$I_R$R_R())});
     decodeStorage.insert({"MUL$I_R$R_M", (MOP_BASE*)(new COMP_MUL$I_R$R_M())});
     decodeStorage.insert({"IMUL$I_R$R_M", (MOP_BASE*)(new COMP_MUL$I_R$R_M())});
     decodeStorage.insert({"MULX$I_R$R_M", (MOP_BASE*)(new COMP_MUL$I_R$R_M())});
     decodeStorage.insert({"V64_INT_MUL$I_R$R_M", (MOP_BASE*)(new COMP_MUL$I_R$R_M())});
     decodeStorage.insert({"MUL$I_R$R", (MOP_BASE*)(new COMP_MUL$I_R$R())});
     decodeStorage.insert({"IMUL$I_R$R", (MOP_BASE*)(new COMP_MUL$I_R$R())});
     decodeStorage.insert({"MULX$I_R$R", (MOP_BASE*)(new COMP_MUL$I_R$R())});
     decodeStorage.insert({"V64_INT_MUL$I_R$R", (MOP_BASE*)(new COMP_MUL$I_R$R())});
     decodeStorage.insert({"MUL$I_R$M_R", (MOP_BASE*)(new COMP_MUL$I_R$M_R())});
     decodeStorage.insert({"IMUL$I_R$M_R", (MOP_BASE*)(new COMP_MUL$I_R$M_R())});
     decodeStorage.insert({"MULX$I_R$M_R", (MOP_BASE*)(new COMP_MUL$I_R$M_R())});
     decodeStorage.insert({"V64_INT_MUL$I_R$M_R", (MOP_BASE*)(new COMP_MUL$I_R$M_R())});
     decodeStorage.insert({"MUL$I_R$M_M", (MOP_BASE*)(new COMP_MUL$I_R$M_M())});
     decodeStorage.insert({"IMUL$I_R$M_M", (MOP_BASE*)(new COMP_MUL$I_R$M_M())});
     decodeStorage.insert({"MULX$I_R$M_M", (MOP_BASE*)(new COMP_MUL$I_R$M_M())});
     decodeStorage.insert({"V64_INT_MUL$I_R$M_M", (MOP_BASE*)(new COMP_MUL$I_R$M_M())});
     decodeStorage.insert({"MUL$I_R$M", (MOP_BASE*)(new COMP_MUL$I_R$M())});
     decodeStorage.insert({"IMUL$I_R$M", (MOP_BASE*)(new COMP_MUL$I_R$M())});
     decodeStorage.insert({"MULX$I_R$M", (MOP_BASE*)(new COMP_MUL$I_R$M())});
     decodeStorage.insert({"V64_INT_MUL$I_R$M", (MOP_BASE*)(new COMP_MUL$I_R$M())});
     decodeStorage.insert({"MUL$I_I$R_R", (MOP_BASE*)(new COMP_MUL$I_I$R_R())});
     decodeStorage.insert({"IMUL$I_I$R_R", (MOP_BASE*)(new COMP_MUL$I_I$R_R())});
     decodeStorage.insert({"MULX$I_I$R_R", (MOP_BASE*)(new COMP_MUL$I_I$R_R())});
     decodeStorage.insert({"V64_INT_MUL$I_I$R_R", (MOP_BASE*)(new COMP_MUL$I_I$R_R())});
     decodeStorage.insert({"MUL$I_I$R_M", (MOP_BASE*)(new COMP_MUL$I_I$R_M())});
     decodeStorage.insert({"IMUL$I_I$R_M", (MOP_BASE*)(new COMP_MUL$I_I$R_M())});
     decodeStorage.insert({"MULX$I_I$R_M", (MOP_BASE*)(new COMP_MUL$I_I$R_M())});
     decodeStorage.insert({"V64_INT_MUL$I_I$R_M", (MOP_BASE*)(new COMP_MUL$I_I$R_M())});
     decodeStorage.insert({"MUL$I_I$R", (MOP_BASE*)(new COMP_MUL$I_I$R())});
     decodeStorage.insert({"IMUL$I_I$R", (MOP_BASE*)(new COMP_MUL$I_I$R())});
     decodeStorage.insert({"MULX$I_I$R", (MOP_BASE*)(new COMP_MUL$I_I$R())});
     decodeStorage.insert({"V64_INT_MUL$I_I$R", (MOP_BASE*)(new COMP_MUL$I_I$R())});
     decodeStorage.insert({"MUL$I_I$M_R", (MOP_BASE*)(new COMP_MUL$I_I$M_R())});
     decodeStorage.insert({"IMUL$I_I$M_R", (MOP_BASE*)(new COMP_MUL$I_I$M_R())});
     decodeStorage.insert({"MULX$I_I$M_R", (MOP_BASE*)(new COMP_MUL$I_I$M_R())});
     decodeStorage.insert({"V64_INT_MUL$I_I$M_R", (MOP_BASE*)(new COMP_MUL$I_I$M_R())});
     decodeStorage.insert({"MUL$I_I$M_M", (MOP_BASE*)(new COMP_MUL$I_I$M_M())});
     decodeStorage.insert({"IMUL$I_I$M_M", (MOP_BASE*)(new COMP_MUL$I_I$M_M())});
     decodeStorage.insert({"MULX$I_I$M_M", (MOP_BASE*)(new COMP_MUL$I_I$M_M())});
     decodeStorage.insert({"V64_INT_MUL$I_I$M_M", (MOP_BASE*)(new COMP_MUL$I_I$M_M())});
     decodeStorage.insert({"MUL$I_I$M", (MOP_BASE*)(new COMP_MUL$I_I$M())});
     decodeStorage.insert({"IMUL$I_I$M", (MOP_BASE*)(new COMP_MUL$I_I$M())});
     decodeStorage.insert({"MULX$I_I$M", (MOP_BASE*)(new COMP_MUL$I_I$M())});
     decodeStorage.insert({"V64_INT_MUL$I_I$M", (MOP_BASE*)(new COMP_MUL$I_I$M())});
     decodeStorage.insert({"MUL$I_M$R_R", (MOP_BASE*)(new COMP_MUL$I_M$R_R())});
     decodeStorage.insert({"IMUL$I_M$R_R", (MOP_BASE*)(new COMP_MUL$I_M$R_R())});
     decodeStorage.insert({"MULX$I_M$R_R", (MOP_BASE*)(new COMP_MUL$I_M$R_R())});
     decodeStorage.insert({"V64_INT_MUL$I_M$R_R", (MOP_BASE*)(new COMP_MUL$I_M$R_R())});
     decodeStorage.insert({"MUL$I_M$R_M", (MOP_BASE*)(new COMP_MUL$I_M$R_M())});
     decodeStorage.insert({"IMUL$I_M$R_M", (MOP_BASE*)(new COMP_MUL$I_M$R_M())});
     decodeStorage.insert({"MULX$I_M$R_M", (MOP_BASE*)(new COMP_MUL$I_M$R_M())});
     decodeStorage.insert({"V64_INT_MUL$I_M$R_M", (MOP_BASE*)(new COMP_MUL$I_M$R_M())});
     decodeStorage.insert({"MUL$I_M$R", (MOP_BASE*)(new COMP_MUL$I_M$R())});
     decodeStorage.insert({"IMUL$I_M$R", (MOP_BASE*)(new COMP_MUL$I_M$R())});
     decodeStorage.insert({"MULX$I_M$R", (MOP_BASE*)(new COMP_MUL$I_M$R())});
     decodeStorage.insert({"V64_INT_MUL$I_M$R", (MOP_BASE*)(new COMP_MUL$I_M$R())});
     decodeStorage.insert({"MUL$I_M$M_R", (MOP_BASE*)(new COMP_MUL$I_M$M_R())});
     decodeStorage.insert({"IMUL$I_M$M_R", (MOP_BASE*)(new COMP_MUL$I_M$M_R())});
     decodeStorage.insert({"MULX$I_M$M_R", (MOP_BASE*)(new COMP_MUL$I_M$M_R())});
     decodeStorage.insert({"V64_INT_MUL$I_M$M_R", (MOP_BASE*)(new COMP_MUL$I_M$M_R())});
     decodeStorage.insert({"MUL$I_M$M_M", (MOP_BASE*)(new COMP_MUL$I_M$M_M())});
     decodeStorage.insert({"IMUL$I_M$M_M", (MOP_BASE*)(new COMP_MUL$I_M$M_M())});
     decodeStorage.insert({"MULX$I_M$M_M", (MOP_BASE*)(new COMP_MUL$I_M$M_M())});
     decodeStorage.insert({"V64_INT_MUL$I_M$M_M", (MOP_BASE*)(new COMP_MUL$I_M$M_M())});
     decodeStorage.insert({"MUL$I_M$M", (MOP_BASE*)(new COMP_MUL$I_M$M())});
     decodeStorage.insert({"IMUL$I_M$M", (MOP_BASE*)(new COMP_MUL$I_M$M())});
     decodeStorage.insert({"MULX$I_M$M", (MOP_BASE*)(new COMP_MUL$I_M$M())});
     decodeStorage.insert({"V64_INT_MUL$I_M$M", (MOP_BASE*)(new COMP_MUL$I_M$M())});
     decodeStorage.insert({"MUL$M_R$R_R", (MOP_BASE*)(new COMP_MUL$M_R$R_R())});
     decodeStorage.insert({"IMUL$M_R$R_R", (MOP_BASE*)(new COMP_MUL$M_R$R_R())});
     decodeStorage.insert({"MULX$M_R$R_R", (MOP_BASE*)(new COMP_MUL$M_R$R_R())});
     decodeStorage.insert({"V64_INT_MUL$M_R$R_R", (MOP_BASE*)(new COMP_MUL$M_R$R_R())});
     decodeStorage.insert({"MUL$M_R$R_M", (MOP_BASE*)(new COMP_MUL$M_R$R_M())});
     decodeStorage.insert({"IMUL$M_R$R_M", (MOP_BASE*)(new COMP_MUL$M_R$R_M())});
     decodeStorage.insert({"MULX$M_R$R_M", (MOP_BASE*)(new COMP_MUL$M_R$R_M())});
     decodeStorage.insert({"V64_INT_MUL$M_R$R_M", (MOP_BASE*)(new COMP_MUL$M_R$R_M())});
     decodeStorage.insert({"MUL$M_R$R", (MOP_BASE*)(new COMP_MUL$M_R$R())});
     decodeStorage.insert({"IMUL$M_R$R", (MOP_BASE*)(new COMP_MUL$M_R$R())});
     decodeStorage.insert({"MULX$M_R$R", (MOP_BASE*)(new COMP_MUL$M_R$R())});
     decodeStorage.insert({"V64_INT_MUL$M_R$R", (MOP_BASE*)(new COMP_MUL$M_R$R())});
     decodeStorage.insert({"MUL$M_R$M_R", (MOP_BASE*)(new COMP_MUL$M_R$M_R())});
     decodeStorage.insert({"IMUL$M_R$M_R", (MOP_BASE*)(new COMP_MUL$M_R$M_R())});
     decodeStorage.insert({"MULX$M_R$M_R", (MOP_BASE*)(new COMP_MUL$M_R$M_R())});
     decodeStorage.insert({"V64_INT_MUL$M_R$M_R", (MOP_BASE*)(new COMP_MUL$M_R$M_R())});
     decodeStorage.insert({"MUL$M_R$M_M", (MOP_BASE*)(new COMP_MUL$M_R$M_M())});
     decodeStorage.insert({"IMUL$M_R$M_M", (MOP_BASE*)(new COMP_MUL$M_R$M_M())});
     decodeStorage.insert({"MULX$M_R$M_M", (MOP_BASE*)(new COMP_MUL$M_R$M_M())});
     decodeStorage.insert({"V64_INT_MUL$M_R$M_M", (MOP_BASE*)(new COMP_MUL$M_R$M_M())});
     decodeStorage.insert({"MUL$M_R$M", (MOP_BASE*)(new COMP_MUL$M_R$M())});
     decodeStorage.insert({"IMUL$M_R$M", (MOP_BASE*)(new COMP_MUL$M_R$M())});
     decodeStorage.insert({"MULX$M_R$M", (MOP_BASE*)(new COMP_MUL$M_R$M())});
     decodeStorage.insert({"V64_INT_MUL$M_R$M", (MOP_BASE*)(new COMP_MUL$M_R$M())});
     decodeStorage.insert({"MUL$M_I$R_R", (MOP_BASE*)(new COMP_MUL$M_I$R_R())});
     decodeStorage.insert({"IMUL$M_I$R_R", (MOP_BASE*)(new COMP_MUL$M_I$R_R())});
     decodeStorage.insert({"MULX$M_I$R_R", (MOP_BASE*)(new COMP_MUL$M_I$R_R())});
     decodeStorage.insert({"V64_INT_MUL$M_I$R_R", (MOP_BASE*)(new COMP_MUL$M_I$R_R())});
     decodeStorage.insert({"MUL$M_I$R_M", (MOP_BASE*)(new COMP_MUL$M_I$R_M())});
     decodeStorage.insert({"IMUL$M_I$R_M", (MOP_BASE*)(new COMP_MUL$M_I$R_M())});
     decodeStorage.insert({"MULX$M_I$R_M", (MOP_BASE*)(new COMP_MUL$M_I$R_M())});
     decodeStorage.insert({"V64_INT_MUL$M_I$R_M", (MOP_BASE*)(new COMP_MUL$M_I$R_M())});
     decodeStorage.insert({"MUL$M_I$R", (MOP_BASE*)(new COMP_MUL$M_I$R())});
     decodeStorage.insert({"IMUL$M_I$R", (MOP_BASE*)(new COMP_MUL$M_I$R())});
     decodeStorage.insert({"MULX$M_I$R", (MOP_BASE*)(new COMP_MUL$M_I$R())});
     decodeStorage.insert({"V64_INT_MUL$M_I$R", (MOP_BASE*)(new COMP_MUL$M_I$R())});
     decodeStorage.insert({"MUL$M_I$M_R", (MOP_BASE*)(new COMP_MUL$M_I$M_R())});
     decodeStorage.insert({"IMUL$M_I$M_R", (MOP_BASE*)(new COMP_MUL$M_I$M_R())});
     decodeStorage.insert({"MULX$M_I$M_R", (MOP_BASE*)(new COMP_MUL$M_I$M_R())});
     decodeStorage.insert({"V64_INT_MUL$M_I$M_R", (MOP_BASE*)(new COMP_MUL$M_I$M_R())});
     decodeStorage.insert({"MUL$M_I$M_M", (MOP_BASE*)(new COMP_MUL$M_I$M_M())});
     decodeStorage.insert({"IMUL$M_I$M_M", (MOP_BASE*)(new COMP_MUL$M_I$M_M())});
     decodeStorage.insert({"MULX$M_I$M_M", (MOP_BASE*)(new COMP_MUL$M_I$M_M())});
     decodeStorage.insert({"V64_INT_MUL$M_I$M_M", (MOP_BASE*)(new COMP_MUL$M_I$M_M())});
     decodeStorage.insert({"MUL$M_I$M", (MOP_BASE*)(new COMP_MUL$M_I$M())});
     decodeStorage.insert({"IMUL$M_I$M", (MOP_BASE*)(new COMP_MUL$M_I$M())});
     decodeStorage.insert({"MULX$M_I$M", (MOP_BASE*)(new COMP_MUL$M_I$M())});
     decodeStorage.insert({"V64_INT_MUL$M_I$M", (MOP_BASE*)(new COMP_MUL$M_I$M())});
     decodeStorage.insert({"MUL$M_M$R_R", (MOP_BASE*)(new COMP_MUL$M_M$R_R())});
     decodeStorage.insert({"IMUL$M_M$R_R", (MOP_BASE*)(new COMP_MUL$M_M$R_R())});
     decodeStorage.insert({"MULX$M_M$R_R", (MOP_BASE*)(new COMP_MUL$M_M$R_R())});
     decodeStorage.insert({"V64_INT_MUL$M_M$R_R", (MOP_BASE*)(new COMP_MUL$M_M$R_R())});
     decodeStorage.insert({"MUL$M_M$R_M", (MOP_BASE*)(new COMP_MUL$M_M$R_M())});
     decodeStorage.insert({"IMUL$M_M$R_M", (MOP_BASE*)(new COMP_MUL$M_M$R_M())});
     decodeStorage.insert({"MULX$M_M$R_M", (MOP_BASE*)(new COMP_MUL$M_M$R_M())});
     decodeStorage.insert({"V64_INT_MUL$M_M$R_M", (MOP_BASE*)(new COMP_MUL$M_M$R_M())});
     decodeStorage.insert({"MUL$M_M$R", (MOP_BASE*)(new COMP_MUL$M_M$R())});
     decodeStorage.insert({"IMUL$M_M$R", (MOP_BASE*)(new COMP_MUL$M_M$R())});
     decodeStorage.insert({"MULX$M_M$R", (MOP_BASE*)(new COMP_MUL$M_M$R())});
     decodeStorage.insert({"V64_INT_MUL$M_M$R", (MOP_BASE*)(new COMP_MUL$M_M$R())});
     decodeStorage.insert({"MUL$M_M$M_R", (MOP_BASE*)(new COMP_MUL$M_M$M_R())});
     decodeStorage.insert({"IMUL$M_M$M_R", (MOP_BASE*)(new COMP_MUL$M_M$M_R())});
     decodeStorage.insert({"MULX$M_M$M_R", (MOP_BASE*)(new COMP_MUL$M_M$M_R())});
     decodeStorage.insert({"V64_INT_MUL$M_M$M_R", (MOP_BASE*)(new COMP_MUL$M_M$M_R())});
     decodeStorage.insert({"MUL$M_M$M_M", (MOP_BASE*)(new COMP_MUL$M_M$M_M())});
     decodeStorage.insert({"IMUL$M_M$M_M", (MOP_BASE*)(new COMP_MUL$M_M$M_M())});
     decodeStorage.insert({"MULX$M_M$M_M", (MOP_BASE*)(new COMP_MUL$M_M$M_M())});
     decodeStorage.insert({"V64_INT_MUL$M_M$M_M", (MOP_BASE*)(new COMP_MUL$M_M$M_M())});
     decodeStorage.insert({"MUL$M_M$M", (MOP_BASE*)(new COMP_MUL$M_M$M())});
     decodeStorage.insert({"IMUL$M_M$M", (MOP_BASE*)(new COMP_MUL$M_M$M())});
     decodeStorage.insert({"MULX$M_M$M", (MOP_BASE*)(new COMP_MUL$M_M$M())});
     decodeStorage.insert({"V64_INT_MUL$M_M$M", (MOP_BASE*)(new COMP_MUL$M_M$M())});
     decodeStorage.insert({"DIV$R_R$R_R", (MOP_BASE*)(new COMP_DIV$R_R$R_R())});
     decodeStorage.insert({"IDIV$R_R$R_R", (MOP_BASE*)(new COMP_DIV$R_R$R_R())});
     decodeStorage.insert({"V64_DIV$R_R$R_R", (MOP_BASE*)(new COMP_DIV$R_R$R_R())});
     decodeStorage.insert({"V64_INT_DIV$R_R$R_R", (MOP_BASE*)(new COMP_DIV$R_R$R_R())});
     decodeStorage.insert({"DIV$R_R$R_M", (MOP_BASE*)(new COMP_DIV$R_R$R_M())});
     decodeStorage.insert({"IDIV$R_R$R_M", (MOP_BASE*)(new COMP_DIV$R_R$R_M())});
     decodeStorage.insert({"V64_DIV$R_R$R_M", (MOP_BASE*)(new COMP_DIV$R_R$R_M())});
     decodeStorage.insert({"V64_INT_DIV$R_R$R_M", (MOP_BASE*)(new COMP_DIV$R_R$R_M())});
     decodeStorage.insert({"DIV$R_R$R", (MOP_BASE*)(new COMP_DIV$R_R$R())});
     decodeStorage.insert({"IDIV$R_R$R", (MOP_BASE*)(new COMP_DIV$R_R$R())});
     decodeStorage.insert({"V64_DIV$R_R$R", (MOP_BASE*)(new COMP_DIV$R_R$R())});
     decodeStorage.insert({"V64_INT_DIV$R_R$R", (MOP_BASE*)(new COMP_DIV$R_R$R())});
     decodeStorage.insert({"DIV$R_R$M_R", (MOP_BASE*)(new COMP_DIV$R_R$M_R())});
     decodeStorage.insert({"IDIV$R_R$M_R", (MOP_BASE*)(new COMP_DIV$R_R$M_R())});
     decodeStorage.insert({"V64_DIV$R_R$M_R", (MOP_BASE*)(new COMP_DIV$R_R$M_R())});
     decodeStorage.insert({"V64_INT_DIV$R_R$M_R", (MOP_BASE*)(new COMP_DIV$R_R$M_R())});
     decodeStorage.insert({"DIV$R_R$M_M", (MOP_BASE*)(new COMP_DIV$R_R$M_M())});
     decodeStorage.insert({"IDIV$R_R$M_M", (MOP_BASE*)(new COMP_DIV$R_R$M_M())});
     decodeStorage.insert({"V64_DIV$R_R$M_M", (MOP_BASE*)(new COMP_DIV$R_R$M_M())});
     decodeStorage.insert({"V64_INT_DIV$R_R$M_M", (MOP_BASE*)(new COMP_DIV$R_R$M_M())});
     decodeStorage.insert({"DIV$R_R$M", (MOP_BASE*)(new COMP_DIV$R_R$M())});
     decodeStorage.insert({"IDIV$R_R$M", (MOP_BASE*)(new COMP_DIV$R_R$M())});
     decodeStorage.insert({"V64_DIV$R_R$M", (MOP_BASE*)(new COMP_DIV$R_R$M())});
     decodeStorage.insert({"V64_INT_DIV$R_R$M", (MOP_BASE*)(new COMP_DIV$R_R$M())});
     decodeStorage.insert({"DIV$R_I$R_R", (MOP_BASE*)(new COMP_DIV$R_I$R_R())});
     decodeStorage.insert({"IDIV$R_I$R_R", (MOP_BASE*)(new COMP_DIV$R_I$R_R())});
     decodeStorage.insert({"V64_DIV$R_I$R_R", (MOP_BASE*)(new COMP_DIV$R_I$R_R())});
     decodeStorage.insert({"V64_INT_DIV$R_I$R_R", (MOP_BASE*)(new COMP_DIV$R_I$R_R())});
     decodeStorage.insert({"DIV$R_I$R_M", (MOP_BASE*)(new COMP_DIV$R_I$R_M())});
     decodeStorage.insert({"IDIV$R_I$R_M", (MOP_BASE*)(new COMP_DIV$R_I$R_M())});
     decodeStorage.insert({"V64_DIV$R_I$R_M", (MOP_BASE*)(new COMP_DIV$R_I$R_M())});
     decodeStorage.insert({"V64_INT_DIV$R_I$R_M", (MOP_BASE*)(new COMP_DIV$R_I$R_M())});
     decodeStorage.insert({"DIV$R_I$R", (MOP_BASE*)(new COMP_DIV$R_I$R())});
     decodeStorage.insert({"IDIV$R_I$R", (MOP_BASE*)(new COMP_DIV$R_I$R())});
     decodeStorage.insert({"V64_DIV$R_I$R", (MOP_BASE*)(new COMP_DIV$R_I$R())});
     decodeStorage.insert({"V64_INT_DIV$R_I$R", (MOP_BASE*)(new COMP_DIV$R_I$R())});
     decodeStorage.insert({"DIV$R_I$M_R", (MOP_BASE*)(new COMP_DIV$R_I$M_R())});
     decodeStorage.insert({"IDIV$R_I$M_R", (MOP_BASE*)(new COMP_DIV$R_I$M_R())});
     decodeStorage.insert({"V64_DIV$R_I$M_R", (MOP_BASE*)(new COMP_DIV$R_I$M_R())});
     decodeStorage.insert({"V64_INT_DIV$R_I$M_R", (MOP_BASE*)(new COMP_DIV$R_I$M_R())});
     decodeStorage.insert({"DIV$R_I$M_M", (MOP_BASE*)(new COMP_DIV$R_I$M_M())});
     decodeStorage.insert({"IDIV$R_I$M_M", (MOP_BASE*)(new COMP_DIV$R_I$M_M())});
     decodeStorage.insert({"V64_DIV$R_I$M_M", (MOP_BASE*)(new COMP_DIV$R_I$M_M())});
     decodeStorage.insert({"V64_INT_DIV$R_I$M_M", (MOP_BASE*)(new COMP_DIV$R_I$M_M())});
     decodeStorage.insert({"DIV$R_I$M", (MOP_BASE*)(new COMP_DIV$R_I$M())});
     decodeStorage.insert({"IDIV$R_I$M", (MOP_BASE*)(new COMP_DIV$R_I$M())});
     decodeStorage.insert({"V64_DIV$R_I$M", (MOP_BASE*)(new COMP_DIV$R_I$M())});
     decodeStorage.insert({"V64_INT_DIV$R_I$M", (MOP_BASE*)(new COMP_DIV$R_I$M())});
     decodeStorage.insert({"DIV$R_M$R_R", (MOP_BASE*)(new COMP_DIV$R_M$R_R())});
     decodeStorage.insert({"IDIV$R_M$R_R", (MOP_BASE*)(new COMP_DIV$R_M$R_R())});
     decodeStorage.insert({"V64_DIV$R_M$R_R", (MOP_BASE*)(new COMP_DIV$R_M$R_R())});
     decodeStorage.insert({"V64_INT_DIV$R_M$R_R", (MOP_BASE*)(new COMP_DIV$R_M$R_R())});
     decodeStorage.insert({"DIV$R_M$R_M", (MOP_BASE*)(new COMP_DIV$R_M$R_M())});
     decodeStorage.insert({"IDIV$R_M$R_M", (MOP_BASE*)(new COMP_DIV$R_M$R_M())});
     decodeStorage.insert({"V64_DIV$R_M$R_M", (MOP_BASE*)(new COMP_DIV$R_M$R_M())});
     decodeStorage.insert({"V64_INT_DIV$R_M$R_M", (MOP_BASE*)(new COMP_DIV$R_M$R_M())});
     decodeStorage.insert({"DIV$R_M$R", (MOP_BASE*)(new COMP_DIV$R_M$R())});
     decodeStorage.insert({"IDIV$R_M$R", (MOP_BASE*)(new COMP_DIV$R_M$R())});
     decodeStorage.insert({"V64_DIV$R_M$R", (MOP_BASE*)(new COMP_DIV$R_M$R())});
     decodeStorage.insert({"V64_INT_DIV$R_M$R", (MOP_BASE*)(new COMP_DIV$R_M$R())});
     decodeStorage.insert({"DIV$R_M$M_R", (MOP_BASE*)(new COMP_DIV$R_M$M_R())});
     decodeStorage.insert({"IDIV$R_M$M_R", (MOP_BASE*)(new COMP_DIV$R_M$M_R())});
     decodeStorage.insert({"V64_DIV$R_M$M_R", (MOP_BASE*)(new COMP_DIV$R_M$M_R())});
     decodeStorage.insert({"V64_INT_DIV$R_M$M_R", (MOP_BASE*)(new COMP_DIV$R_M$M_R())});
     decodeStorage.insert({"DIV$R_M$M_M", (MOP_BASE*)(new COMP_DIV$R_M$M_M())});
     decodeStorage.insert({"IDIV$R_M$M_M", (MOP_BASE*)(new COMP_DIV$R_M$M_M())});
     decodeStorage.insert({"V64_DIV$R_M$M_M", (MOP_BASE*)(new COMP_DIV$R_M$M_M())});
     decodeStorage.insert({"V64_INT_DIV$R_M$M_M", (MOP_BASE*)(new COMP_DIV$R_M$M_M())});
     decodeStorage.insert({"DIV$R_M$M", (MOP_BASE*)(new COMP_DIV$R_M$M())});
     decodeStorage.insert({"IDIV$R_M$M", (MOP_BASE*)(new COMP_DIV$R_M$M())});
     decodeStorage.insert({"V64_DIV$R_M$M", (MOP_BASE*)(new COMP_DIV$R_M$M())});
     decodeStorage.insert({"V64_INT_DIV$R_M$M", (MOP_BASE*)(new COMP_DIV$R_M$M())});
     decodeStorage.insert({"DIV$I_R$R_R", (MOP_BASE*)(new COMP_DIV$I_R$R_R())});
     decodeStorage.insert({"IDIV$I_R$R_R", (MOP_BASE*)(new COMP_DIV$I_R$R_R())});
     decodeStorage.insert({"V64_DIV$I_R$R_R", (MOP_BASE*)(new COMP_DIV$I_R$R_R())});
     decodeStorage.insert({"V64_INT_DIV$I_R$R_R", (MOP_BASE*)(new COMP_DIV$I_R$R_R())});
     decodeStorage.insert({"DIV$I_R$R_M", (MOP_BASE*)(new COMP_DIV$I_R$R_M())});
     decodeStorage.insert({"IDIV$I_R$R_M", (MOP_BASE*)(new COMP_DIV$I_R$R_M())});
     decodeStorage.insert({"V64_DIV$I_R$R_M", (MOP_BASE*)(new COMP_DIV$I_R$R_M())});
     decodeStorage.insert({"V64_INT_DIV$I_R$R_M", (MOP_BASE*)(new COMP_DIV$I_R$R_M())});
     decodeStorage.insert({"DIV$I_R$R", (MOP_BASE*)(new COMP_DIV$I_R$R())});
     decodeStorage.insert({"IDIV$I_R$R", (MOP_BASE*)(new COMP_DIV$I_R$R())});
     decodeStorage.insert({"V64_DIV$I_R$R", (MOP_BASE*)(new COMP_DIV$I_R$R())});
     decodeStorage.insert({"V64_INT_DIV$I_R$R", (MOP_BASE*)(new COMP_DIV$I_R$R())});
     decodeStorage.insert({"DIV$I_R$M_R", (MOP_BASE*)(new COMP_DIV$I_R$M_R())});
     decodeStorage.insert({"IDIV$I_R$M_R", (MOP_BASE*)(new COMP_DIV$I_R$M_R())});
     decodeStorage.insert({"V64_DIV$I_R$M_R", (MOP_BASE*)(new COMP_DIV$I_R$M_R())});
     decodeStorage.insert({"V64_INT_DIV$I_R$M_R", (MOP_BASE*)(new COMP_DIV$I_R$M_R())});
     decodeStorage.insert({"DIV$I_R$M_M", (MOP_BASE*)(new COMP_DIV$I_R$M_M())});
     decodeStorage.insert({"IDIV$I_R$M_M", (MOP_BASE*)(new COMP_DIV$I_R$M_M())});
     decodeStorage.insert({"V64_DIV$I_R$M_M", (MOP_BASE*)(new COMP_DIV$I_R$M_M())});
     decodeStorage.insert({"V64_INT_DIV$I_R$M_M", (MOP_BASE*)(new COMP_DIV$I_R$M_M())});
     decodeStorage.insert({"DIV$I_R$M", (MOP_BASE*)(new COMP_DIV$I_R$M())});
     decodeStorage.insert({"IDIV$I_R$M", (MOP_BASE*)(new COMP_DIV$I_R$M())});
     decodeStorage.insert({"V64_DIV$I_R$M", (MOP_BASE*)(new COMP_DIV$I_R$M())});
     decodeStorage.insert({"V64_INT_DIV$I_R$M", (MOP_BASE*)(new COMP_DIV$I_R$M())});
     decodeStorage.insert({"DIV$I_I$R_R", (MOP_BASE*)(new COMP_DIV$I_I$R_R())});
     decodeStorage.insert({"IDIV$I_I$R_R", (MOP_BASE*)(new COMP_DIV$I_I$R_R())});
     decodeStorage.insert({"V64_DIV$I_I$R_R", (MOP_BASE*)(new COMP_DIV$I_I$R_R())});
     decodeStorage.insert({"V64_INT_DIV$I_I$R_R", (MOP_BASE*)(new COMP_DIV$I_I$R_R())});
     decodeStorage.insert({"DIV$I_I$R_M", (MOP_BASE*)(new COMP_DIV$I_I$R_M())});
     decodeStorage.insert({"IDIV$I_I$R_M", (MOP_BASE*)(new COMP_DIV$I_I$R_M())});
     decodeStorage.insert({"V64_DIV$I_I$R_M", (MOP_BASE*)(new COMP_DIV$I_I$R_M())});
     decodeStorage.insert({"V64_INT_DIV$I_I$R_M", (MOP_BASE*)(new COMP_DIV$I_I$R_M())});
     decodeStorage.insert({"DIV$I_I$R", (MOP_BASE*)(new COMP_DIV$I_I$R())});
     decodeStorage.insert({"IDIV$I_I$R", (MOP_BASE*)(new COMP_DIV$I_I$R())});
     decodeStorage.insert({"V64_DIV$I_I$R", (MOP_BASE*)(new COMP_DIV$I_I$R())});
     decodeStorage.insert({"V64_INT_DIV$I_I$R", (MOP_BASE*)(new COMP_DIV$I_I$R())});
     decodeStorage.insert({"DIV$I_I$M_R", (MOP_BASE*)(new COMP_DIV$I_I$M_R())});
     decodeStorage.insert({"IDIV$I_I$M_R", (MOP_BASE*)(new COMP_DIV$I_I$M_R())});
     decodeStorage.insert({"V64_DIV$I_I$M_R", (MOP_BASE*)(new COMP_DIV$I_I$M_R())});
     decodeStorage.insert({"V64_INT_DIV$I_I$M_R", (MOP_BASE*)(new COMP_DIV$I_I$M_R())});
     decodeStorage.insert({"DIV$I_I$M_M", (MOP_BASE*)(new COMP_DIV$I_I$M_M())});
     decodeStorage.insert({"IDIV$I_I$M_M", (MOP_BASE*)(new COMP_DIV$I_I$M_M())});
     decodeStorage.insert({"V64_DIV$I_I$M_M", (MOP_BASE*)(new COMP_DIV$I_I$M_M())});
     decodeStorage.insert({"V64_INT_DIV$I_I$M_M", (MOP_BASE*)(new COMP_DIV$I_I$M_M())});
     decodeStorage.insert({"DIV$I_I$M", (MOP_BASE*)(new COMP_DIV$I_I$M())});
     decodeStorage.insert({"IDIV$I_I$M", (MOP_BASE*)(new COMP_DIV$I_I$M())});
     decodeStorage.insert({"V64_DIV$I_I$M", (MOP_BASE*)(new COMP_DIV$I_I$M())});
     decodeStorage.insert({"V64_INT_DIV$I_I$M", (MOP_BASE*)(new COMP_DIV$I_I$M())});
     decodeStorage.insert({"DIV$I_M$R_R", (MOP_BASE*)(new COMP_DIV$I_M$R_R())});
     decodeStorage.insert({"IDIV$I_M$R_R", (MOP_BASE*)(new COMP_DIV$I_M$R_R())});
     decodeStorage.insert({"V64_DIV$I_M$R_R", (MOP_BASE*)(new COMP_DIV$I_M$R_R())});
     decodeStorage.insert({"V64_INT_DIV$I_M$R_R", (MOP_BASE*)(new COMP_DIV$I_M$R_R())});
     decodeStorage.insert({"DIV$I_M$R_M", (MOP_BASE*)(new COMP_DIV$I_M$R_M())});
     decodeStorage.insert({"IDIV$I_M$R_M", (MOP_BASE*)(new COMP_DIV$I_M$R_M())});
     decodeStorage.insert({"V64_DIV$I_M$R_M", (MOP_BASE*)(new COMP_DIV$I_M$R_M())});
     decodeStorage.insert({"V64_INT_DIV$I_M$R_M", (MOP_BASE*)(new COMP_DIV$I_M$R_M())});
     decodeStorage.insert({"DIV$I_M$R", (MOP_BASE*)(new COMP_DIV$I_M$R())});
     decodeStorage.insert({"IDIV$I_M$R", (MOP_BASE*)(new COMP_DIV$I_M$R())});
     decodeStorage.insert({"V64_DIV$I_M$R", (MOP_BASE*)(new COMP_DIV$I_M$R())});
     decodeStorage.insert({"V64_INT_DIV$I_M$R", (MOP_BASE*)(new COMP_DIV$I_M$R())});
     decodeStorage.insert({"DIV$I_M$M_R", (MOP_BASE*)(new COMP_DIV$I_M$M_R())});
     decodeStorage.insert({"IDIV$I_M$M_R", (MOP_BASE*)(new COMP_DIV$I_M$M_R())});
     decodeStorage.insert({"V64_DIV$I_M$M_R", (MOP_BASE*)(new COMP_DIV$I_M$M_R())});
     decodeStorage.insert({"V64_INT_DIV$I_M$M_R", (MOP_BASE*)(new COMP_DIV$I_M$M_R())});
     decodeStorage.insert({"DIV$I_M$M_M", (MOP_BASE*)(new COMP_DIV$I_M$M_M())});
     decodeStorage.insert({"IDIV$I_M$M_M", (MOP_BASE*)(new COMP_DIV$I_M$M_M())});
     decodeStorage.insert({"V64_DIV$I_M$M_M", (MOP_BASE*)(new COMP_DIV$I_M$M_M())});
     decodeStorage.insert({"V64_INT_DIV$I_M$M_M", (MOP_BASE*)(new COMP_DIV$I_M$M_M())});
     decodeStorage.insert({"DIV$I_M$M", (MOP_BASE*)(new COMP_DIV$I_M$M())});
     decodeStorage.insert({"IDIV$I_M$M", (MOP_BASE*)(new COMP_DIV$I_M$M())});
     decodeStorage.insert({"V64_DIV$I_M$M", (MOP_BASE*)(new COMP_DIV$I_M$M())});
     decodeStorage.insert({"V64_INT_DIV$I_M$M", (MOP_BASE*)(new COMP_DIV$I_M$M())});
     decodeStorage.insert({"DIV$M_R$R_R", (MOP_BASE*)(new COMP_DIV$M_R$R_R())});
     decodeStorage.insert({"IDIV$M_R$R_R", (MOP_BASE*)(new COMP_DIV$M_R$R_R())});
     decodeStorage.insert({"V64_DIV$M_R$R_R", (MOP_BASE*)(new COMP_DIV$M_R$R_R())});
     decodeStorage.insert({"V64_INT_DIV$M_R$R_R", (MOP_BASE*)(new COMP_DIV$M_R$R_R())});
     decodeStorage.insert({"DIV$M_R$R_M", (MOP_BASE*)(new COMP_DIV$M_R$R_M())});
     decodeStorage.insert({"IDIV$M_R$R_M", (MOP_BASE*)(new COMP_DIV$M_R$R_M())});
     decodeStorage.insert({"V64_DIV$M_R$R_M", (MOP_BASE*)(new COMP_DIV$M_R$R_M())});
     decodeStorage.insert({"V64_INT_DIV$M_R$R_M", (MOP_BASE*)(new COMP_DIV$M_R$R_M())});
     decodeStorage.insert({"DIV$M_R$R", (MOP_BASE*)(new COMP_DIV$M_R$R())});
     decodeStorage.insert({"IDIV$M_R$R", (MOP_BASE*)(new COMP_DIV$M_R$R())});
     decodeStorage.insert({"V64_DIV$M_R$R", (MOP_BASE*)(new COMP_DIV$M_R$R())});
     decodeStorage.insert({"V64_INT_DIV$M_R$R", (MOP_BASE*)(new COMP_DIV$M_R$R())});
     decodeStorage.insert({"DIV$M_R$M_R", (MOP_BASE*)(new COMP_DIV$M_R$M_R())});
     decodeStorage.insert({"IDIV$M_R$M_R", (MOP_BASE*)(new COMP_DIV$M_R$M_R())});
     decodeStorage.insert({"V64_DIV$M_R$M_R", (MOP_BASE*)(new COMP_DIV$M_R$M_R())});
     decodeStorage.insert({"V64_INT_DIV$M_R$M_R", (MOP_BASE*)(new COMP_DIV$M_R$M_R())});
     decodeStorage.insert({"DIV$M_R$M_M", (MOP_BASE*)(new COMP_DIV$M_R$M_M())});
     decodeStorage.insert({"IDIV$M_R$M_M", (MOP_BASE*)(new COMP_DIV$M_R$M_M())});
     decodeStorage.insert({"V64_DIV$M_R$M_M", (MOP_BASE*)(new COMP_DIV$M_R$M_M())});
     decodeStorage.insert({"V64_INT_DIV$M_R$M_M", (MOP_BASE*)(new COMP_DIV$M_R$M_M())});
     decodeStorage.insert({"DIV$M_R$M", (MOP_BASE*)(new COMP_DIV$M_R$M())});
     decodeStorage.insert({"IDIV$M_R$M", (MOP_BASE*)(new COMP_DIV$M_R$M())});
     decodeStorage.insert({"V64_DIV$M_R$M", (MOP_BASE*)(new COMP_DIV$M_R$M())});
     decodeStorage.insert({"V64_INT_DIV$M_R$M", (MOP_BASE*)(new COMP_DIV$M_R$M())});
     decodeStorage.insert({"DIV$M_I$R_R", (MOP_BASE*)(new COMP_DIV$M_I$R_R())});
     decodeStorage.insert({"IDIV$M_I$R_R", (MOP_BASE*)(new COMP_DIV$M_I$R_R())});
     decodeStorage.insert({"V64_DIV$M_I$R_R", (MOP_BASE*)(new COMP_DIV$M_I$R_R())});
     decodeStorage.insert({"V64_INT_DIV$M_I$R_R", (MOP_BASE*)(new COMP_DIV$M_I$R_R())});
     decodeStorage.insert({"DIV$M_I$R_M", (MOP_BASE*)(new COMP_DIV$M_I$R_M())});
     decodeStorage.insert({"IDIV$M_I$R_M", (MOP_BASE*)(new COMP_DIV$M_I$R_M())});
     decodeStorage.insert({"V64_DIV$M_I$R_M", (MOP_BASE*)(new COMP_DIV$M_I$R_M())});
     decodeStorage.insert({"V64_INT_DIV$M_I$R_M", (MOP_BASE*)(new COMP_DIV$M_I$R_M())});
     decodeStorage.insert({"DIV$M_I$R", (MOP_BASE*)(new COMP_DIV$M_I$R())});
     decodeStorage.insert({"IDIV$M_I$R", (MOP_BASE*)(new COMP_DIV$M_I$R())});
     decodeStorage.insert({"V64_DIV$M_I$R", (MOP_BASE*)(new COMP_DIV$M_I$R())});
     decodeStorage.insert({"V64_INT_DIV$M_I$R", (MOP_BASE*)(new COMP_DIV$M_I$R())});
     decodeStorage.insert({"DIV$M_I$M_R", (MOP_BASE*)(new COMP_DIV$M_I$M_R())});
     decodeStorage.insert({"IDIV$M_I$M_R", (MOP_BASE*)(new COMP_DIV$M_I$M_R())});
     decodeStorage.insert({"V64_DIV$M_I$M_R", (MOP_BASE*)(new COMP_DIV$M_I$M_R())});
     decodeStorage.insert({"V64_INT_DIV$M_I$M_R", (MOP_BASE*)(new COMP_DIV$M_I$M_R())});
     decodeStorage.insert({"DIV$M_I$M_M", (MOP_BASE*)(new COMP_DIV$M_I$M_M())});
     decodeStorage.insert({"IDIV$M_I$M_M", (MOP_BASE*)(new COMP_DIV$M_I$M_M())});
     decodeStorage.insert({"V64_DIV$M_I$M_M", (MOP_BASE*)(new COMP_DIV$M_I$M_M())});
     decodeStorage.insert({"V64_INT_DIV$M_I$M_M", (MOP_BASE*)(new COMP_DIV$M_I$M_M())});
     decodeStorage.insert({"DIV$M_I$M", (MOP_BASE*)(new COMP_DIV$M_I$M())});
     decodeStorage.insert({"IDIV$M_I$M", (MOP_BASE*)(new COMP_DIV$M_I$M())});
     decodeStorage.insert({"V64_DIV$M_I$M", (MOP_BASE*)(new COMP_DIV$M_I$M())});
     decodeStorage.insert({"V64_INT_DIV$M_I$M", (MOP_BASE*)(new COMP_DIV$M_I$M())});
     decodeStorage.insert({"DIV$M_M$R_R", (MOP_BASE*)(new COMP_DIV$M_M$R_R())});
     decodeStorage.insert({"IDIV$M_M$R_R", (MOP_BASE*)(new COMP_DIV$M_M$R_R())});
     decodeStorage.insert({"V64_DIV$M_M$R_R", (MOP_BASE*)(new COMP_DIV$M_M$R_R())});
     decodeStorage.insert({"V64_INT_DIV$M_M$R_R", (MOP_BASE*)(new COMP_DIV$M_M$R_R())});
     decodeStorage.insert({"DIV$M_M$R_M", (MOP_BASE*)(new COMP_DIV$M_M$R_M())});
     decodeStorage.insert({"IDIV$M_M$R_M", (MOP_BASE*)(new COMP_DIV$M_M$R_M())});
     decodeStorage.insert({"V64_DIV$M_M$R_M", (MOP_BASE*)(new COMP_DIV$M_M$R_M())});
     decodeStorage.insert({"V64_INT_DIV$M_M$R_M", (MOP_BASE*)(new COMP_DIV$M_M$R_M())});
     decodeStorage.insert({"DIV$M_M$R", (MOP_BASE*)(new COMP_DIV$M_M$R())});
     decodeStorage.insert({"IDIV$M_M$R", (MOP_BASE*)(new COMP_DIV$M_M$R())});
     decodeStorage.insert({"V64_DIV$M_M$R", (MOP_BASE*)(new COMP_DIV$M_M$R())});
     decodeStorage.insert({"V64_INT_DIV$M_M$R", (MOP_BASE*)(new COMP_DIV$M_M$R())});
     decodeStorage.insert({"DIV$M_M$M_R", (MOP_BASE*)(new COMP_DIV$M_M$M_R())});
     decodeStorage.insert({"IDIV$M_M$M_R", (MOP_BASE*)(new COMP_DIV$M_M$M_R())});
     decodeStorage.insert({"V64_DIV$M_M$M_R", (MOP_BASE*)(new COMP_DIV$M_M$M_R())});
     decodeStorage.insert({"V64_INT_DIV$M_M$M_R", (MOP_BASE*)(new COMP_DIV$M_M$M_R())});
     decodeStorage.insert({"DIV$M_M$M_M", (MOP_BASE*)(new COMP_DIV$M_M$M_M())});
     decodeStorage.insert({"IDIV$M_M$M_M", (MOP_BASE*)(new COMP_DIV$M_M$M_M())});
     decodeStorage.insert({"V64_DIV$M_M$M_M", (MOP_BASE*)(new COMP_DIV$M_M$M_M())});
     decodeStorage.insert({"V64_INT_DIV$M_M$M_M", (MOP_BASE*)(new COMP_DIV$M_M$M_M())});
     decodeStorage.insert({"DIV$M_M$M", (MOP_BASE*)(new COMP_DIV$M_M$M())});
     decodeStorage.insert({"IDIV$M_M$M", (MOP_BASE*)(new COMP_DIV$M_M$M())});
     decodeStorage.insert({"V64_DIV$M_M$M", (MOP_BASE*)(new COMP_DIV$M_M$M())});
     decodeStorage.insert({"V64_INT_DIV$M_M$M", (MOP_BASE*)(new COMP_DIV$M_M$M())});
     decodeStorage.insert({"FADD$R_R$R_R", (MOP_BASE*)(new COMP_FLT$R_R$R_R())});
     decodeStorage.insert({"FSUB$R_R$R_R", (MOP_BASE*)(new COMP_FLT$R_R$R_R())});
     decodeStorage.insert({"FSUBR$R_R$R_R", (MOP_BASE*)(new COMP_FLT$R_R$R_R())});
     decodeStorage.insert({"FADDP$R_R$R_R", (MOP_BASE*)(new COMP_FLT$R_R$R_R())});
     decodeStorage.insert({"FSUBP$R_R$R_R", (MOP_BASE*)(new COMP_FLT$R_R$R_R())});
     decodeStorage.insert({"FSUBRP$R_R$R_R", (MOP_BASE*)(new COMP_FLT$R_R$R_R())});
     decodeStorage.insert({"FIADD$R_R$R_R", (MOP_BASE*)(new COMP_FLT$R_R$R_R())});
     decodeStorage.insert({"FISUB$R_R$R_R", (MOP_BASE*)(new COMP_FLT$R_R$R_R())});
     decodeStorage.insert({"FISUBR$R_R$R_R", (MOP_BASE*)(new COMP_FLT$R_R$R_R())});
     decodeStorage.insert({"V64_FLT_ALU$R_R$R_R", (MOP_BASE*)(new COMP_FLT$R_R$R_R())});
     decodeStorage.insert({"FADD$R_R$R_M", (MOP_BASE*)(new COMP_FLT$R_R$R_M())});
     decodeStorage.insert({"FSUB$R_R$R_M", (MOP_BASE*)(new COMP_FLT$R_R$R_M())});
     decodeStorage.insert({"FSUBR$R_R$R_M", (MOP_BASE*)(new COMP_FLT$R_R$R_M())});
     decodeStorage.insert({"FADDP$R_R$R_M", (MOP_BASE*)(new COMP_FLT$R_R$R_M())});
     decodeStorage.insert({"FSUBP$R_R$R_M", (MOP_BASE*)(new COMP_FLT$R_R$R_M())});
     decodeStorage.insert({"FSUBRP$R_R$R_M", (MOP_BASE*)(new COMP_FLT$R_R$R_M())});
     decodeStorage.insert({"FIADD$R_R$R_M", (MOP_BASE*)(new COMP_FLT$R_R$R_M())});
     decodeStorage.insert({"FISUB$R_R$R_M", (MOP_BASE*)(new COMP_FLT$R_R$R_M())});
     decodeStorage.insert({"FISUBR$R_R$R_M", (MOP_BASE*)(new COMP_FLT$R_R$R_M())});
     decodeStorage.insert({"V64_FLT_ALU$R_R$R_M", (MOP_BASE*)(new COMP_FLT$R_R$R_M())});
     decodeStorage.insert({"FADD$R_R$R", (MOP_BASE*)(new COMP_FLT$R_R$R())});
     decodeStorage.insert({"FSUB$R_R$R", (MOP_BASE*)(new COMP_FLT$R_R$R())});
     decodeStorage.insert({"FSUBR$R_R$R", (MOP_BASE*)(new COMP_FLT$R_R$R())});
     decodeStorage.insert({"FADDP$R_R$R", (MOP_BASE*)(new COMP_FLT$R_R$R())});
     decodeStorage.insert({"FSUBP$R_R$R", (MOP_BASE*)(new COMP_FLT$R_R$R())});
     decodeStorage.insert({"FSUBRP$R_R$R", (MOP_BASE*)(new COMP_FLT$R_R$R())});
     decodeStorage.insert({"FIADD$R_R$R", (MOP_BASE*)(new COMP_FLT$R_R$R())});
     decodeStorage.insert({"FISUB$R_R$R", (MOP_BASE*)(new COMP_FLT$R_R$R())});
     decodeStorage.insert({"FISUBR$R_R$R", (MOP_BASE*)(new COMP_FLT$R_R$R())});
     decodeStorage.insert({"V64_FLT_ALU$R_R$R", (MOP_BASE*)(new COMP_FLT$R_R$R())});
     decodeStorage.insert({"FADD$R_R$M_R", (MOP_BASE*)(new COMP_FLT$R_R$M_R())});
     decodeStorage.insert({"FSUB$R_R$M_R", (MOP_BASE*)(new COMP_FLT$R_R$M_R())});
     decodeStorage.insert({"FSUBR$R_R$M_R", (MOP_BASE*)(new COMP_FLT$R_R$M_R())});
     decodeStorage.insert({"FADDP$R_R$M_R", (MOP_BASE*)(new COMP_FLT$R_R$M_R())});
     decodeStorage.insert({"FSUBP$R_R$M_R", (MOP_BASE*)(new COMP_FLT$R_R$M_R())});
     decodeStorage.insert({"FSUBRP$R_R$M_R", (MOP_BASE*)(new COMP_FLT$R_R$M_R())});
     decodeStorage.insert({"FIADD$R_R$M_R", (MOP_BASE*)(new COMP_FLT$R_R$M_R())});
     decodeStorage.insert({"FISUB$R_R$M_R", (MOP_BASE*)(new COMP_FLT$R_R$M_R())});
     decodeStorage.insert({"FISUBR$R_R$M_R", (MOP_BASE*)(new COMP_FLT$R_R$M_R())});
     decodeStorage.insert({"V64_FLT_ALU$R_R$M_R", (MOP_BASE*)(new COMP_FLT$R_R$M_R())});
     decodeStorage.insert({"FADD$R_R$M_M", (MOP_BASE*)(new COMP_FLT$R_R$M_M())});
     decodeStorage.insert({"FSUB$R_R$M_M", (MOP_BASE*)(new COMP_FLT$R_R$M_M())});
     decodeStorage.insert({"FSUBR$R_R$M_M", (MOP_BASE*)(new COMP_FLT$R_R$M_M())});
     decodeStorage.insert({"FADDP$R_R$M_M", (MOP_BASE*)(new COMP_FLT$R_R$M_M())});
     decodeStorage.insert({"FSUBP$R_R$M_M", (MOP_BASE*)(new COMP_FLT$R_R$M_M())});
     decodeStorage.insert({"FSUBRP$R_R$M_M", (MOP_BASE*)(new COMP_FLT$R_R$M_M())});
     decodeStorage.insert({"FIADD$R_R$M_M", (MOP_BASE*)(new COMP_FLT$R_R$M_M())});
     decodeStorage.insert({"FISUB$R_R$M_M", (MOP_BASE*)(new COMP_FLT$R_R$M_M())});
     decodeStorage.insert({"FISUBR$R_R$M_M", (MOP_BASE*)(new COMP_FLT$R_R$M_M())});
     decodeStorage.insert({"V64_FLT_ALU$R_R$M_M", (MOP_BASE*)(new COMP_FLT$R_R$M_M())});
     decodeStorage.insert({"FADD$R_R$M", (MOP_BASE*)(new COMP_FLT$R_R$M())});
     decodeStorage.insert({"FSUB$R_R$M", (MOP_BASE*)(new COMP_FLT$R_R$M())});
     decodeStorage.insert({"FSUBR$R_R$M", (MOP_BASE*)(new COMP_FLT$R_R$M())});
     decodeStorage.insert({"FADDP$R_R$M", (MOP_BASE*)(new COMP_FLT$R_R$M())});
     decodeStorage.insert({"FSUBP$R_R$M", (MOP_BASE*)(new COMP_FLT$R_R$M())});
     decodeStorage.insert({"FSUBRP$R_R$M", (MOP_BASE*)(new COMP_FLT$R_R$M())});
     decodeStorage.insert({"FIADD$R_R$M", (MOP_BASE*)(new COMP_FLT$R_R$M())});
     decodeStorage.insert({"FISUB$R_R$M", (MOP_BASE*)(new COMP_FLT$R_R$M())});
     decodeStorage.insert({"FISUBR$R_R$M", (MOP_BASE*)(new COMP_FLT$R_R$M())});
     decodeStorage.insert({"V64_FLT_ALU$R_R$M", (MOP_BASE*)(new COMP_FLT$R_R$M())});
     decodeStorage.insert({"FADD$R_I$R_R", (MOP_BASE*)(new COMP_FLT$R_I$R_R())});
     decodeStorage.insert({"FSUB$R_I$R_R", (MOP_BASE*)(new COMP_FLT$R_I$R_R())});
     decodeStorage.insert({"FSUBR$R_I$R_R", (MOP_BASE*)(new COMP_FLT$R_I$R_R())});
     decodeStorage.insert({"FADDP$R_I$R_R", (MOP_BASE*)(new COMP_FLT$R_I$R_R())});
     decodeStorage.insert({"FSUBP$R_I$R_R", (MOP_BASE*)(new COMP_FLT$R_I$R_R())});
     decodeStorage.insert({"FSUBRP$R_I$R_R", (MOP_BASE*)(new COMP_FLT$R_I$R_R())});
     decodeStorage.insert({"FIADD$R_I$R_R", (MOP_BASE*)(new COMP_FLT$R_I$R_R())});
     decodeStorage.insert({"FISUB$R_I$R_R", (MOP_BASE*)(new COMP_FLT$R_I$R_R())});
     decodeStorage.insert({"FISUBR$R_I$R_R", (MOP_BASE*)(new COMP_FLT$R_I$R_R())});
     decodeStorage.insert({"V64_FLT_ALU$R_I$R_R", (MOP_BASE*)(new COMP_FLT$R_I$R_R())});
     decodeStorage.insert({"FADD$R_I$R_M", (MOP_BASE*)(new COMP_FLT$R_I$R_M())});
     decodeStorage.insert({"FSUB$R_I$R_M", (MOP_BASE*)(new COMP_FLT$R_I$R_M())});
     decodeStorage.insert({"FSUBR$R_I$R_M", (MOP_BASE*)(new COMP_FLT$R_I$R_M())});
     decodeStorage.insert({"FADDP$R_I$R_M", (MOP_BASE*)(new COMP_FLT$R_I$R_M())});
     decodeStorage.insert({"FSUBP$R_I$R_M", (MOP_BASE*)(new COMP_FLT$R_I$R_M())});
     decodeStorage.insert({"FSUBRP$R_I$R_M", (MOP_BASE*)(new COMP_FLT$R_I$R_M())});
     decodeStorage.insert({"FIADD$R_I$R_M", (MOP_BASE*)(new COMP_FLT$R_I$R_M())});
     decodeStorage.insert({"FISUB$R_I$R_M", (MOP_BASE*)(new COMP_FLT$R_I$R_M())});
     decodeStorage.insert({"FISUBR$R_I$R_M", (MOP_BASE*)(new COMP_FLT$R_I$R_M())});
     decodeStorage.insert({"V64_FLT_ALU$R_I$R_M", (MOP_BASE*)(new COMP_FLT$R_I$R_M())});
     decodeStorage.insert({"FADD$R_I$R", (MOP_BASE*)(new COMP_FLT$R_I$R())});
     decodeStorage.insert({"FSUB$R_I$R", (MOP_BASE*)(new COMP_FLT$R_I$R())});
     decodeStorage.insert({"FSUBR$R_I$R", (MOP_BASE*)(new COMP_FLT$R_I$R())});
     decodeStorage.insert({"FADDP$R_I$R", (MOP_BASE*)(new COMP_FLT$R_I$R())});
     decodeStorage.insert({"FSUBP$R_I$R", (MOP_BASE*)(new COMP_FLT$R_I$R())});
     decodeStorage.insert({"FSUBRP$R_I$R", (MOP_BASE*)(new COMP_FLT$R_I$R())});
     decodeStorage.insert({"FIADD$R_I$R", (MOP_BASE*)(new COMP_FLT$R_I$R())});
     decodeStorage.insert({"FISUB$R_I$R", (MOP_BASE*)(new COMP_FLT$R_I$R())});
     decodeStorage.insert({"FISUBR$R_I$R", (MOP_BASE*)(new COMP_FLT$R_I$R())});
     decodeStorage.insert({"V64_FLT_ALU$R_I$R", (MOP_BASE*)(new COMP_FLT$R_I$R())});
     decodeStorage.insert({"FADD$R_I$M_R", (MOP_BASE*)(new COMP_FLT$R_I$M_R())});
     decodeStorage.insert({"FSUB$R_I$M_R", (MOP_BASE*)(new COMP_FLT$R_I$M_R())});
     decodeStorage.insert({"FSUBR$R_I$M_R", (MOP_BASE*)(new COMP_FLT$R_I$M_R())});
     decodeStorage.insert({"FADDP$R_I$M_R", (MOP_BASE*)(new COMP_FLT$R_I$M_R())});
     decodeStorage.insert({"FSUBP$R_I$M_R", (MOP_BASE*)(new COMP_FLT$R_I$M_R())});
     decodeStorage.insert({"FSUBRP$R_I$M_R", (MOP_BASE*)(new COMP_FLT$R_I$M_R())});
     decodeStorage.insert({"FIADD$R_I$M_R", (MOP_BASE*)(new COMP_FLT$R_I$M_R())});
     decodeStorage.insert({"FISUB$R_I$M_R", (MOP_BASE*)(new COMP_FLT$R_I$M_R())});
     decodeStorage.insert({"FISUBR$R_I$M_R", (MOP_BASE*)(new COMP_FLT$R_I$M_R())});
     decodeStorage.insert({"V64_FLT_ALU$R_I$M_R", (MOP_BASE*)(new COMP_FLT$R_I$M_R())});
     decodeStorage.insert({"FADD$R_I$M_M", (MOP_BASE*)(new COMP_FLT$R_I$M_M())});
     decodeStorage.insert({"FSUB$R_I$M_M", (MOP_BASE*)(new COMP_FLT$R_I$M_M())});
     decodeStorage.insert({"FSUBR$R_I$M_M", (MOP_BASE*)(new COMP_FLT$R_I$M_M())});
     decodeStorage.insert({"FADDP$R_I$M_M", (MOP_BASE*)(new COMP_FLT$R_I$M_M())});
     decodeStorage.insert({"FSUBP$R_I$M_M", (MOP_BASE*)(new COMP_FLT$R_I$M_M())});
     decodeStorage.insert({"FSUBRP$R_I$M_M", (MOP_BASE*)(new COMP_FLT$R_I$M_M())});
     decodeStorage.insert({"FIADD$R_I$M_M", (MOP_BASE*)(new COMP_FLT$R_I$M_M())});
     decodeStorage.insert({"FISUB$R_I$M_M", (MOP_BASE*)(new COMP_FLT$R_I$M_M())});
     decodeStorage.insert({"FISUBR$R_I$M_M", (MOP_BASE*)(new COMP_FLT$R_I$M_M())});
     decodeStorage.insert({"V64_FLT_ALU$R_I$M_M", (MOP_BASE*)(new COMP_FLT$R_I$M_M())});
     decodeStorage.insert({"FADD$R_I$M", (MOP_BASE*)(new COMP_FLT$R_I$M())});
     decodeStorage.insert({"FSUB$R_I$M", (MOP_BASE*)(new COMP_FLT$R_I$M())});
     decodeStorage.insert({"FSUBR$R_I$M", (MOP_BASE*)(new COMP_FLT$R_I$M())});
     decodeStorage.insert({"FADDP$R_I$M", (MOP_BASE*)(new COMP_FLT$R_I$M())});
     decodeStorage.insert({"FSUBP$R_I$M", (MOP_BASE*)(new COMP_FLT$R_I$M())});
     decodeStorage.insert({"FSUBRP$R_I$M", (MOP_BASE*)(new COMP_FLT$R_I$M())});
     decodeStorage.insert({"FIADD$R_I$M", (MOP_BASE*)(new COMP_FLT$R_I$M())});
     decodeStorage.insert({"FISUB$R_I$M", (MOP_BASE*)(new COMP_FLT$R_I$M())});
     decodeStorage.insert({"FISUBR$R_I$M", (MOP_BASE*)(new COMP_FLT$R_I$M())});
     decodeStorage.insert({"V64_FLT_ALU$R_I$M", (MOP_BASE*)(new COMP_FLT$R_I$M())});
     decodeStorage.insert({"FADD$R_M$R_R", (MOP_BASE*)(new COMP_FLT$R_M$R_R())});
     decodeStorage.insert({"FSUB$R_M$R_R", (MOP_BASE*)(new COMP_FLT$R_M$R_R())});
     decodeStorage.insert({"FSUBR$R_M$R_R", (MOP_BASE*)(new COMP_FLT$R_M$R_R())});
     decodeStorage.insert({"FADDP$R_M$R_R", (MOP_BASE*)(new COMP_FLT$R_M$R_R())});
     decodeStorage.insert({"FSUBP$R_M$R_R", (MOP_BASE*)(new COMP_FLT$R_M$R_R())});
     decodeStorage.insert({"FSUBRP$R_M$R_R", (MOP_BASE*)(new COMP_FLT$R_M$R_R())});
     decodeStorage.insert({"FIADD$R_M$R_R", (MOP_BASE*)(new COMP_FLT$R_M$R_R())});
     decodeStorage.insert({"FISUB$R_M$R_R", (MOP_BASE*)(new COMP_FLT$R_M$R_R())});
     decodeStorage.insert({"FISUBR$R_M$R_R", (MOP_BASE*)(new COMP_FLT$R_M$R_R())});
     decodeStorage.insert({"V64_FLT_ALU$R_M$R_R", (MOP_BASE*)(new COMP_FLT$R_M$R_R())});
     decodeStorage.insert({"FADD$R_M$R_M", (MOP_BASE*)(new COMP_FLT$R_M$R_M())});
     decodeStorage.insert({"FSUB$R_M$R_M", (MOP_BASE*)(new COMP_FLT$R_M$R_M())});
     decodeStorage.insert({"FSUBR$R_M$R_M", (MOP_BASE*)(new COMP_FLT$R_M$R_M())});
     decodeStorage.insert({"FADDP$R_M$R_M", (MOP_BASE*)(new COMP_FLT$R_M$R_M())});
     decodeStorage.insert({"FSUBP$R_M$R_M", (MOP_BASE*)(new COMP_FLT$R_M$R_M())});
     decodeStorage.insert({"FSUBRP$R_M$R_M", (MOP_BASE*)(new COMP_FLT$R_M$R_M())});
     decodeStorage.insert({"FIADD$R_M$R_M", (MOP_BASE*)(new COMP_FLT$R_M$R_M())});
     decodeStorage.insert({"FISUB$R_M$R_M", (MOP_BASE*)(new COMP_FLT$R_M$R_M())});
     decodeStorage.insert({"FISUBR$R_M$R_M", (MOP_BASE*)(new COMP_FLT$R_M$R_M())});
     decodeStorage.insert({"V64_FLT_ALU$R_M$R_M", (MOP_BASE*)(new COMP_FLT$R_M$R_M())});
     decodeStorage.insert({"FADD$R_M$R", (MOP_BASE*)(new COMP_FLT$R_M$R())});
     decodeStorage.insert({"FSUB$R_M$R", (MOP_BASE*)(new COMP_FLT$R_M$R())});
     decodeStorage.insert({"FSUBR$R_M$R", (MOP_BASE*)(new COMP_FLT$R_M$R())});
     decodeStorage.insert({"FADDP$R_M$R", (MOP_BASE*)(new COMP_FLT$R_M$R())});
     decodeStorage.insert({"FSUBP$R_M$R", (MOP_BASE*)(new COMP_FLT$R_M$R())});
     decodeStorage.insert({"FSUBRP$R_M$R", (MOP_BASE*)(new COMP_FLT$R_M$R())});
     decodeStorage.insert({"FIADD$R_M$R", (MOP_BASE*)(new COMP_FLT$R_M$R())});
     decodeStorage.insert({"FISUB$R_M$R", (MOP_BASE*)(new COMP_FLT$R_M$R())});
     decodeStorage.insert({"FISUBR$R_M$R", (MOP_BASE*)(new COMP_FLT$R_M$R())});
     decodeStorage.insert({"V64_FLT_ALU$R_M$R", (MOP_BASE*)(new COMP_FLT$R_M$R())});
     decodeStorage.insert({"FADD$R_M$M_R", (MOP_BASE*)(new COMP_FLT$R_M$M_R())});
     decodeStorage.insert({"FSUB$R_M$M_R", (MOP_BASE*)(new COMP_FLT$R_M$M_R())});
     decodeStorage.insert({"FSUBR$R_M$M_R", (MOP_BASE*)(new COMP_FLT$R_M$M_R())});
     decodeStorage.insert({"FADDP$R_M$M_R", (MOP_BASE*)(new COMP_FLT$R_M$M_R())});
     decodeStorage.insert({"FSUBP$R_M$M_R", (MOP_BASE*)(new COMP_FLT$R_M$M_R())});
     decodeStorage.insert({"FSUBRP$R_M$M_R", (MOP_BASE*)(new COMP_FLT$R_M$M_R())});
     decodeStorage.insert({"FIADD$R_M$M_R", (MOP_BASE*)(new COMP_FLT$R_M$M_R())});
     decodeStorage.insert({"FISUB$R_M$M_R", (MOP_BASE*)(new COMP_FLT$R_M$M_R())});
     decodeStorage.insert({"FISUBR$R_M$M_R", (MOP_BASE*)(new COMP_FLT$R_M$M_R())});
     decodeStorage.insert({"V64_FLT_ALU$R_M$M_R", (MOP_BASE*)(new COMP_FLT$R_M$M_R())});
     decodeStorage.insert({"FADD$R_M$M_M", (MOP_BASE*)(new COMP_FLT$R_M$M_M())});
     decodeStorage.insert({"FSUB$R_M$M_M", (MOP_BASE*)(new COMP_FLT$R_M$M_M())});
     decodeStorage.insert({"FSUBR$R_M$M_M", (MOP_BASE*)(new COMP_FLT$R_M$M_M())});
     decodeStorage.insert({"FADDP$R_M$M_M", (MOP_BASE*)(new COMP_FLT$R_M$M_M())});
     decodeStorage.insert({"FSUBP$R_M$M_M", (MOP_BASE*)(new COMP_FLT$R_M$M_M())});
     decodeStorage.insert({"FSUBRP$R_M$M_M", (MOP_BASE*)(new COMP_FLT$R_M$M_M())});
     decodeStorage.insert({"FIADD$R_M$M_M", (MOP_BASE*)(new COMP_FLT$R_M$M_M())});
     decodeStorage.insert({"FISUB$R_M$M_M", (MOP_BASE*)(new COMP_FLT$R_M$M_M())});
     decodeStorage.insert({"FISUBR$R_M$M_M", (MOP_BASE*)(new COMP_FLT$R_M$M_M())});
     decodeStorage.insert({"V64_FLT_ALU$R_M$M_M", (MOP_BASE*)(new COMP_FLT$R_M$M_M())});
     decodeStorage.insert({"FADD$R_M$M", (MOP_BASE*)(new COMP_FLT$R_M$M())});
     decodeStorage.insert({"FSUB$R_M$M", (MOP_BASE*)(new COMP_FLT$R_M$M())});
     decodeStorage.insert({"FSUBR$R_M$M", (MOP_BASE*)(new COMP_FLT$R_M$M())});
     decodeStorage.insert({"FADDP$R_M$M", (MOP_BASE*)(new COMP_FLT$R_M$M())});
     decodeStorage.insert({"FSUBP$R_M$M", (MOP_BASE*)(new COMP_FLT$R_M$M())});
     decodeStorage.insert({"FSUBRP$R_M$M", (MOP_BASE*)(new COMP_FLT$R_M$M())});
     decodeStorage.insert({"FIADD$R_M$M", (MOP_BASE*)(new COMP_FLT$R_M$M())});
     decodeStorage.insert({"FISUB$R_M$M", (MOP_BASE*)(new COMP_FLT$R_M$M())});
     decodeStorage.insert({"FISUBR$R_M$M", (MOP_BASE*)(new COMP_FLT$R_M$M())});
     decodeStorage.insert({"V64_FLT_ALU$R_M$M", (MOP_BASE*)(new COMP_FLT$R_M$M())});
     decodeStorage.insert({"FADD$I_R$R_R", (MOP_BASE*)(new COMP_FLT$I_R$R_R())});
     decodeStorage.insert({"FSUB$I_R$R_R", (MOP_BASE*)(new COMP_FLT$I_R$R_R())});
     decodeStorage.insert({"FSUBR$I_R$R_R", (MOP_BASE*)(new COMP_FLT$I_R$R_R())});
     decodeStorage.insert({"FADDP$I_R$R_R", (MOP_BASE*)(new COMP_FLT$I_R$R_R())});
     decodeStorage.insert({"FSUBP$I_R$R_R", (MOP_BASE*)(new COMP_FLT$I_R$R_R())});
     decodeStorage.insert({"FSUBRP$I_R$R_R", (MOP_BASE*)(new COMP_FLT$I_R$R_R())});
     decodeStorage.insert({"FIADD$I_R$R_R", (MOP_BASE*)(new COMP_FLT$I_R$R_R())});
     decodeStorage.insert({"FISUB$I_R$R_R", (MOP_BASE*)(new COMP_FLT$I_R$R_R())});
     decodeStorage.insert({"FISUBR$I_R$R_R", (MOP_BASE*)(new COMP_FLT$I_R$R_R())});
     decodeStorage.insert({"V64_FLT_ALU$I_R$R_R", (MOP_BASE*)(new COMP_FLT$I_R$R_R())});
     decodeStorage.insert({"FADD$I_R$R_M", (MOP_BASE*)(new COMP_FLT$I_R$R_M())});
     decodeStorage.insert({"FSUB$I_R$R_M", (MOP_BASE*)(new COMP_FLT$I_R$R_M())});
     decodeStorage.insert({"FSUBR$I_R$R_M", (MOP_BASE*)(new COMP_FLT$I_R$R_M())});
     decodeStorage.insert({"FADDP$I_R$R_M", (MOP_BASE*)(new COMP_FLT$I_R$R_M())});
     decodeStorage.insert({"FSUBP$I_R$R_M", (MOP_BASE*)(new COMP_FLT$I_R$R_M())});
     decodeStorage.insert({"FSUBRP$I_R$R_M", (MOP_BASE*)(new COMP_FLT$I_R$R_M())});
     decodeStorage.insert({"FIADD$I_R$R_M", (MOP_BASE*)(new COMP_FLT$I_R$R_M())});
     decodeStorage.insert({"FISUB$I_R$R_M", (MOP_BASE*)(new COMP_FLT$I_R$R_M())});
     decodeStorage.insert({"FISUBR$I_R$R_M", (MOP_BASE*)(new COMP_FLT$I_R$R_M())});
     decodeStorage.insert({"V64_FLT_ALU$I_R$R_M", (MOP_BASE*)(new COMP_FLT$I_R$R_M())});
     decodeStorage.insert({"FADD$I_R$R", (MOP_BASE*)(new COMP_FLT$I_R$R())});
     decodeStorage.insert({"FSUB$I_R$R", (MOP_BASE*)(new COMP_FLT$I_R$R())});
     decodeStorage.insert({"FSUBR$I_R$R", (MOP_BASE*)(new COMP_FLT$I_R$R())});
     decodeStorage.insert({"FADDP$I_R$R", (MOP_BASE*)(new COMP_FLT$I_R$R())});
     decodeStorage.insert({"FSUBP$I_R$R", (MOP_BASE*)(new COMP_FLT$I_R$R())});
     decodeStorage.insert({"FSUBRP$I_R$R", (MOP_BASE*)(new COMP_FLT$I_R$R())});
     decodeStorage.insert({"FIADD$I_R$R", (MOP_BASE*)(new COMP_FLT$I_R$R())});
     decodeStorage.insert({"FISUB$I_R$R", (MOP_BASE*)(new COMP_FLT$I_R$R())});
     decodeStorage.insert({"FISUBR$I_R$R", (MOP_BASE*)(new COMP_FLT$I_R$R())});
     decodeStorage.insert({"V64_FLT_ALU$I_R$R", (MOP_BASE*)(new COMP_FLT$I_R$R())});
     decodeStorage.insert({"FADD$I_R$M_R", (MOP_BASE*)(new COMP_FLT$I_R$M_R())});
     decodeStorage.insert({"FSUB$I_R$M_R", (MOP_BASE*)(new COMP_FLT$I_R$M_R())});
     decodeStorage.insert({"FSUBR$I_R$M_R", (MOP_BASE*)(new COMP_FLT$I_R$M_R())});
     decodeStorage.insert({"FADDP$I_R$M_R", (MOP_BASE*)(new COMP_FLT$I_R$M_R())});
     decodeStorage.insert({"FSUBP$I_R$M_R", (MOP_BASE*)(new COMP_FLT$I_R$M_R())});
     decodeStorage.insert({"FSUBRP$I_R$M_R", (MOP_BASE*)(new COMP_FLT$I_R$M_R())});
     decodeStorage.insert({"FIADD$I_R$M_R", (MOP_BASE*)(new COMP_FLT$I_R$M_R())});
     decodeStorage.insert({"FISUB$I_R$M_R", (MOP_BASE*)(new COMP_FLT$I_R$M_R())});
     decodeStorage.insert({"FISUBR$I_R$M_R", (MOP_BASE*)(new COMP_FLT$I_R$M_R())});
     decodeStorage.insert({"V64_FLT_ALU$I_R$M_R", (MOP_BASE*)(new COMP_FLT$I_R$M_R())});
     decodeStorage.insert({"FADD$I_R$M_M", (MOP_BASE*)(new COMP_FLT$I_R$M_M())});
     decodeStorage.insert({"FSUB$I_R$M_M", (MOP_BASE*)(new COMP_FLT$I_R$M_M())});
     decodeStorage.insert({"FSUBR$I_R$M_M", (MOP_BASE*)(new COMP_FLT$I_R$M_M())});
     decodeStorage.insert({"FADDP$I_R$M_M", (MOP_BASE*)(new COMP_FLT$I_R$M_M())});
     decodeStorage.insert({"FSUBP$I_R$M_M", (MOP_BASE*)(new COMP_FLT$I_R$M_M())});
     decodeStorage.insert({"FSUBRP$I_R$M_M", (MOP_BASE*)(new COMP_FLT$I_R$M_M())});
     decodeStorage.insert({"FIADD$I_R$M_M", (MOP_BASE*)(new COMP_FLT$I_R$M_M())});
     decodeStorage.insert({"FISUB$I_R$M_M", (MOP_BASE*)(new COMP_FLT$I_R$M_M())});
     decodeStorage.insert({"FISUBR$I_R$M_M", (MOP_BASE*)(new COMP_FLT$I_R$M_M())});
     decodeStorage.insert({"V64_FLT_ALU$I_R$M_M", (MOP_BASE*)(new COMP_FLT$I_R$M_M())});
     decodeStorage.insert({"FADD$I_R$M", (MOP_BASE*)(new COMP_FLT$I_R$M())});
     decodeStorage.insert({"FSUB$I_R$M", (MOP_BASE*)(new COMP_FLT$I_R$M())});
     decodeStorage.insert({"FSUBR$I_R$M", (MOP_BASE*)(new COMP_FLT$I_R$M())});
     decodeStorage.insert({"FADDP$I_R$M", (MOP_BASE*)(new COMP_FLT$I_R$M())});
     decodeStorage.insert({"FSUBP$I_R$M", (MOP_BASE*)(new COMP_FLT$I_R$M())});
     decodeStorage.insert({"FSUBRP$I_R$M", (MOP_BASE*)(new COMP_FLT$I_R$M())});
     decodeStorage.insert({"FIADD$I_R$M", (MOP_BASE*)(new COMP_FLT$I_R$M())});
     decodeStorage.insert({"FISUB$I_R$M", (MOP_BASE*)(new COMP_FLT$I_R$M())});
     decodeStorage.insert({"FISUBR$I_R$M", (MOP_BASE*)(new COMP_FLT$I_R$M())});
     decodeStorage.insert({"V64_FLT_ALU$I_R$M", (MOP_BASE*)(new COMP_FLT$I_R$M())});
     decodeStorage.insert({"FADD$I_I$R_R", (MOP_BASE*)(new COMP_FLT$I_I$R_R())});
     decodeStorage.insert({"FSUB$I_I$R_R", (MOP_BASE*)(new COMP_FLT$I_I$R_R())});
     decodeStorage.insert({"FSUBR$I_I$R_R", (MOP_BASE*)(new COMP_FLT$I_I$R_R())});
     decodeStorage.insert({"FADDP$I_I$R_R", (MOP_BASE*)(new COMP_FLT$I_I$R_R())});
     decodeStorage.insert({"FSUBP$I_I$R_R", (MOP_BASE*)(new COMP_FLT$I_I$R_R())});
     decodeStorage.insert({"FSUBRP$I_I$R_R", (MOP_BASE*)(new COMP_FLT$I_I$R_R())});
     decodeStorage.insert({"FIADD$I_I$R_R", (MOP_BASE*)(new COMP_FLT$I_I$R_R())});
     decodeStorage.insert({"FISUB$I_I$R_R", (MOP_BASE*)(new COMP_FLT$I_I$R_R())});
     decodeStorage.insert({"FISUBR$I_I$R_R", (MOP_BASE*)(new COMP_FLT$I_I$R_R())});
     decodeStorage.insert({"V64_FLT_ALU$I_I$R_R", (MOP_BASE*)(new COMP_FLT$I_I$R_R())});
     decodeStorage.insert({"FADD$I_I$R_M", (MOP_BASE*)(new COMP_FLT$I_I$R_M())});
     decodeStorage.insert({"FSUB$I_I$R_M", (MOP_BASE*)(new COMP_FLT$I_I$R_M())});
     decodeStorage.insert({"FSUBR$I_I$R_M", (MOP_BASE*)(new COMP_FLT$I_I$R_M())});
     decodeStorage.insert({"FADDP$I_I$R_M", (MOP_BASE*)(new COMP_FLT$I_I$R_M())});
     decodeStorage.insert({"FSUBP$I_I$R_M", (MOP_BASE*)(new COMP_FLT$I_I$R_M())});
     decodeStorage.insert({"FSUBRP$I_I$R_M", (MOP_BASE*)(new COMP_FLT$I_I$R_M())});
     decodeStorage.insert({"FIADD$I_I$R_M", (MOP_BASE*)(new COMP_FLT$I_I$R_M())});
     decodeStorage.insert({"FISUB$I_I$R_M", (MOP_BASE*)(new COMP_FLT$I_I$R_M())});
     decodeStorage.insert({"FISUBR$I_I$R_M", (MOP_BASE*)(new COMP_FLT$I_I$R_M())});
     decodeStorage.insert({"V64_FLT_ALU$I_I$R_M", (MOP_BASE*)(new COMP_FLT$I_I$R_M())});
     decodeStorage.insert({"FADD$I_I$R", (MOP_BASE*)(new COMP_FLT$I_I$R())});
     decodeStorage.insert({"FSUB$I_I$R", (MOP_BASE*)(new COMP_FLT$I_I$R())});
     decodeStorage.insert({"FSUBR$I_I$R", (MOP_BASE*)(new COMP_FLT$I_I$R())});
     decodeStorage.insert({"FADDP$I_I$R", (MOP_BASE*)(new COMP_FLT$I_I$R())});
     decodeStorage.insert({"FSUBP$I_I$R", (MOP_BASE*)(new COMP_FLT$I_I$R())});
     decodeStorage.insert({"FSUBRP$I_I$R", (MOP_BASE*)(new COMP_FLT$I_I$R())});
     decodeStorage.insert({"FIADD$I_I$R", (MOP_BASE*)(new COMP_FLT$I_I$R())});
     decodeStorage.insert({"FISUB$I_I$R", (MOP_BASE*)(new COMP_FLT$I_I$R())});
     decodeStorage.insert({"FISUBR$I_I$R", (MOP_BASE*)(new COMP_FLT$I_I$R())});
     decodeStorage.insert({"V64_FLT_ALU$I_I$R", (MOP_BASE*)(new COMP_FLT$I_I$R())});
     decodeStorage.insert({"FADD$I_I$M_R", (MOP_BASE*)(new COMP_FLT$I_I$M_R())});
     decodeStorage.insert({"FSUB$I_I$M_R", (MOP_BASE*)(new COMP_FLT$I_I$M_R())});
     decodeStorage.insert({"FSUBR$I_I$M_R", (MOP_BASE*)(new COMP_FLT$I_I$M_R())});
     decodeStorage.insert({"FADDP$I_I$M_R", (MOP_BASE*)(new COMP_FLT$I_I$M_R())});
     decodeStorage.insert({"FSUBP$I_I$M_R", (MOP_BASE*)(new COMP_FLT$I_I$M_R())});
     decodeStorage.insert({"FSUBRP$I_I$M_R", (MOP_BASE*)(new COMP_FLT$I_I$M_R())});
     decodeStorage.insert({"FIADD$I_I$M_R", (MOP_BASE*)(new COMP_FLT$I_I$M_R())});
     decodeStorage.insert({"FISUB$I_I$M_R", (MOP_BASE*)(new COMP_FLT$I_I$M_R())});
     decodeStorage.insert({"FISUBR$I_I$M_R", (MOP_BASE*)(new COMP_FLT$I_I$M_R())});
     decodeStorage.insert({"V64_FLT_ALU$I_I$M_R", (MOP_BASE*)(new COMP_FLT$I_I$M_R())});
     decodeStorage.insert({"FADD$I_I$M_M", (MOP_BASE*)(new COMP_FLT$I_I$M_M())});
     decodeStorage.insert({"FSUB$I_I$M_M", (MOP_BASE*)(new COMP_FLT$I_I$M_M())});
     decodeStorage.insert({"FSUBR$I_I$M_M", (MOP_BASE*)(new COMP_FLT$I_I$M_M())});
     decodeStorage.insert({"FADDP$I_I$M_M", (MOP_BASE*)(new COMP_FLT$I_I$M_M())});
     decodeStorage.insert({"FSUBP$I_I$M_M", (MOP_BASE*)(new COMP_FLT$I_I$M_M())});
     decodeStorage.insert({"FSUBRP$I_I$M_M", (MOP_BASE*)(new COMP_FLT$I_I$M_M())});
     decodeStorage.insert({"FIADD$I_I$M_M", (MOP_BASE*)(new COMP_FLT$I_I$M_M())});
     decodeStorage.insert({"FISUB$I_I$M_M", (MOP_BASE*)(new COMP_FLT$I_I$M_M())});
     decodeStorage.insert({"FISUBR$I_I$M_M", (MOP_BASE*)(new COMP_FLT$I_I$M_M())});
     decodeStorage.insert({"V64_FLT_ALU$I_I$M_M", (MOP_BASE*)(new COMP_FLT$I_I$M_M())});
     decodeStorage.insert({"FADD$I_I$M", (MOP_BASE*)(new COMP_FLT$I_I$M())});
     decodeStorage.insert({"FSUB$I_I$M", (MOP_BASE*)(new COMP_FLT$I_I$M())});
     decodeStorage.insert({"FSUBR$I_I$M", (MOP_BASE*)(new COMP_FLT$I_I$M())});
     decodeStorage.insert({"FADDP$I_I$M", (MOP_BASE*)(new COMP_FLT$I_I$M())});
     decodeStorage.insert({"FSUBP$I_I$M", (MOP_BASE*)(new COMP_FLT$I_I$M())});
     decodeStorage.insert({"FSUBRP$I_I$M", (MOP_BASE*)(new COMP_FLT$I_I$M())});
     decodeStorage.insert({"FIADD$I_I$M", (MOP_BASE*)(new COMP_FLT$I_I$M())});
     decodeStorage.insert({"FISUB$I_I$M", (MOP_BASE*)(new COMP_FLT$I_I$M())});
     decodeStorage.insert({"FISUBR$I_I$M", (MOP_BASE*)(new COMP_FLT$I_I$M())});
     decodeStorage.insert({"V64_FLT_ALU$I_I$M", (MOP_BASE*)(new COMP_FLT$I_I$M())});
     decodeStorage.insert({"FADD$I_M$R_R", (MOP_BASE*)(new COMP_FLT$I_M$R_R())});
     decodeStorage.insert({"FSUB$I_M$R_R", (MOP_BASE*)(new COMP_FLT$I_M$R_R())});
     decodeStorage.insert({"FSUBR$I_M$R_R", (MOP_BASE*)(new COMP_FLT$I_M$R_R())});
     decodeStorage.insert({"FADDP$I_M$R_R", (MOP_BASE*)(new COMP_FLT$I_M$R_R())});
     decodeStorage.insert({"FSUBP$I_M$R_R", (MOP_BASE*)(new COMP_FLT$I_M$R_R())});
     decodeStorage.insert({"FSUBRP$I_M$R_R", (MOP_BASE*)(new COMP_FLT$I_M$R_R())});
     decodeStorage.insert({"FIADD$I_M$R_R", (MOP_BASE*)(new COMP_FLT$I_M$R_R())});
     decodeStorage.insert({"FISUB$I_M$R_R", (MOP_BASE*)(new COMP_FLT$I_M$R_R())});
     decodeStorage.insert({"FISUBR$I_M$R_R", (MOP_BASE*)(new COMP_FLT$I_M$R_R())});
     decodeStorage.insert({"V64_FLT_ALU$I_M$R_R", (MOP_BASE*)(new COMP_FLT$I_M$R_R())});
     decodeStorage.insert({"FADD$I_M$R_M", (MOP_BASE*)(new COMP_FLT$I_M$R_M())});
     decodeStorage.insert({"FSUB$I_M$R_M", (MOP_BASE*)(new COMP_FLT$I_M$R_M())});
     decodeStorage.insert({"FSUBR$I_M$R_M", (MOP_BASE*)(new COMP_FLT$I_M$R_M())});
     decodeStorage.insert({"FADDP$I_M$R_M", (MOP_BASE*)(new COMP_FLT$I_M$R_M())});
     decodeStorage.insert({"FSUBP$I_M$R_M", (MOP_BASE*)(new COMP_FLT$I_M$R_M())});
     decodeStorage.insert({"FSUBRP$I_M$R_M", (MOP_BASE*)(new COMP_FLT$I_M$R_M())});
     decodeStorage.insert({"FIADD$I_M$R_M", (MOP_BASE*)(new COMP_FLT$I_M$R_M())});
     decodeStorage.insert({"FISUB$I_M$R_M", (MOP_BASE*)(new COMP_FLT$I_M$R_M())});
     decodeStorage.insert({"FISUBR$I_M$R_M", (MOP_BASE*)(new COMP_FLT$I_M$R_M())});
     decodeStorage.insert({"V64_FLT_ALU$I_M$R_M", (MOP_BASE*)(new COMP_FLT$I_M$R_M())});
     decodeStorage.insert({"FADD$I_M$R", (MOP_BASE*)(new COMP_FLT$I_M$R())});
     decodeStorage.insert({"FSUB$I_M$R", (MOP_BASE*)(new COMP_FLT$I_M$R())});
     decodeStorage.insert({"FSUBR$I_M$R", (MOP_BASE*)(new COMP_FLT$I_M$R())});
     decodeStorage.insert({"FADDP$I_M$R", (MOP_BASE*)(new COMP_FLT$I_M$R())});
     decodeStorage.insert({"FSUBP$I_M$R", (MOP_BASE*)(new COMP_FLT$I_M$R())});
     decodeStorage.insert({"FSUBRP$I_M$R", (MOP_BASE*)(new COMP_FLT$I_M$R())});
     decodeStorage.insert({"FIADD$I_M$R", (MOP_BASE*)(new COMP_FLT$I_M$R())});
     decodeStorage.insert({"FISUB$I_M$R", (MOP_BASE*)(new COMP_FLT$I_M$R())});
     decodeStorage.insert({"FISUBR$I_M$R", (MOP_BASE*)(new COMP_FLT$I_M$R())});
     decodeStorage.insert({"V64_FLT_ALU$I_M$R", (MOP_BASE*)(new COMP_FLT$I_M$R())});
     decodeStorage.insert({"FADD$I_M$M_R", (MOP_BASE*)(new COMP_FLT$I_M$M_R())});
     decodeStorage.insert({"FSUB$I_M$M_R", (MOP_BASE*)(new COMP_FLT$I_M$M_R())});
     decodeStorage.insert({"FSUBR$I_M$M_R", (MOP_BASE*)(new COMP_FLT$I_M$M_R())});
     decodeStorage.insert({"FADDP$I_M$M_R", (MOP_BASE*)(new COMP_FLT$I_M$M_R())});
     decodeStorage.insert({"FSUBP$I_M$M_R", (MOP_BASE*)(new COMP_FLT$I_M$M_R())});
     decodeStorage.insert({"FSUBRP$I_M$M_R", (MOP_BASE*)(new COMP_FLT$I_M$M_R())});
     decodeStorage.insert({"FIADD$I_M$M_R", (MOP_BASE*)(new COMP_FLT$I_M$M_R())});
     decodeStorage.insert({"FISUB$I_M$M_R", (MOP_BASE*)(new COMP_FLT$I_M$M_R())});
     decodeStorage.insert({"FISUBR$I_M$M_R", (MOP_BASE*)(new COMP_FLT$I_M$M_R())});
     decodeStorage.insert({"V64_FLT_ALU$I_M$M_R", (MOP_BASE*)(new COMP_FLT$I_M$M_R())});
     decodeStorage.insert({"FADD$I_M$M_M", (MOP_BASE*)(new COMP_FLT$I_M$M_M())});
     decodeStorage.insert({"FSUB$I_M$M_M", (MOP_BASE*)(new COMP_FLT$I_M$M_M())});
     decodeStorage.insert({"FSUBR$I_M$M_M", (MOP_BASE*)(new COMP_FLT$I_M$M_M())});
     decodeStorage.insert({"FADDP$I_M$M_M", (MOP_BASE*)(new COMP_FLT$I_M$M_M())});
     decodeStorage.insert({"FSUBP$I_M$M_M", (MOP_BASE*)(new COMP_FLT$I_M$M_M())});
     decodeStorage.insert({"FSUBRP$I_M$M_M", (MOP_BASE*)(new COMP_FLT$I_M$M_M())});
     decodeStorage.insert({"FIADD$I_M$M_M", (MOP_BASE*)(new COMP_FLT$I_M$M_M())});
     decodeStorage.insert({"FISUB$I_M$M_M", (MOP_BASE*)(new COMP_FLT$I_M$M_M())});
     decodeStorage.insert({"FISUBR$I_M$M_M", (MOP_BASE*)(new COMP_FLT$I_M$M_M())});
     decodeStorage.insert({"V64_FLT_ALU$I_M$M_M", (MOP_BASE*)(new COMP_FLT$I_M$M_M())});
     decodeStorage.insert({"FADD$I_M$M", (MOP_BASE*)(new COMP_FLT$I_M$M())});
     decodeStorage.insert({"FSUB$I_M$M", (MOP_BASE*)(new COMP_FLT$I_M$M())});
     decodeStorage.insert({"FSUBR$I_M$M", (MOP_BASE*)(new COMP_FLT$I_M$M())});
     decodeStorage.insert({"FADDP$I_M$M", (MOP_BASE*)(new COMP_FLT$I_M$M())});
     decodeStorage.insert({"FSUBP$I_M$M", (MOP_BASE*)(new COMP_FLT$I_M$M())});
     decodeStorage.insert({"FSUBRP$I_M$M", (MOP_BASE*)(new COMP_FLT$I_M$M())});
     decodeStorage.insert({"FIADD$I_M$M", (MOP_BASE*)(new COMP_FLT$I_M$M())});
     decodeStorage.insert({"FISUB$I_M$M", (MOP_BASE*)(new COMP_FLT$I_M$M())});
     decodeStorage.insert({"FISUBR$I_M$M", (MOP_BASE*)(new COMP_FLT$I_M$M())});
     decodeStorage.insert({"V64_FLT_ALU$I_M$M", (MOP_BASE*)(new COMP_FLT$I_M$M())});
     decodeStorage.insert({"FADD$M_R$R_R", (MOP_BASE*)(new COMP_FLT$M_R$R_R())});
     decodeStorage.insert({"FSUB$M_R$R_R", (MOP_BASE*)(new COMP_FLT$M_R$R_R())});
     decodeStorage.insert({"FSUBR$M_R$R_R", (MOP_BASE*)(new COMP_FLT$M_R$R_R())});
     decodeStorage.insert({"FADDP$M_R$R_R", (MOP_BASE*)(new COMP_FLT$M_R$R_R())});
     decodeStorage.insert({"FSUBP$M_R$R_R", (MOP_BASE*)(new COMP_FLT$M_R$R_R())});
     decodeStorage.insert({"FSUBRP$M_R$R_R", (MOP_BASE*)(new COMP_FLT$M_R$R_R())});
     decodeStorage.insert({"FIADD$M_R$R_R", (MOP_BASE*)(new COMP_FLT$M_R$R_R())});
     decodeStorage.insert({"FISUB$M_R$R_R", (MOP_BASE*)(new COMP_FLT$M_R$R_R())});
     decodeStorage.insert({"FISUBR$M_R$R_R", (MOP_BASE*)(new COMP_FLT$M_R$R_R())});
     decodeStorage.insert({"V64_FLT_ALU$M_R$R_R", (MOP_BASE*)(new COMP_FLT$M_R$R_R())});
     decodeStorage.insert({"FADD$M_R$R_M", (MOP_BASE*)(new COMP_FLT$M_R$R_M())});
     decodeStorage.insert({"FSUB$M_R$R_M", (MOP_BASE*)(new COMP_FLT$M_R$R_M())});
     decodeStorage.insert({"FSUBR$M_R$R_M", (MOP_BASE*)(new COMP_FLT$M_R$R_M())});
     decodeStorage.insert({"FADDP$M_R$R_M", (MOP_BASE*)(new COMP_FLT$M_R$R_M())});
     decodeStorage.insert({"FSUBP$M_R$R_M", (MOP_BASE*)(new COMP_FLT$M_R$R_M())});
     decodeStorage.insert({"FSUBRP$M_R$R_M", (MOP_BASE*)(new COMP_FLT$M_R$R_M())});
     decodeStorage.insert({"FIADD$M_R$R_M", (MOP_BASE*)(new COMP_FLT$M_R$R_M())});
     decodeStorage.insert({"FISUB$M_R$R_M", (MOP_BASE*)(new COMP_FLT$M_R$R_M())});
     decodeStorage.insert({"FISUBR$M_R$R_M", (MOP_BASE*)(new COMP_FLT$M_R$R_M())});
     decodeStorage.insert({"V64_FLT_ALU$M_R$R_M", (MOP_BASE*)(new COMP_FLT$M_R$R_M())});
     decodeStorage.insert({"FADD$M_R$R", (MOP_BASE*)(new COMP_FLT$M_R$R())});
     decodeStorage.insert({"FSUB$M_R$R", (MOP_BASE*)(new COMP_FLT$M_R$R())});
     decodeStorage.insert({"FSUBR$M_R$R", (MOP_BASE*)(new COMP_FLT$M_R$R())});
     decodeStorage.insert({"FADDP$M_R$R", (MOP_BASE*)(new COMP_FLT$M_R$R())});
     decodeStorage.insert({"FSUBP$M_R$R", (MOP_BASE*)(new COMP_FLT$M_R$R())});
     decodeStorage.insert({"FSUBRP$M_R$R", (MOP_BASE*)(new COMP_FLT$M_R$R())});
     decodeStorage.insert({"FIADD$M_R$R", (MOP_BASE*)(new COMP_FLT$M_R$R())});
     decodeStorage.insert({"FISUB$M_R$R", (MOP_BASE*)(new COMP_FLT$M_R$R())});
     decodeStorage.insert({"FISUBR$M_R$R", (MOP_BASE*)(new COMP_FLT$M_R$R())});
     decodeStorage.insert({"V64_FLT_ALU$M_R$R", (MOP_BASE*)(new COMP_FLT$M_R$R())});
     decodeStorage.insert({"FADD$M_R$M_R", (MOP_BASE*)(new COMP_FLT$M_R$M_R())});
     decodeStorage.insert({"FSUB$M_R$M_R", (MOP_BASE*)(new COMP_FLT$M_R$M_R())});
     decodeStorage.insert({"FSUBR$M_R$M_R", (MOP_BASE*)(new COMP_FLT$M_R$M_R())});
     decodeStorage.insert({"FADDP$M_R$M_R", (MOP_BASE*)(new COMP_FLT$M_R$M_R())});
     decodeStorage.insert({"FSUBP$M_R$M_R", (MOP_BASE*)(new COMP_FLT$M_R$M_R())});
     decodeStorage.insert({"FSUBRP$M_R$M_R", (MOP_BASE*)(new COMP_FLT$M_R$M_R())});
     decodeStorage.insert({"FIADD$M_R$M_R", (MOP_BASE*)(new COMP_FLT$M_R$M_R())});
     decodeStorage.insert({"FISUB$M_R$M_R", (MOP_BASE*)(new COMP_FLT$M_R$M_R())});
     decodeStorage.insert({"FISUBR$M_R$M_R", (MOP_BASE*)(new COMP_FLT$M_R$M_R())});
     decodeStorage.insert({"V64_FLT_ALU$M_R$M_R", (MOP_BASE*)(new COMP_FLT$M_R$M_R())});
     decodeStorage.insert({"FADD$M_R$M_M", (MOP_BASE*)(new COMP_FLT$M_R$M_M())});
     decodeStorage.insert({"FSUB$M_R$M_M", (MOP_BASE*)(new COMP_FLT$M_R$M_M())});
     decodeStorage.insert({"FSUBR$M_R$M_M", (MOP_BASE*)(new COMP_FLT$M_R$M_M())});
     decodeStorage.insert({"FADDP$M_R$M_M", (MOP_BASE*)(new COMP_FLT$M_R$M_M())});
     decodeStorage.insert({"FSUBP$M_R$M_M", (MOP_BASE*)(new COMP_FLT$M_R$M_M())});
     decodeStorage.insert({"FSUBRP$M_R$M_M", (MOP_BASE*)(new COMP_FLT$M_R$M_M())});
     decodeStorage.insert({"FIADD$M_R$M_M", (MOP_BASE*)(new COMP_FLT$M_R$M_M())});
     decodeStorage.insert({"FISUB$M_R$M_M", (MOP_BASE*)(new COMP_FLT$M_R$M_M())});
     decodeStorage.insert({"FISUBR$M_R$M_M", (MOP_BASE*)(new COMP_FLT$M_R$M_M())});
     decodeStorage.insert({"V64_FLT_ALU$M_R$M_M", (MOP_BASE*)(new COMP_FLT$M_R$M_M())});
     decodeStorage.insert({"FADD$M_R$M", (MOP_BASE*)(new COMP_FLT$M_R$M())});
     decodeStorage.insert({"FSUB$M_R$M", (MOP_BASE*)(new COMP_FLT$M_R$M())});
     decodeStorage.insert({"FSUBR$M_R$M", (MOP_BASE*)(new COMP_FLT$M_R$M())});
     decodeStorage.insert({"FADDP$M_R$M", (MOP_BASE*)(new COMP_FLT$M_R$M())});
     decodeStorage.insert({"FSUBP$M_R$M", (MOP_BASE*)(new COMP_FLT$M_R$M())});
     decodeStorage.insert({"FSUBRP$M_R$M", (MOP_BASE*)(new COMP_FLT$M_R$M())});
     decodeStorage.insert({"FIADD$M_R$M", (MOP_BASE*)(new COMP_FLT$M_R$M())});
     decodeStorage.insert({"FISUB$M_R$M", (MOP_BASE*)(new COMP_FLT$M_R$M())});
     decodeStorage.insert({"FISUBR$M_R$M", (MOP_BASE*)(new COMP_FLT$M_R$M())});
     decodeStorage.insert({"V64_FLT_ALU$M_R$M", (MOP_BASE*)(new COMP_FLT$M_R$M())});
     decodeStorage.insert({"FADD$M_I$R_R", (MOP_BASE*)(new COMP_FLT$M_I$R_R())});
     decodeStorage.insert({"FSUB$M_I$R_R", (MOP_BASE*)(new COMP_FLT$M_I$R_R())});
     decodeStorage.insert({"FSUBR$M_I$R_R", (MOP_BASE*)(new COMP_FLT$M_I$R_R())});
     decodeStorage.insert({"FADDP$M_I$R_R", (MOP_BASE*)(new COMP_FLT$M_I$R_R())});
     decodeStorage.insert({"FSUBP$M_I$R_R", (MOP_BASE*)(new COMP_FLT$M_I$R_R())});
     decodeStorage.insert({"FSUBRP$M_I$R_R", (MOP_BASE*)(new COMP_FLT$M_I$R_R())});
     decodeStorage.insert({"FIADD$M_I$R_R", (MOP_BASE*)(new COMP_FLT$M_I$R_R())});
     decodeStorage.insert({"FISUB$M_I$R_R", (MOP_BASE*)(new COMP_FLT$M_I$R_R())});
     decodeStorage.insert({"FISUBR$M_I$R_R", (MOP_BASE*)(new COMP_FLT$M_I$R_R())});
     decodeStorage.insert({"V64_FLT_ALU$M_I$R_R", (MOP_BASE*)(new COMP_FLT$M_I$R_R())});
     decodeStorage.insert({"FADD$M_I$R_M", (MOP_BASE*)(new COMP_FLT$M_I$R_M())});
     decodeStorage.insert({"FSUB$M_I$R_M", (MOP_BASE*)(new COMP_FLT$M_I$R_M())});
     decodeStorage.insert({"FSUBR$M_I$R_M", (MOP_BASE*)(new COMP_FLT$M_I$R_M())});
     decodeStorage.insert({"FADDP$M_I$R_M", (MOP_BASE*)(new COMP_FLT$M_I$R_M())});
     decodeStorage.insert({"FSUBP$M_I$R_M", (MOP_BASE*)(new COMP_FLT$M_I$R_M())});
     decodeStorage.insert({"FSUBRP$M_I$R_M", (MOP_BASE*)(new COMP_FLT$M_I$R_M())});
     decodeStorage.insert({"FIADD$M_I$R_M", (MOP_BASE*)(new COMP_FLT$M_I$R_M())});
     decodeStorage.insert({"FISUB$M_I$R_M", (MOP_BASE*)(new COMP_FLT$M_I$R_M())});
     decodeStorage.insert({"FISUBR$M_I$R_M", (MOP_BASE*)(new COMP_FLT$M_I$R_M())});
     decodeStorage.insert({"V64_FLT_ALU$M_I$R_M", (MOP_BASE*)(new COMP_FLT$M_I$R_M())});
     decodeStorage.insert({"FADD$M_I$R", (MOP_BASE*)(new COMP_FLT$M_I$R())});
     decodeStorage.insert({"FSUB$M_I$R", (MOP_BASE*)(new COMP_FLT$M_I$R())});
     decodeStorage.insert({"FSUBR$M_I$R", (MOP_BASE*)(new COMP_FLT$M_I$R())});
     decodeStorage.insert({"FADDP$M_I$R", (MOP_BASE*)(new COMP_FLT$M_I$R())});
     decodeStorage.insert({"FSUBP$M_I$R", (MOP_BASE*)(new COMP_FLT$M_I$R())});
     decodeStorage.insert({"FSUBRP$M_I$R", (MOP_BASE*)(new COMP_FLT$M_I$R())});
     decodeStorage.insert({"FIADD$M_I$R", (MOP_BASE*)(new COMP_FLT$M_I$R())});
     decodeStorage.insert({"FISUB$M_I$R", (MOP_BASE*)(new COMP_FLT$M_I$R())});
     decodeStorage.insert({"FISUBR$M_I$R", (MOP_BASE*)(new COMP_FLT$M_I$R())});
     decodeStorage.insert({"V64_FLT_ALU$M_I$R", (MOP_BASE*)(new COMP_FLT$M_I$R())});
     decodeStorage.insert({"FADD$M_I$M_R", (MOP_BASE*)(new COMP_FLT$M_I$M_R())});
     decodeStorage.insert({"FSUB$M_I$M_R", (MOP_BASE*)(new COMP_FLT$M_I$M_R())});
     decodeStorage.insert({"FSUBR$M_I$M_R", (MOP_BASE*)(new COMP_FLT$M_I$M_R())});
     decodeStorage.insert({"FADDP$M_I$M_R", (MOP_BASE*)(new COMP_FLT$M_I$M_R())});
     decodeStorage.insert({"FSUBP$M_I$M_R", (MOP_BASE*)(new COMP_FLT$M_I$M_R())});
     decodeStorage.insert({"FSUBRP$M_I$M_R", (MOP_BASE*)(new COMP_FLT$M_I$M_R())});
     decodeStorage.insert({"FIADD$M_I$M_R", (MOP_BASE*)(new COMP_FLT$M_I$M_R())});
     decodeStorage.insert({"FISUB$M_I$M_R", (MOP_BASE*)(new COMP_FLT$M_I$M_R())});
     decodeStorage.insert({"FISUBR$M_I$M_R", (MOP_BASE*)(new COMP_FLT$M_I$M_R())});
     decodeStorage.insert({"V64_FLT_ALU$M_I$M_R", (MOP_BASE*)(new COMP_FLT$M_I$M_R())});
     decodeStorage.insert({"FADD$M_I$M_M", (MOP_BASE*)(new COMP_FLT$M_I$M_M())});
     decodeStorage.insert({"FSUB$M_I$M_M", (MOP_BASE*)(new COMP_FLT$M_I$M_M())});
     decodeStorage.insert({"FSUBR$M_I$M_M", (MOP_BASE*)(new COMP_FLT$M_I$M_M())});
     decodeStorage.insert({"FADDP$M_I$M_M", (MOP_BASE*)(new COMP_FLT$M_I$M_M())});
     decodeStorage.insert({"FSUBP$M_I$M_M", (MOP_BASE*)(new COMP_FLT$M_I$M_M())});
     decodeStorage.insert({"FSUBRP$M_I$M_M", (MOP_BASE*)(new COMP_FLT$M_I$M_M())});
     decodeStorage.insert({"FIADD$M_I$M_M", (MOP_BASE*)(new COMP_FLT$M_I$M_M())});
     decodeStorage.insert({"FISUB$M_I$M_M", (MOP_BASE*)(new COMP_FLT$M_I$M_M())});
     decodeStorage.insert({"FISUBR$M_I$M_M", (MOP_BASE*)(new COMP_FLT$M_I$M_M())});
     decodeStorage.insert({"V64_FLT_ALU$M_I$M_M", (MOP_BASE*)(new COMP_FLT$M_I$M_M())});
     decodeStorage.insert({"FADD$M_I$M", (MOP_BASE*)(new COMP_FLT$M_I$M())});
     decodeStorage.insert({"FSUB$M_I$M", (MOP_BASE*)(new COMP_FLT$M_I$M())});
     decodeStorage.insert({"FSUBR$M_I$M", (MOP_BASE*)(new COMP_FLT$M_I$M())});
     decodeStorage.insert({"FADDP$M_I$M", (MOP_BASE*)(new COMP_FLT$M_I$M())});
     decodeStorage.insert({"FSUBP$M_I$M", (MOP_BASE*)(new COMP_FLT$M_I$M())});
     decodeStorage.insert({"FSUBRP$M_I$M", (MOP_BASE*)(new COMP_FLT$M_I$M())});
     decodeStorage.insert({"FIADD$M_I$M", (MOP_BASE*)(new COMP_FLT$M_I$M())});
     decodeStorage.insert({"FISUB$M_I$M", (MOP_BASE*)(new COMP_FLT$M_I$M())});
     decodeStorage.insert({"FISUBR$M_I$M", (MOP_BASE*)(new COMP_FLT$M_I$M())});
     decodeStorage.insert({"V64_FLT_ALU$M_I$M", (MOP_BASE*)(new COMP_FLT$M_I$M())});
     decodeStorage.insert({"FADD$M_M$R_R", (MOP_BASE*)(new COMP_FLT$M_M$R_R())});
     decodeStorage.insert({"FSUB$M_M$R_R", (MOP_BASE*)(new COMP_FLT$M_M$R_R())});
     decodeStorage.insert({"FSUBR$M_M$R_R", (MOP_BASE*)(new COMP_FLT$M_M$R_R())});
     decodeStorage.insert({"FADDP$M_M$R_R", (MOP_BASE*)(new COMP_FLT$M_M$R_R())});
     decodeStorage.insert({"FSUBP$M_M$R_R", (MOP_BASE*)(new COMP_FLT$M_M$R_R())});
     decodeStorage.insert({"FSUBRP$M_M$R_R", (MOP_BASE*)(new COMP_FLT$M_M$R_R())});
     decodeStorage.insert({"FIADD$M_M$R_R", (MOP_BASE*)(new COMP_FLT$M_M$R_R())});
     decodeStorage.insert({"FISUB$M_M$R_R", (MOP_BASE*)(new COMP_FLT$M_M$R_R())});
     decodeStorage.insert({"FISUBR$M_M$R_R", (MOP_BASE*)(new COMP_FLT$M_M$R_R())});
     decodeStorage.insert({"V64_FLT_ALU$M_M$R_R", (MOP_BASE*)(new COMP_FLT$M_M$R_R())});
     decodeStorage.insert({"FADD$M_M$R_M", (MOP_BASE*)(new COMP_FLT$M_M$R_M())});
     decodeStorage.insert({"FSUB$M_M$R_M", (MOP_BASE*)(new COMP_FLT$M_M$R_M())});
     decodeStorage.insert({"FSUBR$M_M$R_M", (MOP_BASE*)(new COMP_FLT$M_M$R_M())});
     decodeStorage.insert({"FADDP$M_M$R_M", (MOP_BASE*)(new COMP_FLT$M_M$R_M())});
     decodeStorage.insert({"FSUBP$M_M$R_M", (MOP_BASE*)(new COMP_FLT$M_M$R_M())});
     decodeStorage.insert({"FSUBRP$M_M$R_M", (MOP_BASE*)(new COMP_FLT$M_M$R_M())});
     decodeStorage.insert({"FIADD$M_M$R_M", (MOP_BASE*)(new COMP_FLT$M_M$R_M())});
     decodeStorage.insert({"FISUB$M_M$R_M", (MOP_BASE*)(new COMP_FLT$M_M$R_M())});
     decodeStorage.insert({"FISUBR$M_M$R_M", (MOP_BASE*)(new COMP_FLT$M_M$R_M())});
     decodeStorage.insert({"V64_FLT_ALU$M_M$R_M", (MOP_BASE*)(new COMP_FLT$M_M$R_M())});
     decodeStorage.insert({"FADD$M_M$R", (MOP_BASE*)(new COMP_FLT$M_M$R())});
     decodeStorage.insert({"FSUB$M_M$R", (MOP_BASE*)(new COMP_FLT$M_M$R())});
     decodeStorage.insert({"FSUBR$M_M$R", (MOP_BASE*)(new COMP_FLT$M_M$R())});
     decodeStorage.insert({"FADDP$M_M$R", (MOP_BASE*)(new COMP_FLT$M_M$R())});
     decodeStorage.insert({"FSUBP$M_M$R", (MOP_BASE*)(new COMP_FLT$M_M$R())});
     decodeStorage.insert({"FSUBRP$M_M$R", (MOP_BASE*)(new COMP_FLT$M_M$R())});
     decodeStorage.insert({"FIADD$M_M$R", (MOP_BASE*)(new COMP_FLT$M_M$R())});
     decodeStorage.insert({"FISUB$M_M$R", (MOP_BASE*)(new COMP_FLT$M_M$R())});
     decodeStorage.insert({"FISUBR$M_M$R", (MOP_BASE*)(new COMP_FLT$M_M$R())});
     decodeStorage.insert({"V64_FLT_ALU$M_M$R", (MOP_BASE*)(new COMP_FLT$M_M$R())});
     decodeStorage.insert({"FADD$M_M$M_R", (MOP_BASE*)(new COMP_FLT$M_M$M_R())});
     decodeStorage.insert({"FSUB$M_M$M_R", (MOP_BASE*)(new COMP_FLT$M_M$M_R())});
     decodeStorage.insert({"FSUBR$M_M$M_R", (MOP_BASE*)(new COMP_FLT$M_M$M_R())});
     decodeStorage.insert({"FADDP$M_M$M_R", (MOP_BASE*)(new COMP_FLT$M_M$M_R())});
     decodeStorage.insert({"FSUBP$M_M$M_R", (MOP_BASE*)(new COMP_FLT$M_M$M_R())});
     decodeStorage.insert({"FSUBRP$M_M$M_R", (MOP_BASE*)(new COMP_FLT$M_M$M_R())});
     decodeStorage.insert({"FIADD$M_M$M_R", (MOP_BASE*)(new COMP_FLT$M_M$M_R())});
     decodeStorage.insert({"FISUB$M_M$M_R", (MOP_BASE*)(new COMP_FLT$M_M$M_R())});
     decodeStorage.insert({"FISUBR$M_M$M_R", (MOP_BASE*)(new COMP_FLT$M_M$M_R())});
     decodeStorage.insert({"V64_FLT_ALU$M_M$M_R", (MOP_BASE*)(new COMP_FLT$M_M$M_R())});
     decodeStorage.insert({"FADD$M_M$M_M", (MOP_BASE*)(new COMP_FLT$M_M$M_M())});
     decodeStorage.insert({"FSUB$M_M$M_M", (MOP_BASE*)(new COMP_FLT$M_M$M_M())});
     decodeStorage.insert({"FSUBR$M_M$M_M", (MOP_BASE*)(new COMP_FLT$M_M$M_M())});
     decodeStorage.insert({"FADDP$M_M$M_M", (MOP_BASE*)(new COMP_FLT$M_M$M_M())});
     decodeStorage.insert({"FSUBP$M_M$M_M", (MOP_BASE*)(new COMP_FLT$M_M$M_M())});
     decodeStorage.insert({"FSUBRP$M_M$M_M", (MOP_BASE*)(new COMP_FLT$M_M$M_M())});
     decodeStorage.insert({"FIADD$M_M$M_M", (MOP_BASE*)(new COMP_FLT$M_M$M_M())});
     decodeStorage.insert({"FISUB$M_M$M_M", (MOP_BASE*)(new COMP_FLT$M_M$M_M())});
     decodeStorage.insert({"FISUBR$M_M$M_M", (MOP_BASE*)(new COMP_FLT$M_M$M_M())});
     decodeStorage.insert({"V64_FLT_ALU$M_M$M_M", (MOP_BASE*)(new COMP_FLT$M_M$M_M())});
     decodeStorage.insert({"FADD$M_M$M", (MOP_BASE*)(new COMP_FLT$M_M$M())});
     decodeStorage.insert({"FSUB$M_M$M", (MOP_BASE*)(new COMP_FLT$M_M$M())});
     decodeStorage.insert({"FSUBR$M_M$M", (MOP_BASE*)(new COMP_FLT$M_M$M())});
     decodeStorage.insert({"FADDP$M_M$M", (MOP_BASE*)(new COMP_FLT$M_M$M())});
     decodeStorage.insert({"FSUBP$M_M$M", (MOP_BASE*)(new COMP_FLT$M_M$M())});
     decodeStorage.insert({"FSUBRP$M_M$M", (MOP_BASE*)(new COMP_FLT$M_M$M())});
     decodeStorage.insert({"FIADD$M_M$M", (MOP_BASE*)(new COMP_FLT$M_M$M())});
     decodeStorage.insert({"FISUB$M_M$M", (MOP_BASE*)(new COMP_FLT$M_M$M())});
     decodeStorage.insert({"FISUBR$M_M$M", (MOP_BASE*)(new COMP_FLT$M_M$M())});
     decodeStorage.insert({"V64_FLT_ALU$M_M$M", (MOP_BASE*)(new COMP_FLT$M_M$M())});
     decodeStorage.insert({"FMUL$R_R$R_R", (MOP_BASE*)(new COMP_FLT_MUL$R_R$R_R())});
     decodeStorage.insert({"FMULP$R_R$R_R", (MOP_BASE*)(new COMP_FLT_MUL$R_R$R_R())});
     decodeStorage.insert({"FIMUL$R_R$R_R", (MOP_BASE*)(new COMP_FLT_MUL$R_R$R_R())});
     decodeStorage.insert({"V64_FLT_MUL$R_R$R_R", (MOP_BASE*)(new COMP_FLT_MUL$R_R$R_R())});
     decodeStorage.insert({"FMUL$R_R$R_M", (MOP_BASE*)(new COMP_FLT_MUL$R_R$R_M())});
     decodeStorage.insert({"FMULP$R_R$R_M", (MOP_BASE*)(new COMP_FLT_MUL$R_R$R_M())});
     decodeStorage.insert({"FIMUL$R_R$R_M", (MOP_BASE*)(new COMP_FLT_MUL$R_R$R_M())});
     decodeStorage.insert({"V64_FLT_MUL$R_R$R_M", (MOP_BASE*)(new COMP_FLT_MUL$R_R$R_M())});
     decodeStorage.insert({"FMUL$R_R$R", (MOP_BASE*)(new COMP_FLT_MUL$R_R$R())});
     decodeStorage.insert({"FMULP$R_R$R", (MOP_BASE*)(new COMP_FLT_MUL$R_R$R())});
     decodeStorage.insert({"FIMUL$R_R$R", (MOP_BASE*)(new COMP_FLT_MUL$R_R$R())});
     decodeStorage.insert({"V64_FLT_MUL$R_R$R", (MOP_BASE*)(new COMP_FLT_MUL$R_R$R())});
     decodeStorage.insert({"FMUL$R_R$M_R", (MOP_BASE*)(new COMP_FLT_MUL$R_R$M_R())});
     decodeStorage.insert({"FMULP$R_R$M_R", (MOP_BASE*)(new COMP_FLT_MUL$R_R$M_R())});
     decodeStorage.insert({"FIMUL$R_R$M_R", (MOP_BASE*)(new COMP_FLT_MUL$R_R$M_R())});
     decodeStorage.insert({"V64_FLT_MUL$R_R$M_R", (MOP_BASE*)(new COMP_FLT_MUL$R_R$M_R())});
     decodeStorage.insert({"FMUL$R_R$M_M", (MOP_BASE*)(new COMP_FLT_MUL$R_R$M_M())});
     decodeStorage.insert({"FMULP$R_R$M_M", (MOP_BASE*)(new COMP_FLT_MUL$R_R$M_M())});
     decodeStorage.insert({"FIMUL$R_R$M_M", (MOP_BASE*)(new COMP_FLT_MUL$R_R$M_M())});
     decodeStorage.insert({"V64_FLT_MUL$R_R$M_M", (MOP_BASE*)(new COMP_FLT_MUL$R_R$M_M())});
     decodeStorage.insert({"FMUL$R_R$M", (MOP_BASE*)(new COMP_FLT_MUL$R_R$M())});
     decodeStorage.insert({"FMULP$R_R$M", (MOP_BASE*)(new COMP_FLT_MUL$R_R$M())});
     decodeStorage.insert({"FIMUL$R_R$M", (MOP_BASE*)(new COMP_FLT_MUL$R_R$M())});
     decodeStorage.insert({"V64_FLT_MUL$R_R$M", (MOP_BASE*)(new COMP_FLT_MUL$R_R$M())});
     decodeStorage.insert({"FMUL$R_I$R_R", (MOP_BASE*)(new COMP_FLT_MUL$R_I$R_R())});
     decodeStorage.insert({"FMULP$R_I$R_R", (MOP_BASE*)(new COMP_FLT_MUL$R_I$R_R())});
     decodeStorage.insert({"FIMUL$R_I$R_R", (MOP_BASE*)(new COMP_FLT_MUL$R_I$R_R())});
     decodeStorage.insert({"V64_FLT_MUL$R_I$R_R", (MOP_BASE*)(new COMP_FLT_MUL$R_I$R_R())});
     decodeStorage.insert({"FMUL$R_I$R_M", (MOP_BASE*)(new COMP_FLT_MUL$R_I$R_M())});
     decodeStorage.insert({"FMULP$R_I$R_M", (MOP_BASE*)(new COMP_FLT_MUL$R_I$R_M())});
     decodeStorage.insert({"FIMUL$R_I$R_M", (MOP_BASE*)(new COMP_FLT_MUL$R_I$R_M())});
     decodeStorage.insert({"V64_FLT_MUL$R_I$R_M", (MOP_BASE*)(new COMP_FLT_MUL$R_I$R_M())});
     decodeStorage.insert({"FMUL$R_I$R", (MOP_BASE*)(new COMP_FLT_MUL$R_I$R())});
     decodeStorage.insert({"FMULP$R_I$R", (MOP_BASE*)(new COMP_FLT_MUL$R_I$R())});
     decodeStorage.insert({"FIMUL$R_I$R", (MOP_BASE*)(new COMP_FLT_MUL$R_I$R())});
     decodeStorage.insert({"V64_FLT_MUL$R_I$R", (MOP_BASE*)(new COMP_FLT_MUL$R_I$R())});
     decodeStorage.insert({"FMUL$R_I$M_R", (MOP_BASE*)(new COMP_FLT_MUL$R_I$M_R())});
     decodeStorage.insert({"FMULP$R_I$M_R", (MOP_BASE*)(new COMP_FLT_MUL$R_I$M_R())});
     decodeStorage.insert({"FIMUL$R_I$M_R", (MOP_BASE*)(new COMP_FLT_MUL$R_I$M_R())});
     decodeStorage.insert({"V64_FLT_MUL$R_I$M_R", (MOP_BASE*)(new COMP_FLT_MUL$R_I$M_R())});
     decodeStorage.insert({"FMUL$R_I$M_M", (MOP_BASE*)(new COMP_FLT_MUL$R_I$M_M())});
     decodeStorage.insert({"FMULP$R_I$M_M", (MOP_BASE*)(new COMP_FLT_MUL$R_I$M_M())});
     decodeStorage.insert({"FIMUL$R_I$M_M", (MOP_BASE*)(new COMP_FLT_MUL$R_I$M_M())});
     decodeStorage.insert({"V64_FLT_MUL$R_I$M_M", (MOP_BASE*)(new COMP_FLT_MUL$R_I$M_M())});
     decodeStorage.insert({"FMUL$R_I$M", (MOP_BASE*)(new COMP_FLT_MUL$R_I$M())});
     decodeStorage.insert({"FMULP$R_I$M", (MOP_BASE*)(new COMP_FLT_MUL$R_I$M())});
     decodeStorage.insert({"FIMUL$R_I$M", (MOP_BASE*)(new COMP_FLT_MUL$R_I$M())});
     decodeStorage.insert({"V64_FLT_MUL$R_I$M", (MOP_BASE*)(new COMP_FLT_MUL$R_I$M())});
     decodeStorage.insert({"FMUL$R_M$R_R", (MOP_BASE*)(new COMP_FLT_MUL$R_M$R_R())});
     decodeStorage.insert({"FMULP$R_M$R_R", (MOP_BASE*)(new COMP_FLT_MUL$R_M$R_R())});
     decodeStorage.insert({"FIMUL$R_M$R_R", (MOP_BASE*)(new COMP_FLT_MUL$R_M$R_R())});
     decodeStorage.insert({"V64_FLT_MUL$R_M$R_R", (MOP_BASE*)(new COMP_FLT_MUL$R_M$R_R())});
     decodeStorage.insert({"FMUL$R_M$R_M", (MOP_BASE*)(new COMP_FLT_MUL$R_M$R_M())});
     decodeStorage.insert({"FMULP$R_M$R_M", (MOP_BASE*)(new COMP_FLT_MUL$R_M$R_M())});
     decodeStorage.insert({"FIMUL$R_M$R_M", (MOP_BASE*)(new COMP_FLT_MUL$R_M$R_M())});
     decodeStorage.insert({"V64_FLT_MUL$R_M$R_M", (MOP_BASE*)(new COMP_FLT_MUL$R_M$R_M())});
     decodeStorage.insert({"FMUL$R_M$R", (MOP_BASE*)(new COMP_FLT_MUL$R_M$R())});
     decodeStorage.insert({"FMULP$R_M$R", (MOP_BASE*)(new COMP_FLT_MUL$R_M$R())});
     decodeStorage.insert({"FIMUL$R_M$R", (MOP_BASE*)(new COMP_FLT_MUL$R_M$R())});
     decodeStorage.insert({"V64_FLT_MUL$R_M$R", (MOP_BASE*)(new COMP_FLT_MUL$R_M$R())});
     decodeStorage.insert({"FMUL$R_M$M_R", (MOP_BASE*)(new COMP_FLT_MUL$R_M$M_R())});
     decodeStorage.insert({"FMULP$R_M$M_R", (MOP_BASE*)(new COMP_FLT_MUL$R_M$M_R())});
     decodeStorage.insert({"FIMUL$R_M$M_R", (MOP_BASE*)(new COMP_FLT_MUL$R_M$M_R())});
     decodeStorage.insert({"V64_FLT_MUL$R_M$M_R", (MOP_BASE*)(new COMP_FLT_MUL$R_M$M_R())});
     decodeStorage.insert({"FMUL$R_M$M_M", (MOP_BASE*)(new COMP_FLT_MUL$R_M$M_M())});
     decodeStorage.insert({"FMULP$R_M$M_M", (MOP_BASE*)(new COMP_FLT_MUL$R_M$M_M())});
     decodeStorage.insert({"FIMUL$R_M$M_M", (MOP_BASE*)(new COMP_FLT_MUL$R_M$M_M())});
     decodeStorage.insert({"V64_FLT_MUL$R_M$M_M", (MOP_BASE*)(new COMP_FLT_MUL$R_M$M_M())});
     decodeStorage.insert({"FMUL$R_M$M", (MOP_BASE*)(new COMP_FLT_MUL$R_M$M())});
     decodeStorage.insert({"FMULP$R_M$M", (MOP_BASE*)(new COMP_FLT_MUL$R_M$M())});
     decodeStorage.insert({"FIMUL$R_M$M", (MOP_BASE*)(new COMP_FLT_MUL$R_M$M())});
     decodeStorage.insert({"V64_FLT_MUL$R_M$M", (MOP_BASE*)(new COMP_FLT_MUL$R_M$M())});
     decodeStorage.insert({"FMUL$I_R$R_R", (MOP_BASE*)(new COMP_FLT_MUL$I_R$R_R())});
     decodeStorage.insert({"FMULP$I_R$R_R", (MOP_BASE*)(new COMP_FLT_MUL$I_R$R_R())});
     decodeStorage.insert({"FIMUL$I_R$R_R", (MOP_BASE*)(new COMP_FLT_MUL$I_R$R_R())});
     decodeStorage.insert({"V64_FLT_MUL$I_R$R_R", (MOP_BASE*)(new COMP_FLT_MUL$I_R$R_R())});
     decodeStorage.insert({"FMUL$I_R$R_M", (MOP_BASE*)(new COMP_FLT_MUL$I_R$R_M())});
     decodeStorage.insert({"FMULP$I_R$R_M", (MOP_BASE*)(new COMP_FLT_MUL$I_R$R_M())});
     decodeStorage.insert({"FIMUL$I_R$R_M", (MOP_BASE*)(new COMP_FLT_MUL$I_R$R_M())});
     decodeStorage.insert({"V64_FLT_MUL$I_R$R_M", (MOP_BASE*)(new COMP_FLT_MUL$I_R$R_M())});
     decodeStorage.insert({"FMUL$I_R$R", (MOP_BASE*)(new COMP_FLT_MUL$I_R$R())});
     decodeStorage.insert({"FMULP$I_R$R", (MOP_BASE*)(new COMP_FLT_MUL$I_R$R())});
     decodeStorage.insert({"FIMUL$I_R$R", (MOP_BASE*)(new COMP_FLT_MUL$I_R$R())});
     decodeStorage.insert({"V64_FLT_MUL$I_R$R", (MOP_BASE*)(new COMP_FLT_MUL$I_R$R())});
     decodeStorage.insert({"FMUL$I_R$M_R", (MOP_BASE*)(new COMP_FLT_MUL$I_R$M_R())});
     decodeStorage.insert({"FMULP$I_R$M_R", (MOP_BASE*)(new COMP_FLT_MUL$I_R$M_R())});
     decodeStorage.insert({"FIMUL$I_R$M_R", (MOP_BASE*)(new COMP_FLT_MUL$I_R$M_R())});
     decodeStorage.insert({"V64_FLT_MUL$I_R$M_R", (MOP_BASE*)(new COMP_FLT_MUL$I_R$M_R())});
     decodeStorage.insert({"FMUL$I_R$M_M", (MOP_BASE*)(new COMP_FLT_MUL$I_R$M_M())});
     decodeStorage.insert({"FMULP$I_R$M_M", (MOP_BASE*)(new COMP_FLT_MUL$I_R$M_M())});
     decodeStorage.insert({"FIMUL$I_R$M_M", (MOP_BASE*)(new COMP_FLT_MUL$I_R$M_M())});
     decodeStorage.insert({"V64_FLT_MUL$I_R$M_M", (MOP_BASE*)(new COMP_FLT_MUL$I_R$M_M())});
     decodeStorage.insert({"FMUL$I_R$M", (MOP_BASE*)(new COMP_FLT_MUL$I_R$M())});
     decodeStorage.insert({"FMULP$I_R$M", (MOP_BASE*)(new COMP_FLT_MUL$I_R$M())});
     decodeStorage.insert({"FIMUL$I_R$M", (MOP_BASE*)(new COMP_FLT_MUL$I_R$M())});
     decodeStorage.insert({"V64_FLT_MUL$I_R$M", (MOP_BASE*)(new COMP_FLT_MUL$I_R$M())});
     decodeStorage.insert({"FMUL$I_I$R_R", (MOP_BASE*)(new COMP_FLT_MUL$I_I$R_R())});
     decodeStorage.insert({"FMULP$I_I$R_R", (MOP_BASE*)(new COMP_FLT_MUL$I_I$R_R())});
     decodeStorage.insert({"FIMUL$I_I$R_R", (MOP_BASE*)(new COMP_FLT_MUL$I_I$R_R())});
     decodeStorage.insert({"V64_FLT_MUL$I_I$R_R", (MOP_BASE*)(new COMP_FLT_MUL$I_I$R_R())});
     decodeStorage.insert({"FMUL$I_I$R_M", (MOP_BASE*)(new COMP_FLT_MUL$I_I$R_M())});
     decodeStorage.insert({"FMULP$I_I$R_M", (MOP_BASE*)(new COMP_FLT_MUL$I_I$R_M())});
     decodeStorage.insert({"FIMUL$I_I$R_M", (MOP_BASE*)(new COMP_FLT_MUL$I_I$R_M())});
     decodeStorage.insert({"V64_FLT_MUL$I_I$R_M", (MOP_BASE*)(new COMP_FLT_MUL$I_I$R_M())});
     decodeStorage.insert({"FMUL$I_I$R", (MOP_BASE*)(new COMP_FLT_MUL$I_I$R())});
     decodeStorage.insert({"FMULP$I_I$R", (MOP_BASE*)(new COMP_FLT_MUL$I_I$R())});
     decodeStorage.insert({"FIMUL$I_I$R", (MOP_BASE*)(new COMP_FLT_MUL$I_I$R())});
     decodeStorage.insert({"V64_FLT_MUL$I_I$R", (MOP_BASE*)(new COMP_FLT_MUL$I_I$R())});
     decodeStorage.insert({"FMUL$I_I$M_R", (MOP_BASE*)(new COMP_FLT_MUL$I_I$M_R())});
     decodeStorage.insert({"FMULP$I_I$M_R", (MOP_BASE*)(new COMP_FLT_MUL$I_I$M_R())});
     decodeStorage.insert({"FIMUL$I_I$M_R", (MOP_BASE*)(new COMP_FLT_MUL$I_I$M_R())});
     decodeStorage.insert({"V64_FLT_MUL$I_I$M_R", (MOP_BASE*)(new COMP_FLT_MUL$I_I$M_R())});
     decodeStorage.insert({"FMUL$I_I$M_M", (MOP_BASE*)(new COMP_FLT_MUL$I_I$M_M())});
     decodeStorage.insert({"FMULP$I_I$M_M", (MOP_BASE*)(new COMP_FLT_MUL$I_I$M_M())});
     decodeStorage.insert({"FIMUL$I_I$M_M", (MOP_BASE*)(new COMP_FLT_MUL$I_I$M_M())});
     decodeStorage.insert({"V64_FLT_MUL$I_I$M_M", (MOP_BASE*)(new COMP_FLT_MUL$I_I$M_M())});
     decodeStorage.insert({"FMUL$I_I$M", (MOP_BASE*)(new COMP_FLT_MUL$I_I$M())});
     decodeStorage.insert({"FMULP$I_I$M", (MOP_BASE*)(new COMP_FLT_MUL$I_I$M())});
     decodeStorage.insert({"FIMUL$I_I$M", (MOP_BASE*)(new COMP_FLT_MUL$I_I$M())});
     decodeStorage.insert({"V64_FLT_MUL$I_I$M", (MOP_BASE*)(new COMP_FLT_MUL$I_I$M())});
     decodeStorage.insert({"FMUL$I_M$R_R", (MOP_BASE*)(new COMP_FLT_MUL$I_M$R_R())});
     decodeStorage.insert({"FMULP$I_M$R_R", (MOP_BASE*)(new COMP_FLT_MUL$I_M$R_R())});
     decodeStorage.insert({"FIMUL$I_M$R_R", (MOP_BASE*)(new COMP_FLT_MUL$I_M$R_R())});
     decodeStorage.insert({"V64_FLT_MUL$I_M$R_R", (MOP_BASE*)(new COMP_FLT_MUL$I_M$R_R())});
     decodeStorage.insert({"FMUL$I_M$R_M", (MOP_BASE*)(new COMP_FLT_MUL$I_M$R_M())});
     decodeStorage.insert({"FMULP$I_M$R_M", (MOP_BASE*)(new COMP_FLT_MUL$I_M$R_M())});
     decodeStorage.insert({"FIMUL$I_M$R_M", (MOP_BASE*)(new COMP_FLT_MUL$I_M$R_M())});
     decodeStorage.insert({"V64_FLT_MUL$I_M$R_M", (MOP_BASE*)(new COMP_FLT_MUL$I_M$R_M())});
     decodeStorage.insert({"FMUL$I_M$R", (MOP_BASE*)(new COMP_FLT_MUL$I_M$R())});
     decodeStorage.insert({"FMULP$I_M$R", (MOP_BASE*)(new COMP_FLT_MUL$I_M$R())});
     decodeStorage.insert({"FIMUL$I_M$R", (MOP_BASE*)(new COMP_FLT_MUL$I_M$R())});
     decodeStorage.insert({"V64_FLT_MUL$I_M$R", (MOP_BASE*)(new COMP_FLT_MUL$I_M$R())});
     decodeStorage.insert({"FMUL$I_M$M_R", (MOP_BASE*)(new COMP_FLT_MUL$I_M$M_R())});
     decodeStorage.insert({"FMULP$I_M$M_R", (MOP_BASE*)(new COMP_FLT_MUL$I_M$M_R())});
     decodeStorage.insert({"FIMUL$I_M$M_R", (MOP_BASE*)(new COMP_FLT_MUL$I_M$M_R())});
     decodeStorage.insert({"V64_FLT_MUL$I_M$M_R", (MOP_BASE*)(new COMP_FLT_MUL$I_M$M_R())});
     decodeStorage.insert({"FMUL$I_M$M_M", (MOP_BASE*)(new COMP_FLT_MUL$I_M$M_M())});
     decodeStorage.insert({"FMULP$I_M$M_M", (MOP_BASE*)(new COMP_FLT_MUL$I_M$M_M())});
     decodeStorage.insert({"FIMUL$I_M$M_M", (MOP_BASE*)(new COMP_FLT_MUL$I_M$M_M())});
     decodeStorage.insert({"V64_FLT_MUL$I_M$M_M", (MOP_BASE*)(new COMP_FLT_MUL$I_M$M_M())});
     decodeStorage.insert({"FMUL$I_M$M", (MOP_BASE*)(new COMP_FLT_MUL$I_M$M())});
     decodeStorage.insert({"FMULP$I_M$M", (MOP_BASE*)(new COMP_FLT_MUL$I_M$M())});
     decodeStorage.insert({"FIMUL$I_M$M", (MOP_BASE*)(new COMP_FLT_MUL$I_M$M())});
     decodeStorage.insert({"V64_FLT_MUL$I_M$M", (MOP_BASE*)(new COMP_FLT_MUL$I_M$M())});
     decodeStorage.insert({"FMUL$M_R$R_R", (MOP_BASE*)(new COMP_FLT_MUL$M_R$R_R())});
     decodeStorage.insert({"FMULP$M_R$R_R", (MOP_BASE*)(new COMP_FLT_MUL$M_R$R_R())});
     decodeStorage.insert({"FIMUL$M_R$R_R", (MOP_BASE*)(new COMP_FLT_MUL$M_R$R_R())});
     decodeStorage.insert({"V64_FLT_MUL$M_R$R_R", (MOP_BASE*)(new COMP_FLT_MUL$M_R$R_R())});
     decodeStorage.insert({"FMUL$M_R$R_M", (MOP_BASE*)(new COMP_FLT_MUL$M_R$R_M())});
     decodeStorage.insert({"FMULP$M_R$R_M", (MOP_BASE*)(new COMP_FLT_MUL$M_R$R_M())});
     decodeStorage.insert({"FIMUL$M_R$R_M", (MOP_BASE*)(new COMP_FLT_MUL$M_R$R_M())});
     decodeStorage.insert({"V64_FLT_MUL$M_R$R_M", (MOP_BASE*)(new COMP_FLT_MUL$M_R$R_M())});
     decodeStorage.insert({"FMUL$M_R$R", (MOP_BASE*)(new COMP_FLT_MUL$M_R$R())});
     decodeStorage.insert({"FMULP$M_R$R", (MOP_BASE*)(new COMP_FLT_MUL$M_R$R())});
     decodeStorage.insert({"FIMUL$M_R$R", (MOP_BASE*)(new COMP_FLT_MUL$M_R$R())});
     decodeStorage.insert({"V64_FLT_MUL$M_R$R", (MOP_BASE*)(new COMP_FLT_MUL$M_R$R())});
     decodeStorage.insert({"FMUL$M_R$M_R", (MOP_BASE*)(new COMP_FLT_MUL$M_R$M_R())});
     decodeStorage.insert({"FMULP$M_R$M_R", (MOP_BASE*)(new COMP_FLT_MUL$M_R$M_R())});
     decodeStorage.insert({"FIMUL$M_R$M_R", (MOP_BASE*)(new COMP_FLT_MUL$M_R$M_R())});
     decodeStorage.insert({"V64_FLT_MUL$M_R$M_R", (MOP_BASE*)(new COMP_FLT_MUL$M_R$M_R())});
     decodeStorage.insert({"FMUL$M_R$M_M", (MOP_BASE*)(new COMP_FLT_MUL$M_R$M_M())});
     decodeStorage.insert({"FMULP$M_R$M_M", (MOP_BASE*)(new COMP_FLT_MUL$M_R$M_M())});
     decodeStorage.insert({"FIMUL$M_R$M_M", (MOP_BASE*)(new COMP_FLT_MUL$M_R$M_M())});
     decodeStorage.insert({"V64_FLT_MUL$M_R$M_M", (MOP_BASE*)(new COMP_FLT_MUL$M_R$M_M())});
     decodeStorage.insert({"FMUL$M_R$M", (MOP_BASE*)(new COMP_FLT_MUL$M_R$M())});
     decodeStorage.insert({"FMULP$M_R$M", (MOP_BASE*)(new COMP_FLT_MUL$M_R$M())});
     decodeStorage.insert({"FIMUL$M_R$M", (MOP_BASE*)(new COMP_FLT_MUL$M_R$M())});
     decodeStorage.insert({"V64_FLT_MUL$M_R$M", (MOP_BASE*)(new COMP_FLT_MUL$M_R$M())});
     decodeStorage.insert({"FMUL$M_I$R_R", (MOP_BASE*)(new COMP_FLT_MUL$M_I$R_R())});
     decodeStorage.insert({"FMULP$M_I$R_R", (MOP_BASE*)(new COMP_FLT_MUL$M_I$R_R())});
     decodeStorage.insert({"FIMUL$M_I$R_R", (MOP_BASE*)(new COMP_FLT_MUL$M_I$R_R())});
     decodeStorage.insert({"V64_FLT_MUL$M_I$R_R", (MOP_BASE*)(new COMP_FLT_MUL$M_I$R_R())});
     decodeStorage.insert({"FMUL$M_I$R_M", (MOP_BASE*)(new COMP_FLT_MUL$M_I$R_M())});
     decodeStorage.insert({"FMULP$M_I$R_M", (MOP_BASE*)(new COMP_FLT_MUL$M_I$R_M())});
     decodeStorage.insert({"FIMUL$M_I$R_M", (MOP_BASE*)(new COMP_FLT_MUL$M_I$R_M())});
     decodeStorage.insert({"V64_FLT_MUL$M_I$R_M", (MOP_BASE*)(new COMP_FLT_MUL$M_I$R_M())});
     decodeStorage.insert({"FMUL$M_I$R", (MOP_BASE*)(new COMP_FLT_MUL$M_I$R())});
     decodeStorage.insert({"FMULP$M_I$R", (MOP_BASE*)(new COMP_FLT_MUL$M_I$R())});
     decodeStorage.insert({"FIMUL$M_I$R", (MOP_BASE*)(new COMP_FLT_MUL$M_I$R())});
     decodeStorage.insert({"V64_FLT_MUL$M_I$R", (MOP_BASE*)(new COMP_FLT_MUL$M_I$R())});
     decodeStorage.insert({"FMUL$M_I$M_R", (MOP_BASE*)(new COMP_FLT_MUL$M_I$M_R())});
     decodeStorage.insert({"FMULP$M_I$M_R", (MOP_BASE*)(new COMP_FLT_MUL$M_I$M_R())});
     decodeStorage.insert({"FIMUL$M_I$M_R", (MOP_BASE*)(new COMP_FLT_MUL$M_I$M_R())});
     decodeStorage.insert({"V64_FLT_MUL$M_I$M_R", (MOP_BASE*)(new COMP_FLT_MUL$M_I$M_R())});
     decodeStorage.insert({"FMUL$M_I$M_M", (MOP_BASE*)(new COMP_FLT_MUL$M_I$M_M())});
     decodeStorage.insert({"FMULP$M_I$M_M", (MOP_BASE*)(new COMP_FLT_MUL$M_I$M_M())});
     decodeStorage.insert({"FIMUL$M_I$M_M", (MOP_BASE*)(new COMP_FLT_MUL$M_I$M_M())});
     decodeStorage.insert({"V64_FLT_MUL$M_I$M_M", (MOP_BASE*)(new COMP_FLT_MUL$M_I$M_M())});
     decodeStorage.insert({"FMUL$M_I$M", (MOP_BASE*)(new COMP_FLT_MUL$M_I$M())});
     decodeStorage.insert({"FMULP$M_I$M", (MOP_BASE*)(new COMP_FLT_MUL$M_I$M())});
     decodeStorage.insert({"FIMUL$M_I$M", (MOP_BASE*)(new COMP_FLT_MUL$M_I$M())});
     decodeStorage.insert({"V64_FLT_MUL$M_I$M", (MOP_BASE*)(new COMP_FLT_MUL$M_I$M())});
     decodeStorage.insert({"FMUL$M_M$R_R", (MOP_BASE*)(new COMP_FLT_MUL$M_M$R_R())});
     decodeStorage.insert({"FMULP$M_M$R_R", (MOP_BASE*)(new COMP_FLT_MUL$M_M$R_R())});
     decodeStorage.insert({"FIMUL$M_M$R_R", (MOP_BASE*)(new COMP_FLT_MUL$M_M$R_R())});
     decodeStorage.insert({"V64_FLT_MUL$M_M$R_R", (MOP_BASE*)(new COMP_FLT_MUL$M_M$R_R())});
     decodeStorage.insert({"FMUL$M_M$R_M", (MOP_BASE*)(new COMP_FLT_MUL$M_M$R_M())});
     decodeStorage.insert({"FMULP$M_M$R_M", (MOP_BASE*)(new COMP_FLT_MUL$M_M$R_M())});
     decodeStorage.insert({"FIMUL$M_M$R_M", (MOP_BASE*)(new COMP_FLT_MUL$M_M$R_M())});
     decodeStorage.insert({"V64_FLT_MUL$M_M$R_M", (MOP_BASE*)(new COMP_FLT_MUL$M_M$R_M())});
     decodeStorage.insert({"FMUL$M_M$R", (MOP_BASE*)(new COMP_FLT_MUL$M_M$R())});
     decodeStorage.insert({"FMULP$M_M$R", (MOP_BASE*)(new COMP_FLT_MUL$M_M$R())});
     decodeStorage.insert({"FIMUL$M_M$R", (MOP_BASE*)(new COMP_FLT_MUL$M_M$R())});
     decodeStorage.insert({"V64_FLT_MUL$M_M$R", (MOP_BASE*)(new COMP_FLT_MUL$M_M$R())});
     decodeStorage.insert({"FMUL$M_M$M_R", (MOP_BASE*)(new COMP_FLT_MUL$M_M$M_R())});
     decodeStorage.insert({"FMULP$M_M$M_R", (MOP_BASE*)(new COMP_FLT_MUL$M_M$M_R())});
     decodeStorage.insert({"FIMUL$M_M$M_R", (MOP_BASE*)(new COMP_FLT_MUL$M_M$M_R())});
     decodeStorage.insert({"V64_FLT_MUL$M_M$M_R", (MOP_BASE*)(new COMP_FLT_MUL$M_M$M_R())});
     decodeStorage.insert({"FMUL$M_M$M_M", (MOP_BASE*)(new COMP_FLT_MUL$M_M$M_M())});
     decodeStorage.insert({"FMULP$M_M$M_M", (MOP_BASE*)(new COMP_FLT_MUL$M_M$M_M())});
     decodeStorage.insert({"FIMUL$M_M$M_M", (MOP_BASE*)(new COMP_FLT_MUL$M_M$M_M())});
     decodeStorage.insert({"V64_FLT_MUL$M_M$M_M", (MOP_BASE*)(new COMP_FLT_MUL$M_M$M_M())});
     decodeStorage.insert({"FMUL$M_M$M", (MOP_BASE*)(new COMP_FLT_MUL$M_M$M())});
     decodeStorage.insert({"FMULP$M_M$M", (MOP_BASE*)(new COMP_FLT_MUL$M_M$M())});
     decodeStorage.insert({"FIMUL$M_M$M", (MOP_BASE*)(new COMP_FLT_MUL$M_M$M())});
     decodeStorage.insert({"V64_FLT_MUL$M_M$M", (MOP_BASE*)(new COMP_FLT_MUL$M_M$M())});
     decodeStorage.insert({"FDIV$R_R$R_R", (MOP_BASE*)(new COMP_FLT_DIV$R_R$R_R())});
     decodeStorage.insert({"FDIVR$R_R$R_R", (MOP_BASE*)(new COMP_FLT_DIV$R_R$R_R())});
     decodeStorage.insert({"FIDIV$R_R$R_R", (MOP_BASE*)(new COMP_FLT_DIV$R_R$R_R())});
     decodeStorage.insert({"V64_FLT_DIV$R_R$R_R", (MOP_BASE*)(new COMP_FLT_DIV$R_R$R_R())});
     decodeStorage.insert({"FDIV$R_R$R_M", (MOP_BASE*)(new COMP_FLT_DIV$R_R$R_M())});
     decodeStorage.insert({"FDIVR$R_R$R_M", (MOP_BASE*)(new COMP_FLT_DIV$R_R$R_M())});
     decodeStorage.insert({"FIDIV$R_R$R_M", (MOP_BASE*)(new COMP_FLT_DIV$R_R$R_M())});
     decodeStorage.insert({"V64_FLT_DIV$R_R$R_M", (MOP_BASE*)(new COMP_FLT_DIV$R_R$R_M())});
     decodeStorage.insert({"FDIV$R_R$R", (MOP_BASE*)(new COMP_FLT_DIV$R_R$R())});
     decodeStorage.insert({"FDIVR$R_R$R", (MOP_BASE*)(new COMP_FLT_DIV$R_R$R())});
     decodeStorage.insert({"FIDIV$R_R$R", (MOP_BASE*)(new COMP_FLT_DIV$R_R$R())});
     decodeStorage.insert({"V64_FLT_DIV$R_R$R", (MOP_BASE*)(new COMP_FLT_DIV$R_R$R())});
     decodeStorage.insert({"FDIV$R_R$M_R", (MOP_BASE*)(new COMP_FLT_DIV$R_R$M_R())});
     decodeStorage.insert({"FDIVR$R_R$M_R", (MOP_BASE*)(new COMP_FLT_DIV$R_R$M_R())});
     decodeStorage.insert({"FIDIV$R_R$M_R", (MOP_BASE*)(new COMP_FLT_DIV$R_R$M_R())});
     decodeStorage.insert({"V64_FLT_DIV$R_R$M_R", (MOP_BASE*)(new COMP_FLT_DIV$R_R$M_R())});
     decodeStorage.insert({"FDIV$R_R$M_M", (MOP_BASE*)(new COMP_FLT_DIV$R_R$M_M())});
     decodeStorage.insert({"FDIVR$R_R$M_M", (MOP_BASE*)(new COMP_FLT_DIV$R_R$M_M())});
     decodeStorage.insert({"FIDIV$R_R$M_M", (MOP_BASE*)(new COMP_FLT_DIV$R_R$M_M())});
     decodeStorage.insert({"V64_FLT_DIV$R_R$M_M", (MOP_BASE*)(new COMP_FLT_DIV$R_R$M_M())});
     decodeStorage.insert({"FDIV$R_R$M", (MOP_BASE*)(new COMP_FLT_DIV$R_R$M())});
     decodeStorage.insert({"FDIVR$R_R$M", (MOP_BASE*)(new COMP_FLT_DIV$R_R$M())});
     decodeStorage.insert({"FIDIV$R_R$M", (MOP_BASE*)(new COMP_FLT_DIV$R_R$M())});
     decodeStorage.insert({"V64_FLT_DIV$R_R$M", (MOP_BASE*)(new COMP_FLT_DIV$R_R$M())});
     decodeStorage.insert({"FDIV$R_I$R_R", (MOP_BASE*)(new COMP_FLT_DIV$R_I$R_R())});
     decodeStorage.insert({"FDIVR$R_I$R_R", (MOP_BASE*)(new COMP_FLT_DIV$R_I$R_R())});
     decodeStorage.insert({"FIDIV$R_I$R_R", (MOP_BASE*)(new COMP_FLT_DIV$R_I$R_R())});
     decodeStorage.insert({"V64_FLT_DIV$R_I$R_R", (MOP_BASE*)(new COMP_FLT_DIV$R_I$R_R())});
     decodeStorage.insert({"FDIV$R_I$R_M", (MOP_BASE*)(new COMP_FLT_DIV$R_I$R_M())});
     decodeStorage.insert({"FDIVR$R_I$R_M", (MOP_BASE*)(new COMP_FLT_DIV$R_I$R_M())});
     decodeStorage.insert({"FIDIV$R_I$R_M", (MOP_BASE*)(new COMP_FLT_DIV$R_I$R_M())});
     decodeStorage.insert({"V64_FLT_DIV$R_I$R_M", (MOP_BASE*)(new COMP_FLT_DIV$R_I$R_M())});
     decodeStorage.insert({"FDIV$R_I$R", (MOP_BASE*)(new COMP_FLT_DIV$R_I$R())});
     decodeStorage.insert({"FDIVR$R_I$R", (MOP_BASE*)(new COMP_FLT_DIV$R_I$R())});
     decodeStorage.insert({"FIDIV$R_I$R", (MOP_BASE*)(new COMP_FLT_DIV$R_I$R())});
     decodeStorage.insert({"V64_FLT_DIV$R_I$R", (MOP_BASE*)(new COMP_FLT_DIV$R_I$R())});
     decodeStorage.insert({"FDIV$R_I$M_R", (MOP_BASE*)(new COMP_FLT_DIV$R_I$M_R())});
     decodeStorage.insert({"FDIVR$R_I$M_R", (MOP_BASE*)(new COMP_FLT_DIV$R_I$M_R())});
     decodeStorage.insert({"FIDIV$R_I$M_R", (MOP_BASE*)(new COMP_FLT_DIV$R_I$M_R())});
     decodeStorage.insert({"V64_FLT_DIV$R_I$M_R", (MOP_BASE*)(new COMP_FLT_DIV$R_I$M_R())});
     decodeStorage.insert({"FDIV$R_I$M_M", (MOP_BASE*)(new COMP_FLT_DIV$R_I$M_M())});
     decodeStorage.insert({"FDIVR$R_I$M_M", (MOP_BASE*)(new COMP_FLT_DIV$R_I$M_M())});
     decodeStorage.insert({"FIDIV$R_I$M_M", (MOP_BASE*)(new COMP_FLT_DIV$R_I$M_M())});
     decodeStorage.insert({"V64_FLT_DIV$R_I$M_M", (MOP_BASE*)(new COMP_FLT_DIV$R_I$M_M())});
     decodeStorage.insert({"FDIV$R_I$M", (MOP_BASE*)(new COMP_FLT_DIV$R_I$M())});
     decodeStorage.insert({"FDIVR$R_I$M", (MOP_BASE*)(new COMP_FLT_DIV$R_I$M())});
     decodeStorage.insert({"FIDIV$R_I$M", (MOP_BASE*)(new COMP_FLT_DIV$R_I$M())});
     decodeStorage.insert({"V64_FLT_DIV$R_I$M", (MOP_BASE*)(new COMP_FLT_DIV$R_I$M())});
     decodeStorage.insert({"FDIV$R_M$R_R", (MOP_BASE*)(new COMP_FLT_DIV$R_M$R_R())});
     decodeStorage.insert({"FDIVR$R_M$R_R", (MOP_BASE*)(new COMP_FLT_DIV$R_M$R_R())});
     decodeStorage.insert({"FIDIV$R_M$R_R", (MOP_BASE*)(new COMP_FLT_DIV$R_M$R_R())});
     decodeStorage.insert({"V64_FLT_DIV$R_M$R_R", (MOP_BASE*)(new COMP_FLT_DIV$R_M$R_R())});
     decodeStorage.insert({"FDIV$R_M$R_M", (MOP_BASE*)(new COMP_FLT_DIV$R_M$R_M())});
     decodeStorage.insert({"FDIVR$R_M$R_M", (MOP_BASE*)(new COMP_FLT_DIV$R_M$R_M())});
     decodeStorage.insert({"FIDIV$R_M$R_M", (MOP_BASE*)(new COMP_FLT_DIV$R_M$R_M())});
     decodeStorage.insert({"V64_FLT_DIV$R_M$R_M", (MOP_BASE*)(new COMP_FLT_DIV$R_M$R_M())});
     decodeStorage.insert({"FDIV$R_M$R", (MOP_BASE*)(new COMP_FLT_DIV$R_M$R())});
     decodeStorage.insert({"FDIVR$R_M$R", (MOP_BASE*)(new COMP_FLT_DIV$R_M$R())});
     decodeStorage.insert({"FIDIV$R_M$R", (MOP_BASE*)(new COMP_FLT_DIV$R_M$R())});
     decodeStorage.insert({"V64_FLT_DIV$R_M$R", (MOP_BASE*)(new COMP_FLT_DIV$R_M$R())});
     decodeStorage.insert({"FDIV$R_M$M_R", (MOP_BASE*)(new COMP_FLT_DIV$R_M$M_R())});
     decodeStorage.insert({"FDIVR$R_M$M_R", (MOP_BASE*)(new COMP_FLT_DIV$R_M$M_R())});
     decodeStorage.insert({"FIDIV$R_M$M_R", (MOP_BASE*)(new COMP_FLT_DIV$R_M$M_R())});
     decodeStorage.insert({"V64_FLT_DIV$R_M$M_R", (MOP_BASE*)(new COMP_FLT_DIV$R_M$M_R())});
     decodeStorage.insert({"FDIV$R_M$M_M", (MOP_BASE*)(new COMP_FLT_DIV$R_M$M_M())});
     decodeStorage.insert({"FDIVR$R_M$M_M", (MOP_BASE*)(new COMP_FLT_DIV$R_M$M_M())});
     decodeStorage.insert({"FIDIV$R_M$M_M", (MOP_BASE*)(new COMP_FLT_DIV$R_M$M_M())});
     decodeStorage.insert({"V64_FLT_DIV$R_M$M_M", (MOP_BASE*)(new COMP_FLT_DIV$R_M$M_M())});
     decodeStorage.insert({"FDIV$R_M$M", (MOP_BASE*)(new COMP_FLT_DIV$R_M$M())});
     decodeStorage.insert({"FDIVR$R_M$M", (MOP_BASE*)(new COMP_FLT_DIV$R_M$M())});
     decodeStorage.insert({"FIDIV$R_M$M", (MOP_BASE*)(new COMP_FLT_DIV$R_M$M())});
     decodeStorage.insert({"V64_FLT_DIV$R_M$M", (MOP_BASE*)(new COMP_FLT_DIV$R_M$M())});
     decodeStorage.insert({"FDIV$I_R$R_R", (MOP_BASE*)(new COMP_FLT_DIV$I_R$R_R())});
     decodeStorage.insert({"FDIVR$I_R$R_R", (MOP_BASE*)(new COMP_FLT_DIV$I_R$R_R())});
     decodeStorage.insert({"FIDIV$I_R$R_R", (MOP_BASE*)(new COMP_FLT_DIV$I_R$R_R())});
     decodeStorage.insert({"V64_FLT_DIV$I_R$R_R", (MOP_BASE*)(new COMP_FLT_DIV$I_R$R_R())});
     decodeStorage.insert({"FDIV$I_R$R_M", (MOP_BASE*)(new COMP_FLT_DIV$I_R$R_M())});
     decodeStorage.insert({"FDIVR$I_R$R_M", (MOP_BASE*)(new COMP_FLT_DIV$I_R$R_M())});
     decodeStorage.insert({"FIDIV$I_R$R_M", (MOP_BASE*)(new COMP_FLT_DIV$I_R$R_M())});
     decodeStorage.insert({"V64_FLT_DIV$I_R$R_M", (MOP_BASE*)(new COMP_FLT_DIV$I_R$R_M())});
     decodeStorage.insert({"FDIV$I_R$R", (MOP_BASE*)(new COMP_FLT_DIV$I_R$R())});
     decodeStorage.insert({"FDIVR$I_R$R", (MOP_BASE*)(new COMP_FLT_DIV$I_R$R())});
     decodeStorage.insert({"FIDIV$I_R$R", (MOP_BASE*)(new COMP_FLT_DIV$I_R$R())});
     decodeStorage.insert({"V64_FLT_DIV$I_R$R", (MOP_BASE*)(new COMP_FLT_DIV$I_R$R())});
     decodeStorage.insert({"FDIV$I_R$M_R", (MOP_BASE*)(new COMP_FLT_DIV$I_R$M_R())});
     decodeStorage.insert({"FDIVR$I_R$M_R", (MOP_BASE*)(new COMP_FLT_DIV$I_R$M_R())});
     decodeStorage.insert({"FIDIV$I_R$M_R", (MOP_BASE*)(new COMP_FLT_DIV$I_R$M_R())});
     decodeStorage.insert({"V64_FLT_DIV$I_R$M_R", (MOP_BASE*)(new COMP_FLT_DIV$I_R$M_R())});
     decodeStorage.insert({"FDIV$I_R$M_M", (MOP_BASE*)(new COMP_FLT_DIV$I_R$M_M())});
     decodeStorage.insert({"FDIVR$I_R$M_M", (MOP_BASE*)(new COMP_FLT_DIV$I_R$M_M())});
     decodeStorage.insert({"FIDIV$I_R$M_M", (MOP_BASE*)(new COMP_FLT_DIV$I_R$M_M())});
     decodeStorage.insert({"V64_FLT_DIV$I_R$M_M", (MOP_BASE*)(new COMP_FLT_DIV$I_R$M_M())});
     decodeStorage.insert({"FDIV$I_R$M", (MOP_BASE*)(new COMP_FLT_DIV$I_R$M())});
     decodeStorage.insert({"FDIVR$I_R$M", (MOP_BASE*)(new COMP_FLT_DIV$I_R$M())});
     decodeStorage.insert({"FIDIV$I_R$M", (MOP_BASE*)(new COMP_FLT_DIV$I_R$M())});
     decodeStorage.insert({"V64_FLT_DIV$I_R$M", (MOP_BASE*)(new COMP_FLT_DIV$I_R$M())});
     decodeStorage.insert({"FDIV$I_I$R_R", (MOP_BASE*)(new COMP_FLT_DIV$I_I$R_R())});
     decodeStorage.insert({"FDIVR$I_I$R_R", (MOP_BASE*)(new COMP_FLT_DIV$I_I$R_R())});
     decodeStorage.insert({"FIDIV$I_I$R_R", (MOP_BASE*)(new COMP_FLT_DIV$I_I$R_R())});
     decodeStorage.insert({"V64_FLT_DIV$I_I$R_R", (MOP_BASE*)(new COMP_FLT_DIV$I_I$R_R())});
     decodeStorage.insert({"FDIV$I_I$R_M", (MOP_BASE*)(new COMP_FLT_DIV$I_I$R_M())});
     decodeStorage.insert({"FDIVR$I_I$R_M", (MOP_BASE*)(new COMP_FLT_DIV$I_I$R_M())});
     decodeStorage.insert({"FIDIV$I_I$R_M", (MOP_BASE*)(new COMP_FLT_DIV$I_I$R_M())});
     decodeStorage.insert({"V64_FLT_DIV$I_I$R_M", (MOP_BASE*)(new COMP_FLT_DIV$I_I$R_M())});
     decodeStorage.insert({"FDIV$I_I$R", (MOP_BASE*)(new COMP_FLT_DIV$I_I$R())});
     decodeStorage.insert({"FDIVR$I_I$R", (MOP_BASE*)(new COMP_FLT_DIV$I_I$R())});
     decodeStorage.insert({"FIDIV$I_I$R", (MOP_BASE*)(new COMP_FLT_DIV$I_I$R())});
     decodeStorage.insert({"V64_FLT_DIV$I_I$R", (MOP_BASE*)(new COMP_FLT_DIV$I_I$R())});
     decodeStorage.insert({"FDIV$I_I$M_R", (MOP_BASE*)(new COMP_FLT_DIV$I_I$M_R())});
     decodeStorage.insert({"FDIVR$I_I$M_R", (MOP_BASE*)(new COMP_FLT_DIV$I_I$M_R())});
     decodeStorage.insert({"FIDIV$I_I$M_R", (MOP_BASE*)(new COMP_FLT_DIV$I_I$M_R())});
     decodeStorage.insert({"V64_FLT_DIV$I_I$M_R", (MOP_BASE*)(new COMP_FLT_DIV$I_I$M_R())});
     decodeStorage.insert({"FDIV$I_I$M_M", (MOP_BASE*)(new COMP_FLT_DIV$I_I$M_M())});
     decodeStorage.insert({"FDIVR$I_I$M_M", (MOP_BASE*)(new COMP_FLT_DIV$I_I$M_M())});
     decodeStorage.insert({"FIDIV$I_I$M_M", (MOP_BASE*)(new COMP_FLT_DIV$I_I$M_M())});
     decodeStorage.insert({"V64_FLT_DIV$I_I$M_M", (MOP_BASE*)(new COMP_FLT_DIV$I_I$M_M())});
     decodeStorage.insert({"FDIV$I_I$M", (MOP_BASE*)(new COMP_FLT_DIV$I_I$M())});
     decodeStorage.insert({"FDIVR$I_I$M", (MOP_BASE*)(new COMP_FLT_DIV$I_I$M())});
     decodeStorage.insert({"FIDIV$I_I$M", (MOP_BASE*)(new COMP_FLT_DIV$I_I$M())});
     decodeStorage.insert({"V64_FLT_DIV$I_I$M", (MOP_BASE*)(new COMP_FLT_DIV$I_I$M())});
     decodeStorage.insert({"FDIV$I_M$R_R", (MOP_BASE*)(new COMP_FLT_DIV$I_M$R_R())});
     decodeStorage.insert({"FDIVR$I_M$R_R", (MOP_BASE*)(new COMP_FLT_DIV$I_M$R_R())});
     decodeStorage.insert({"FIDIV$I_M$R_R", (MOP_BASE*)(new COMP_FLT_DIV$I_M$R_R())});
     decodeStorage.insert({"V64_FLT_DIV$I_M$R_R", (MOP_BASE*)(new COMP_FLT_DIV$I_M$R_R())});
     decodeStorage.insert({"FDIV$I_M$R_M", (MOP_BASE*)(new COMP_FLT_DIV$I_M$R_M())});
     decodeStorage.insert({"FDIVR$I_M$R_M", (MOP_BASE*)(new COMP_FLT_DIV$I_M$R_M())});
     decodeStorage.insert({"FIDIV$I_M$R_M", (MOP_BASE*)(new COMP_FLT_DIV$I_M$R_M())});
     decodeStorage.insert({"V64_FLT_DIV$I_M$R_M", (MOP_BASE*)(new COMP_FLT_DIV$I_M$R_M())});
     decodeStorage.insert({"FDIV$I_M$R", (MOP_BASE*)(new COMP_FLT_DIV$I_M$R())});
     decodeStorage.insert({"FDIVR$I_M$R", (MOP_BASE*)(new COMP_FLT_DIV$I_M$R())});
     decodeStorage.insert({"FIDIV$I_M$R", (MOP_BASE*)(new COMP_FLT_DIV$I_M$R())});
     decodeStorage.insert({"V64_FLT_DIV$I_M$R", (MOP_BASE*)(new COMP_FLT_DIV$I_M$R())});
     decodeStorage.insert({"FDIV$I_M$M_R", (MOP_BASE*)(new COMP_FLT_DIV$I_M$M_R())});
     decodeStorage.insert({"FDIVR$I_M$M_R", (MOP_BASE*)(new COMP_FLT_DIV$I_M$M_R())});
     decodeStorage.insert({"FIDIV$I_M$M_R", (MOP_BASE*)(new COMP_FLT_DIV$I_M$M_R())});
     decodeStorage.insert({"V64_FLT_DIV$I_M$M_R", (MOP_BASE*)(new COMP_FLT_DIV$I_M$M_R())});
     decodeStorage.insert({"FDIV$I_M$M_M", (MOP_BASE*)(new COMP_FLT_DIV$I_M$M_M())});
     decodeStorage.insert({"FDIVR$I_M$M_M", (MOP_BASE*)(new COMP_FLT_DIV$I_M$M_M())});
     decodeStorage.insert({"FIDIV$I_M$M_M", (MOP_BASE*)(new COMP_FLT_DIV$I_M$M_M())});
     decodeStorage.insert({"V64_FLT_DIV$I_M$M_M", (MOP_BASE*)(new COMP_FLT_DIV$I_M$M_M())});
     decodeStorage.insert({"FDIV$I_M$M", (MOP_BASE*)(new COMP_FLT_DIV$I_M$M())});
     decodeStorage.insert({"FDIVR$I_M$M", (MOP_BASE*)(new COMP_FLT_DIV$I_M$M())});
     decodeStorage.insert({"FIDIV$I_M$M", (MOP_BASE*)(new COMP_FLT_DIV$I_M$M())});
     decodeStorage.insert({"V64_FLT_DIV$I_M$M", (MOP_BASE*)(new COMP_FLT_DIV$I_M$M())});
     decodeStorage.insert({"FDIV$M_R$R_R", (MOP_BASE*)(new COMP_FLT_DIV$M_R$R_R())});
     decodeStorage.insert({"FDIVR$M_R$R_R", (MOP_BASE*)(new COMP_FLT_DIV$M_R$R_R())});
     decodeStorage.insert({"FIDIV$M_R$R_R", (MOP_BASE*)(new COMP_FLT_DIV$M_R$R_R())});
     decodeStorage.insert({"V64_FLT_DIV$M_R$R_R", (MOP_BASE*)(new COMP_FLT_DIV$M_R$R_R())});
     decodeStorage.insert({"FDIV$M_R$R_M", (MOP_BASE*)(new COMP_FLT_DIV$M_R$R_M())});
     decodeStorage.insert({"FDIVR$M_R$R_M", (MOP_BASE*)(new COMP_FLT_DIV$M_R$R_M())});
     decodeStorage.insert({"FIDIV$M_R$R_M", (MOP_BASE*)(new COMP_FLT_DIV$M_R$R_M())});
     decodeStorage.insert({"V64_FLT_DIV$M_R$R_M", (MOP_BASE*)(new COMP_FLT_DIV$M_R$R_M())});
     decodeStorage.insert({"FDIV$M_R$R", (MOP_BASE*)(new COMP_FLT_DIV$M_R$R())});
     decodeStorage.insert({"FDIVR$M_R$R", (MOP_BASE*)(new COMP_FLT_DIV$M_R$R())});
     decodeStorage.insert({"FIDIV$M_R$R", (MOP_BASE*)(new COMP_FLT_DIV$M_R$R())});
     decodeStorage.insert({"V64_FLT_DIV$M_R$R", (MOP_BASE*)(new COMP_FLT_DIV$M_R$R())});
     decodeStorage.insert({"FDIV$M_R$M_R", (MOP_BASE*)(new COMP_FLT_DIV$M_R$M_R())});
     decodeStorage.insert({"FDIVR$M_R$M_R", (MOP_BASE*)(new COMP_FLT_DIV$M_R$M_R())});
     decodeStorage.insert({"FIDIV$M_R$M_R", (MOP_BASE*)(new COMP_FLT_DIV$M_R$M_R())});
     decodeStorage.insert({"V64_FLT_DIV$M_R$M_R", (MOP_BASE*)(new COMP_FLT_DIV$M_R$M_R())});
     decodeStorage.insert({"FDIV$M_R$M_M", (MOP_BASE*)(new COMP_FLT_DIV$M_R$M_M())});
     decodeStorage.insert({"FDIVR$M_R$M_M", (MOP_BASE*)(new COMP_FLT_DIV$M_R$M_M())});
     decodeStorage.insert({"FIDIV$M_R$M_M", (MOP_BASE*)(new COMP_FLT_DIV$M_R$M_M())});
     decodeStorage.insert({"V64_FLT_DIV$M_R$M_M", (MOP_BASE*)(new COMP_FLT_DIV$M_R$M_M())});
     decodeStorage.insert({"FDIV$M_R$M", (MOP_BASE*)(new COMP_FLT_DIV$M_R$M())});
     decodeStorage.insert({"FDIVR$M_R$M", (MOP_BASE*)(new COMP_FLT_DIV$M_R$M())});
     decodeStorage.insert({"FIDIV$M_R$M", (MOP_BASE*)(new COMP_FLT_DIV$M_R$M())});
     decodeStorage.insert({"V64_FLT_DIV$M_R$M", (MOP_BASE*)(new COMP_FLT_DIV$M_R$M())});
     decodeStorage.insert({"FDIV$M_I$R_R", (MOP_BASE*)(new COMP_FLT_DIV$M_I$R_R())});
     decodeStorage.insert({"FDIVR$M_I$R_R", (MOP_BASE*)(new COMP_FLT_DIV$M_I$R_R())});
     decodeStorage.insert({"FIDIV$M_I$R_R", (MOP_BASE*)(new COMP_FLT_DIV$M_I$R_R())});
     decodeStorage.insert({"V64_FLT_DIV$M_I$R_R", (MOP_BASE*)(new COMP_FLT_DIV$M_I$R_R())});
     decodeStorage.insert({"FDIV$M_I$R_M", (MOP_BASE*)(new COMP_FLT_DIV$M_I$R_M())});
     decodeStorage.insert({"FDIVR$M_I$R_M", (MOP_BASE*)(new COMP_FLT_DIV$M_I$R_M())});
     decodeStorage.insert({"FIDIV$M_I$R_M", (MOP_BASE*)(new COMP_FLT_DIV$M_I$R_M())});
     decodeStorage.insert({"V64_FLT_DIV$M_I$R_M", (MOP_BASE*)(new COMP_FLT_DIV$M_I$R_M())});
     decodeStorage.insert({"FDIV$M_I$R", (MOP_BASE*)(new COMP_FLT_DIV$M_I$R())});
     decodeStorage.insert({"FDIVR$M_I$R", (MOP_BASE*)(new COMP_FLT_DIV$M_I$R())});
     decodeStorage.insert({"FIDIV$M_I$R", (MOP_BASE*)(new COMP_FLT_DIV$M_I$R())});
     decodeStorage.insert({"V64_FLT_DIV$M_I$R", (MOP_BASE*)(new COMP_FLT_DIV$M_I$R())});
     decodeStorage.insert({"FDIV$M_I$M_R", (MOP_BASE*)(new COMP_FLT_DIV$M_I$M_R())});
     decodeStorage.insert({"FDIVR$M_I$M_R", (MOP_BASE*)(new COMP_FLT_DIV$M_I$M_R())});
     decodeStorage.insert({"FIDIV$M_I$M_R", (MOP_BASE*)(new COMP_FLT_DIV$M_I$M_R())});
     decodeStorage.insert({"V64_FLT_DIV$M_I$M_R", (MOP_BASE*)(new COMP_FLT_DIV$M_I$M_R())});
     decodeStorage.insert({"FDIV$M_I$M_M", (MOP_BASE*)(new COMP_FLT_DIV$M_I$M_M())});
     decodeStorage.insert({"FDIVR$M_I$M_M", (MOP_BASE*)(new COMP_FLT_DIV$M_I$M_M())});
     decodeStorage.insert({"FIDIV$M_I$M_M", (MOP_BASE*)(new COMP_FLT_DIV$M_I$M_M())});
     decodeStorage.insert({"V64_FLT_DIV$M_I$M_M", (MOP_BASE*)(new COMP_FLT_DIV$M_I$M_M())});
     decodeStorage.insert({"FDIV$M_I$M", (MOP_BASE*)(new COMP_FLT_DIV$M_I$M())});
     decodeStorage.insert({"FDIVR$M_I$M", (MOP_BASE*)(new COMP_FLT_DIV$M_I$M())});
     decodeStorage.insert({"FIDIV$M_I$M", (MOP_BASE*)(new COMP_FLT_DIV$M_I$M())});
     decodeStorage.insert({"V64_FLT_DIV$M_I$M", (MOP_BASE*)(new COMP_FLT_DIV$M_I$M())});
     decodeStorage.insert({"FDIV$M_M$R_R", (MOP_BASE*)(new COMP_FLT_DIV$M_M$R_R())});
     decodeStorage.insert({"FDIVR$M_M$R_R", (MOP_BASE*)(new COMP_FLT_DIV$M_M$R_R())});
     decodeStorage.insert({"FIDIV$M_M$R_R", (MOP_BASE*)(new COMP_FLT_DIV$M_M$R_R())});
     decodeStorage.insert({"V64_FLT_DIV$M_M$R_R", (MOP_BASE*)(new COMP_FLT_DIV$M_M$R_R())});
     decodeStorage.insert({"FDIV$M_M$R_M", (MOP_BASE*)(new COMP_FLT_DIV$M_M$R_M())});
     decodeStorage.insert({"FDIVR$M_M$R_M", (MOP_BASE*)(new COMP_FLT_DIV$M_M$R_M())});
     decodeStorage.insert({"FIDIV$M_M$R_M", (MOP_BASE*)(new COMP_FLT_DIV$M_M$R_M())});
     decodeStorage.insert({"V64_FLT_DIV$M_M$R_M", (MOP_BASE*)(new COMP_FLT_DIV$M_M$R_M())});
     decodeStorage.insert({"FDIV$M_M$R", (MOP_BASE*)(new COMP_FLT_DIV$M_M$R())});
     decodeStorage.insert({"FDIVR$M_M$R", (MOP_BASE*)(new COMP_FLT_DIV$M_M$R())});
     decodeStorage.insert({"FIDIV$M_M$R", (MOP_BASE*)(new COMP_FLT_DIV$M_M$R())});
     decodeStorage.insert({"V64_FLT_DIV$M_M$R", (MOP_BASE*)(new COMP_FLT_DIV$M_M$R())});
     decodeStorage.insert({"FDIV$M_M$M_R", (MOP_BASE*)(new COMP_FLT_DIV$M_M$M_R())});
     decodeStorage.insert({"FDIVR$M_M$M_R", (MOP_BASE*)(new COMP_FLT_DIV$M_M$M_R())});
     decodeStorage.insert({"FIDIV$M_M$M_R", (MOP_BASE*)(new COMP_FLT_DIV$M_M$M_R())});
     decodeStorage.insert({"V64_FLT_DIV$M_M$M_R", (MOP_BASE*)(new COMP_FLT_DIV$M_M$M_R())});
     decodeStorage.insert({"FDIV$M_M$M_M", (MOP_BASE*)(new COMP_FLT_DIV$M_M$M_M())});
     decodeStorage.insert({"FDIVR$M_M$M_M", (MOP_BASE*)(new COMP_FLT_DIV$M_M$M_M())});
     decodeStorage.insert({"FIDIV$M_M$M_M", (MOP_BASE*)(new COMP_FLT_DIV$M_M$M_M())});
     decodeStorage.insert({"V64_FLT_DIV$M_M$M_M", (MOP_BASE*)(new COMP_FLT_DIV$M_M$M_M())});
     decodeStorage.insert({"FDIV$M_M$M", (MOP_BASE*)(new COMP_FLT_DIV$M_M$M())});
     decodeStorage.insert({"FDIVR$M_M$M", (MOP_BASE*)(new COMP_FLT_DIV$M_M$M())});
     decodeStorage.insert({"FIDIV$M_M$M", (MOP_BASE*)(new COMP_FLT_DIV$M_M$M())});
     decodeStorage.insert({"V64_FLT_DIV$M_M$M", (MOP_BASE*)(new COMP_FLT_DIV$M_M$M())});
     decodeStorage.insert({"V128_INT_ALU$R_R$R_R", (MOP_BASE*)(new COMP128_INT$R_R$R_R())});
     decodeStorage.insert({"V128_INT_ALU$R_R$R_M", (MOP_BASE*)(new COMP128_INT$R_R$R_M())});
     decodeStorage.insert({"V128_INT_ALU$R_R$R", (MOP_BASE*)(new COMP128_INT$R_R$R())});
     decodeStorage.insert({"V128_INT_ALU$R_R$M_R", (MOP_BASE*)(new COMP128_INT$R_R$M_R())});
     decodeStorage.insert({"V128_INT_ALU$R_R$M_M", (MOP_BASE*)(new COMP128_INT$R_R$M_M())});
     decodeStorage.insert({"V128_INT_ALU$R_R$M", (MOP_BASE*)(new COMP128_INT$R_R$M())});
     decodeStorage.insert({"V128_INT_ALU$R_I$R_R", (MOP_BASE*)(new COMP128_INT$R_I$R_R())});
     decodeStorage.insert({"V128_INT_ALU$R_I$R_M", (MOP_BASE*)(new COMP128_INT$R_I$R_M())});
     decodeStorage.insert({"V128_INT_ALU$R_I$R", (MOP_BASE*)(new COMP128_INT$R_I$R())});
     decodeStorage.insert({"V128_INT_ALU$R_I$M_R", (MOP_BASE*)(new COMP128_INT$R_I$M_R())});
     decodeStorage.insert({"V128_INT_ALU$R_I$M_M", (MOP_BASE*)(new COMP128_INT$R_I$M_M())});
     decodeStorage.insert({"V128_INT_ALU$R_I$M", (MOP_BASE*)(new COMP128_INT$R_I$M())});
     decodeStorage.insert({"V128_INT_ALU$R_M$R_R", (MOP_BASE*)(new COMP128_INT$R_M$R_R())});
     decodeStorage.insert({"V128_INT_ALU$R_M$R_M", (MOP_BASE*)(new COMP128_INT$R_M$R_M())});
     decodeStorage.insert({"V128_INT_ALU$R_M$R", (MOP_BASE*)(new COMP128_INT$R_M$R())});
     decodeStorage.insert({"V128_INT_ALU$R_M$M_R", (MOP_BASE*)(new COMP128_INT$R_M$M_R())});
     decodeStorage.insert({"V128_INT_ALU$R_M$M_M", (MOP_BASE*)(new COMP128_INT$R_M$M_M())});
     decodeStorage.insert({"V128_INT_ALU$R_M$M", (MOP_BASE*)(new COMP128_INT$R_M$M())});
     decodeStorage.insert({"V128_INT_ALU$I_R$R_R", (MOP_BASE*)(new COMP128_INT$I_R$R_R())});
     decodeStorage.insert({"V128_INT_ALU$I_R$R_M", (MOP_BASE*)(new COMP128_INT$I_R$R_M())});
     decodeStorage.insert({"V128_INT_ALU$I_R$R", (MOP_BASE*)(new COMP128_INT$I_R$R())});
     decodeStorage.insert({"V128_INT_ALU$I_R$M_R", (MOP_BASE*)(new COMP128_INT$I_R$M_R())});
     decodeStorage.insert({"V128_INT_ALU$I_R$M_M", (MOP_BASE*)(new COMP128_INT$I_R$M_M())});
     decodeStorage.insert({"V128_INT_ALU$I_R$M", (MOP_BASE*)(new COMP128_INT$I_R$M())});
     decodeStorage.insert({"V128_INT_ALU$I_I$R_R", (MOP_BASE*)(new COMP128_INT$I_I$R_R())});
     decodeStorage.insert({"V128_INT_ALU$I_I$R_M", (MOP_BASE*)(new COMP128_INT$I_I$R_M())});
     decodeStorage.insert({"V128_INT_ALU$I_I$R", (MOP_BASE*)(new COMP128_INT$I_I$R())});
     decodeStorage.insert({"V128_INT_ALU$I_I$M_R", (MOP_BASE*)(new COMP128_INT$I_I$M_R())});
     decodeStorage.insert({"V128_INT_ALU$I_I$M_M", (MOP_BASE*)(new COMP128_INT$I_I$M_M())});
     decodeStorage.insert({"V128_INT_ALU$I_I$M", (MOP_BASE*)(new COMP128_INT$I_I$M())});
     decodeStorage.insert({"V128_INT_ALU$I_M$R_R", (MOP_BASE*)(new COMP128_INT$I_M$R_R())});
     decodeStorage.insert({"V128_INT_ALU$I_M$R_M", (MOP_BASE*)(new COMP128_INT$I_M$R_M())});
     decodeStorage.insert({"V128_INT_ALU$I_M$R", (MOP_BASE*)(new COMP128_INT$I_M$R())});
     decodeStorage.insert({"V128_INT_ALU$I_M$M_R", (MOP_BASE*)(new COMP128_INT$I_M$M_R())});
     decodeStorage.insert({"V128_INT_ALU$I_M$M_M", (MOP_BASE*)(new COMP128_INT$I_M$M_M())});
     decodeStorage.insert({"V128_INT_ALU$I_M$M", (MOP_BASE*)(new COMP128_INT$I_M$M())});
     decodeStorage.insert({"V128_INT_ALU$M_R$R_R", (MOP_BASE*)(new COMP128_INT$M_R$R_R())});
     decodeStorage.insert({"V128_INT_ALU$M_R$R_M", (MOP_BASE*)(new COMP128_INT$M_R$R_M())});
     decodeStorage.insert({"V128_INT_ALU$M_R$R", (MOP_BASE*)(new COMP128_INT$M_R$R())});
     decodeStorage.insert({"V128_INT_ALU$M_R$M_R", (MOP_BASE*)(new COMP128_INT$M_R$M_R())});
     decodeStorage.insert({"V128_INT_ALU$M_R$M_M", (MOP_BASE*)(new COMP128_INT$M_R$M_M())});
     decodeStorage.insert({"V128_INT_ALU$M_R$M", (MOP_BASE*)(new COMP128_INT$M_R$M())});
     decodeStorage.insert({"V128_INT_ALU$M_I$R_R", (MOP_BASE*)(new COMP128_INT$M_I$R_R())});
     decodeStorage.insert({"V128_INT_ALU$M_I$R_M", (MOP_BASE*)(new COMP128_INT$M_I$R_M())});
     decodeStorage.insert({"V128_INT_ALU$M_I$R", (MOP_BASE*)(new COMP128_INT$M_I$R())});
     decodeStorage.insert({"V128_INT_ALU$M_I$M_R", (MOP_BASE*)(new COMP128_INT$M_I$M_R())});
     decodeStorage.insert({"V128_INT_ALU$M_I$M_M", (MOP_BASE*)(new COMP128_INT$M_I$M_M())});
     decodeStorage.insert({"V128_INT_ALU$M_I$M", (MOP_BASE*)(new COMP128_INT$M_I$M())});
     decodeStorage.insert({"V128_INT_ALU$M_M$R_R", (MOP_BASE*)(new COMP128_INT$M_M$R_R())});
     decodeStorage.insert({"V128_INT_ALU$M_M$R_M", (MOP_BASE*)(new COMP128_INT$M_M$R_M())});
     decodeStorage.insert({"V128_INT_ALU$M_M$R", (MOP_BASE*)(new COMP128_INT$M_M$R())});
     decodeStorage.insert({"V128_INT_ALU$M_M$M_R", (MOP_BASE*)(new COMP128_INT$M_M$M_R())});
     decodeStorage.insert({"V128_INT_ALU$M_M$M_M", (MOP_BASE*)(new COMP128_INT$M_M$M_M())});
     decodeStorage.insert({"V128_INT_ALU$M_M$M", (MOP_BASE*)(new COMP128_INT$M_M$M())});
     decodeStorage.insert({"V128_INT_MUL$R_R$R_R", (MOP_BASE*)(new COMP128_MUL$R_R$R_R())});
     decodeStorage.insert({"V128_INT_MUL$R_R$R_M", (MOP_BASE*)(new COMP128_MUL$R_R$R_M())});
     decodeStorage.insert({"V128_INT_MUL$R_R$R", (MOP_BASE*)(new COMP128_MUL$R_R$R())});
     decodeStorage.insert({"V128_INT_MUL$R_R$M_R", (MOP_BASE*)(new COMP128_MUL$R_R$M_R())});
     decodeStorage.insert({"V128_INT_MUL$R_R$M_M", (MOP_BASE*)(new COMP128_MUL$R_R$M_M())});
     decodeStorage.insert({"V128_INT_MUL$R_R$M", (MOP_BASE*)(new COMP128_MUL$R_R$M())});
     decodeStorage.insert({"V128_INT_MUL$R_I$R_R", (MOP_BASE*)(new COMP128_MUL$R_I$R_R())});
     decodeStorage.insert({"V128_INT_MUL$R_I$R_M", (MOP_BASE*)(new COMP128_MUL$R_I$R_M())});
     decodeStorage.insert({"V128_INT_MUL$R_I$R", (MOP_BASE*)(new COMP128_MUL$R_I$R())});
     decodeStorage.insert({"V128_INT_MUL$R_I$M_R", (MOP_BASE*)(new COMP128_MUL$R_I$M_R())});
     decodeStorage.insert({"V128_INT_MUL$R_I$M_M", (MOP_BASE*)(new COMP128_MUL$R_I$M_M())});
     decodeStorage.insert({"V128_INT_MUL$R_I$M", (MOP_BASE*)(new COMP128_MUL$R_I$M())});
     decodeStorage.insert({"V128_INT_MUL$R_M$R_R", (MOP_BASE*)(new COMP128_MUL$R_M$R_R())});
     decodeStorage.insert({"V128_INT_MUL$R_M$R_M", (MOP_BASE*)(new COMP128_MUL$R_M$R_M())});
     decodeStorage.insert({"V128_INT_MUL$R_M$R", (MOP_BASE*)(new COMP128_MUL$R_M$R())});
     decodeStorage.insert({"V128_INT_MUL$R_M$M_R", (MOP_BASE*)(new COMP128_MUL$R_M$M_R())});
     decodeStorage.insert({"V128_INT_MUL$R_M$M_M", (MOP_BASE*)(new COMP128_MUL$R_M$M_M())});
     decodeStorage.insert({"V128_INT_MUL$R_M$M", (MOP_BASE*)(new COMP128_MUL$R_M$M())});
     decodeStorage.insert({"V128_INT_MUL$I_R$R_R", (MOP_BASE*)(new COMP128_MUL$I_R$R_R())});
     decodeStorage.insert({"V128_INT_MUL$I_R$R_M", (MOP_BASE*)(new COMP128_MUL$I_R$R_M())});
     decodeStorage.insert({"V128_INT_MUL$I_R$R", (MOP_BASE*)(new COMP128_MUL$I_R$R())});
     decodeStorage.insert({"V128_INT_MUL$I_R$M_R", (MOP_BASE*)(new COMP128_MUL$I_R$M_R())});
     decodeStorage.insert({"V128_INT_MUL$I_R$M_M", (MOP_BASE*)(new COMP128_MUL$I_R$M_M())});
     decodeStorage.insert({"V128_INT_MUL$I_R$M", (MOP_BASE*)(new COMP128_MUL$I_R$M())});
     decodeStorage.insert({"V128_INT_MUL$I_I$R_R", (MOP_BASE*)(new COMP128_MUL$I_I$R_R())});
     decodeStorage.insert({"V128_INT_MUL$I_I$R_M", (MOP_BASE*)(new COMP128_MUL$I_I$R_M())});
     decodeStorage.insert({"V128_INT_MUL$I_I$R", (MOP_BASE*)(new COMP128_MUL$I_I$R())});
     decodeStorage.insert({"V128_INT_MUL$I_I$M_R", (MOP_BASE*)(new COMP128_MUL$I_I$M_R())});
     decodeStorage.insert({"V128_INT_MUL$I_I$M_M", (MOP_BASE*)(new COMP128_MUL$I_I$M_M())});
     decodeStorage.insert({"V128_INT_MUL$I_I$M", (MOP_BASE*)(new COMP128_MUL$I_I$M())});
     decodeStorage.insert({"V128_INT_MUL$I_M$R_R", (MOP_BASE*)(new COMP128_MUL$I_M$R_R())});
     decodeStorage.insert({"V128_INT_MUL$I_M$R_M", (MOP_BASE*)(new COMP128_MUL$I_M$R_M())});
     decodeStorage.insert({"V128_INT_MUL$I_M$R", (MOP_BASE*)(new COMP128_MUL$I_M$R())});
     decodeStorage.insert({"V128_INT_MUL$I_M$M_R", (MOP_BASE*)(new COMP128_MUL$I_M$M_R())});
     decodeStorage.insert({"V128_INT_MUL$I_M$M_M", (MOP_BASE*)(new COMP128_MUL$I_M$M_M())});
     decodeStorage.insert({"V128_INT_MUL$I_M$M", (MOP_BASE*)(new COMP128_MUL$I_M$M())});
     decodeStorage.insert({"V128_INT_MUL$M_R$R_R", (MOP_BASE*)(new COMP128_MUL$M_R$R_R())});
     decodeStorage.insert({"V128_INT_MUL$M_R$R_M", (MOP_BASE*)(new COMP128_MUL$M_R$R_M())});
     decodeStorage.insert({"V128_INT_MUL$M_R$R", (MOP_BASE*)(new COMP128_MUL$M_R$R())});
     decodeStorage.insert({"V128_INT_MUL$M_R$M_R", (MOP_BASE*)(new COMP128_MUL$M_R$M_R())});
     decodeStorage.insert({"V128_INT_MUL$M_R$M_M", (MOP_BASE*)(new COMP128_MUL$M_R$M_M())});
     decodeStorage.insert({"V128_INT_MUL$M_R$M", (MOP_BASE*)(new COMP128_MUL$M_R$M())});
     decodeStorage.insert({"V128_INT_MUL$M_I$R_R", (MOP_BASE*)(new COMP128_MUL$M_I$R_R())});
     decodeStorage.insert({"V128_INT_MUL$M_I$R_M", (MOP_BASE*)(new COMP128_MUL$M_I$R_M())});
     decodeStorage.insert({"V128_INT_MUL$M_I$R", (MOP_BASE*)(new COMP128_MUL$M_I$R())});
     decodeStorage.insert({"V128_INT_MUL$M_I$M_R", (MOP_BASE*)(new COMP128_MUL$M_I$M_R())});
     decodeStorage.insert({"V128_INT_MUL$M_I$M_M", (MOP_BASE*)(new COMP128_MUL$M_I$M_M())});
     decodeStorage.insert({"V128_INT_MUL$M_I$M", (MOP_BASE*)(new COMP128_MUL$M_I$M())});
     decodeStorage.insert({"V128_INT_MUL$M_M$R_R", (MOP_BASE*)(new COMP128_MUL$M_M$R_R())});
     decodeStorage.insert({"V128_INT_MUL$M_M$R_M", (MOP_BASE*)(new COMP128_MUL$M_M$R_M())});
     decodeStorage.insert({"V128_INT_MUL$M_M$R", (MOP_BASE*)(new COMP128_MUL$M_M$R())});
     decodeStorage.insert({"V128_INT_MUL$M_M$M_R", (MOP_BASE*)(new COMP128_MUL$M_M$M_R())});
     decodeStorage.insert({"V128_INT_MUL$M_M$M_M", (MOP_BASE*)(new COMP128_MUL$M_M$M_M())});
     decodeStorage.insert({"V128_INT_MUL$M_M$M", (MOP_BASE*)(new COMP128_MUL$M_M$M())});
     decodeStorage.insert({"V128_INT_DIV$R_R$R_R", (MOP_BASE*)(new COMP128_DIV$R_R$R_R())});
     decodeStorage.insert({"V128_INT_DIV$R_R$R_M", (MOP_BASE*)(new COMP128_DIV$R_R$R_M())});
     decodeStorage.insert({"V128_INT_DIV$R_R$R", (MOP_BASE*)(new COMP128_DIV$R_R$R())});
     decodeStorage.insert({"V128_INT_DIV$R_R$M_R", (MOP_BASE*)(new COMP128_DIV$R_R$M_R())});
     decodeStorage.insert({"V128_INT_DIV$R_R$M_M", (MOP_BASE*)(new COMP128_DIV$R_R$M_M())});
     decodeStorage.insert({"V128_INT_DIV$R_R$M", (MOP_BASE*)(new COMP128_DIV$R_R$M())});
     decodeStorage.insert({"V128_INT_DIV$R_I$R_R", (MOP_BASE*)(new COMP128_DIV$R_I$R_R())});
     decodeStorage.insert({"V128_INT_DIV$R_I$R_M", (MOP_BASE*)(new COMP128_DIV$R_I$R_M())});
     decodeStorage.insert({"V128_INT_DIV$R_I$R", (MOP_BASE*)(new COMP128_DIV$R_I$R())});
     decodeStorage.insert({"V128_INT_DIV$R_I$M_R", (MOP_BASE*)(new COMP128_DIV$R_I$M_R())});
     decodeStorage.insert({"V128_INT_DIV$R_I$M_M", (MOP_BASE*)(new COMP128_DIV$R_I$M_M())});
     decodeStorage.insert({"V128_INT_DIV$R_I$M", (MOP_BASE*)(new COMP128_DIV$R_I$M())});
     decodeStorage.insert({"V128_INT_DIV$R_M$R_R", (MOP_BASE*)(new COMP128_DIV$R_M$R_R())});
     decodeStorage.insert({"V128_INT_DIV$R_M$R_M", (MOP_BASE*)(new COMP128_DIV$R_M$R_M())});
     decodeStorage.insert({"V128_INT_DIV$R_M$R", (MOP_BASE*)(new COMP128_DIV$R_M$R())});
     decodeStorage.insert({"V128_INT_DIV$R_M$M_R", (MOP_BASE*)(new COMP128_DIV$R_M$M_R())});
     decodeStorage.insert({"V128_INT_DIV$R_M$M_M", (MOP_BASE*)(new COMP128_DIV$R_M$M_M())});
     decodeStorage.insert({"V128_INT_DIV$R_M$M", (MOP_BASE*)(new COMP128_DIV$R_M$M())});
     decodeStorage.insert({"V128_INT_DIV$I_R$R_R", (MOP_BASE*)(new COMP128_DIV$I_R$R_R())});
     decodeStorage.insert({"V128_INT_DIV$I_R$R_M", (MOP_BASE*)(new COMP128_DIV$I_R$R_M())});
     decodeStorage.insert({"V128_INT_DIV$I_R$R", (MOP_BASE*)(new COMP128_DIV$I_R$R())});
     decodeStorage.insert({"V128_INT_DIV$I_R$M_R", (MOP_BASE*)(new COMP128_DIV$I_R$M_R())});
     decodeStorage.insert({"V128_INT_DIV$I_R$M_M", (MOP_BASE*)(new COMP128_DIV$I_R$M_M())});
     decodeStorage.insert({"V128_INT_DIV$I_R$M", (MOP_BASE*)(new COMP128_DIV$I_R$M())});
     decodeStorage.insert({"V128_INT_DIV$I_I$R_R", (MOP_BASE*)(new COMP128_DIV$I_I$R_R())});
     decodeStorage.insert({"V128_INT_DIV$I_I$R_M", (MOP_BASE*)(new COMP128_DIV$I_I$R_M())});
     decodeStorage.insert({"V128_INT_DIV$I_I$R", (MOP_BASE*)(new COMP128_DIV$I_I$R())});
     decodeStorage.insert({"V128_INT_DIV$I_I$M_R", (MOP_BASE*)(new COMP128_DIV$I_I$M_R())});
     decodeStorage.insert({"V128_INT_DIV$I_I$M_M", (MOP_BASE*)(new COMP128_DIV$I_I$M_M())});
     decodeStorage.insert({"V128_INT_DIV$I_I$M", (MOP_BASE*)(new COMP128_DIV$I_I$M())});
     decodeStorage.insert({"V128_INT_DIV$I_M$R_R", (MOP_BASE*)(new COMP128_DIV$I_M$R_R())});
     decodeStorage.insert({"V128_INT_DIV$I_M$R_M", (MOP_BASE*)(new COMP128_DIV$I_M$R_M())});
     decodeStorage.insert({"V128_INT_DIV$I_M$R", (MOP_BASE*)(new COMP128_DIV$I_M$R())});
     decodeStorage.insert({"V128_INT_DIV$I_M$M_R", (MOP_BASE*)(new COMP128_DIV$I_M$M_R())});
     decodeStorage.insert({"V128_INT_DIV$I_M$M_M", (MOP_BASE*)(new COMP128_DIV$I_M$M_M())});
     decodeStorage.insert({"V128_INT_DIV$I_M$M", (MOP_BASE*)(new COMP128_DIV$I_M$M())});
     decodeStorage.insert({"V128_INT_DIV$M_R$R_R", (MOP_BASE*)(new COMP128_DIV$M_R$R_R())});
     decodeStorage.insert({"V128_INT_DIV$M_R$R_M", (MOP_BASE*)(new COMP128_DIV$M_R$R_M())});
     decodeStorage.insert({"V128_INT_DIV$M_R$R", (MOP_BASE*)(new COMP128_DIV$M_R$R())});
     decodeStorage.insert({"V128_INT_DIV$M_R$M_R", (MOP_BASE*)(new COMP128_DIV$M_R$M_R())});
     decodeStorage.insert({"V128_INT_DIV$M_R$M_M", (MOP_BASE*)(new COMP128_DIV$M_R$M_M())});
     decodeStorage.insert({"V128_INT_DIV$M_R$M", (MOP_BASE*)(new COMP128_DIV$M_R$M())});
     decodeStorage.insert({"V128_INT_DIV$M_I$R_R", (MOP_BASE*)(new COMP128_DIV$M_I$R_R())});
     decodeStorage.insert({"V128_INT_DIV$M_I$R_M", (MOP_BASE*)(new COMP128_DIV$M_I$R_M())});
     decodeStorage.insert({"V128_INT_DIV$M_I$R", (MOP_BASE*)(new COMP128_DIV$M_I$R())});
     decodeStorage.insert({"V128_INT_DIV$M_I$M_R", (MOP_BASE*)(new COMP128_DIV$M_I$M_R())});
     decodeStorage.insert({"V128_INT_DIV$M_I$M_M", (MOP_BASE*)(new COMP128_DIV$M_I$M_M())});
     decodeStorage.insert({"V128_INT_DIV$M_I$M", (MOP_BASE*)(new COMP128_DIV$M_I$M())});
     decodeStorage.insert({"V128_INT_DIV$M_M$R_R", (MOP_BASE*)(new COMP128_DIV$M_M$R_R())});
     decodeStorage.insert({"V128_INT_DIV$M_M$R_M", (MOP_BASE*)(new COMP128_DIV$M_M$R_M())});
     decodeStorage.insert({"V128_INT_DIV$M_M$R", (MOP_BASE*)(new COMP128_DIV$M_M$R())});
     decodeStorage.insert({"V128_INT_DIV$M_M$M_R", (MOP_BASE*)(new COMP128_DIV$M_M$M_R())});
     decodeStorage.insert({"V128_INT_DIV$M_M$M_M", (MOP_BASE*)(new COMP128_DIV$M_M$M_M())});
     decodeStorage.insert({"V128_INT_DIV$M_M$M", (MOP_BASE*)(new COMP128_DIV$M_M$M())});
     decodeStorage.insert({"V128_FLT_ALU$R_R$R_R", (MOP_BASE*)(new COMP128_FLT$R_R$R_R())});
     decodeStorage.insert({"V128_FLT_ALU$R_R$R_M", (MOP_BASE*)(new COMP128_FLT$R_R$R_M())});
     decodeStorage.insert({"V128_FLT_ALU$R_R$R", (MOP_BASE*)(new COMP128_FLT$R_R$R())});
     decodeStorage.insert({"V128_FLT_ALU$R_R$M_R", (MOP_BASE*)(new COMP128_FLT$R_R$M_R())});
     decodeStorage.insert({"V128_FLT_ALU$R_R$M_M", (MOP_BASE*)(new COMP128_FLT$R_R$M_M())});
     decodeStorage.insert({"V128_FLT_ALU$R_R$M", (MOP_BASE*)(new COMP128_FLT$R_R$M())});
     decodeStorage.insert({"V128_FLT_ALU$R_I$R_R", (MOP_BASE*)(new COMP128_FLT$R_I$R_R())});
     decodeStorage.insert({"V128_FLT_ALU$R_I$R_M", (MOP_BASE*)(new COMP128_FLT$R_I$R_M())});
     decodeStorage.insert({"V128_FLT_ALU$R_I$R", (MOP_BASE*)(new COMP128_FLT$R_I$R())});
     decodeStorage.insert({"V128_FLT_ALU$R_I$M_R", (MOP_BASE*)(new COMP128_FLT$R_I$M_R())});
     decodeStorage.insert({"V128_FLT_ALU$R_I$M_M", (MOP_BASE*)(new COMP128_FLT$R_I$M_M())});
     decodeStorage.insert({"V128_FLT_ALU$R_I$M", (MOP_BASE*)(new COMP128_FLT$R_I$M())});
     decodeStorage.insert({"V128_FLT_ALU$R_M$R_R", (MOP_BASE*)(new COMP128_FLT$R_M$R_R())});
     decodeStorage.insert({"V128_FLT_ALU$R_M$R_M", (MOP_BASE*)(new COMP128_FLT$R_M$R_M())});
     decodeStorage.insert({"V128_FLT_ALU$R_M$R", (MOP_BASE*)(new COMP128_FLT$R_M$R())});
     decodeStorage.insert({"V128_FLT_ALU$R_M$M_R", (MOP_BASE*)(new COMP128_FLT$R_M$M_R())});
     decodeStorage.insert({"V128_FLT_ALU$R_M$M_M", (MOP_BASE*)(new COMP128_FLT$R_M$M_M())});
     decodeStorage.insert({"V128_FLT_ALU$R_M$M", (MOP_BASE*)(new COMP128_FLT$R_M$M())});
     decodeStorage.insert({"V128_FLT_ALU$I_R$R_R", (MOP_BASE*)(new COMP128_FLT$I_R$R_R())});
     decodeStorage.insert({"V128_FLT_ALU$I_R$R_M", (MOP_BASE*)(new COMP128_FLT$I_R$R_M())});
     decodeStorage.insert({"V128_FLT_ALU$I_R$R", (MOP_BASE*)(new COMP128_FLT$I_R$R())});
     decodeStorage.insert({"V128_FLT_ALU$I_R$M_R", (MOP_BASE*)(new COMP128_FLT$I_R$M_R())});
     decodeStorage.insert({"V128_FLT_ALU$I_R$M_M", (MOP_BASE*)(new COMP128_FLT$I_R$M_M())});
     decodeStorage.insert({"V128_FLT_ALU$I_R$M", (MOP_BASE*)(new COMP128_FLT$I_R$M())});
     decodeStorage.insert({"V128_FLT_ALU$I_I$R_R", (MOP_BASE*)(new COMP128_FLT$I_I$R_R())});
     decodeStorage.insert({"V128_FLT_ALU$I_I$R_M", (MOP_BASE*)(new COMP128_FLT$I_I$R_M())});
     decodeStorage.insert({"V128_FLT_ALU$I_I$R", (MOP_BASE*)(new COMP128_FLT$I_I$R())});
     decodeStorage.insert({"V128_FLT_ALU$I_I$M_R", (MOP_BASE*)(new COMP128_FLT$I_I$M_R())});
     decodeStorage.insert({"V128_FLT_ALU$I_I$M_M", (MOP_BASE*)(new COMP128_FLT$I_I$M_M())});
     decodeStorage.insert({"V128_FLT_ALU$I_I$M", (MOP_BASE*)(new COMP128_FLT$I_I$M())});
     decodeStorage.insert({"V128_FLT_ALU$I_M$R_R", (MOP_BASE*)(new COMP128_FLT$I_M$R_R())});
     decodeStorage.insert({"V128_FLT_ALU$I_M$R_M", (MOP_BASE*)(new COMP128_FLT$I_M$R_M())});
     decodeStorage.insert({"V128_FLT_ALU$I_M$R", (MOP_BASE*)(new COMP128_FLT$I_M$R())});
     decodeStorage.insert({"V128_FLT_ALU$I_M$M_R", (MOP_BASE*)(new COMP128_FLT$I_M$M_R())});
     decodeStorage.insert({"V128_FLT_ALU$I_M$M_M", (MOP_BASE*)(new COMP128_FLT$I_M$M_M())});
     decodeStorage.insert({"V128_FLT_ALU$I_M$M", (MOP_BASE*)(new COMP128_FLT$I_M$M())});
     decodeStorage.insert({"V128_FLT_ALU$M_R$R_R", (MOP_BASE*)(new COMP128_FLT$M_R$R_R())});
     decodeStorage.insert({"V128_FLT_ALU$M_R$R_M", (MOP_BASE*)(new COMP128_FLT$M_R$R_M())});
     decodeStorage.insert({"V128_FLT_ALU$M_R$R", (MOP_BASE*)(new COMP128_FLT$M_R$R())});
     decodeStorage.insert({"V128_FLT_ALU$M_R$M_R", (MOP_BASE*)(new COMP128_FLT$M_R$M_R())});
     decodeStorage.insert({"V128_FLT_ALU$M_R$M_M", (MOP_BASE*)(new COMP128_FLT$M_R$M_M())});
     decodeStorage.insert({"V128_FLT_ALU$M_R$M", (MOP_BASE*)(new COMP128_FLT$M_R$M())});
     decodeStorage.insert({"V128_FLT_ALU$M_I$R_R", (MOP_BASE*)(new COMP128_FLT$M_I$R_R())});
     decodeStorage.insert({"V128_FLT_ALU$M_I$R_M", (MOP_BASE*)(new COMP128_FLT$M_I$R_M())});
     decodeStorage.insert({"V128_FLT_ALU$M_I$R", (MOP_BASE*)(new COMP128_FLT$M_I$R())});
     decodeStorage.insert({"V128_FLT_ALU$M_I$M_R", (MOP_BASE*)(new COMP128_FLT$M_I$M_R())});
     decodeStorage.insert({"V128_FLT_ALU$M_I$M_M", (MOP_BASE*)(new COMP128_FLT$M_I$M_M())});
     decodeStorage.insert({"V128_FLT_ALU$M_I$M", (MOP_BASE*)(new COMP128_FLT$M_I$M())});
     decodeStorage.insert({"V128_FLT_ALU$M_M$R_R", (MOP_BASE*)(new COMP128_FLT$M_M$R_R())});
     decodeStorage.insert({"V128_FLT_ALU$M_M$R_M", (MOP_BASE*)(new COMP128_FLT$M_M$R_M())});
     decodeStorage.insert({"V128_FLT_ALU$M_M$R", (MOP_BASE*)(new COMP128_FLT$M_M$R())});
     decodeStorage.insert({"V128_FLT_ALU$M_M$M_R", (MOP_BASE*)(new COMP128_FLT$M_M$M_R())});
     decodeStorage.insert({"V128_FLT_ALU$M_M$M_M", (MOP_BASE*)(new COMP128_FLT$M_M$M_M())});
     decodeStorage.insert({"V128_FLT_ALU$M_M$M", (MOP_BASE*)(new COMP128_FLT$M_M$M())});
     decodeStorage.insert({"V128_FLT_MUL$R_R$R_R", (MOP_BASE*)(new COMP128_FLT_MUL$R_R$R_R())});
     decodeStorage.insert({"V128_FLT_MUL$R_R$R_M", (MOP_BASE*)(new COMP128_FLT_MUL$R_R$R_M())});
     decodeStorage.insert({"V128_FLT_MUL$R_R$R", (MOP_BASE*)(new COMP128_FLT_MUL$R_R$R())});
     decodeStorage.insert({"V128_FLT_MUL$R_R$M_R", (MOP_BASE*)(new COMP128_FLT_MUL$R_R$M_R())});
     decodeStorage.insert({"V128_FLT_MUL$R_R$M_M", (MOP_BASE*)(new COMP128_FLT_MUL$R_R$M_M())});
     decodeStorage.insert({"V128_FLT_MUL$R_R$M", (MOP_BASE*)(new COMP128_FLT_MUL$R_R$M())});
     decodeStorage.insert({"V128_FLT_MUL$R_I$R_R", (MOP_BASE*)(new COMP128_FLT_MUL$R_I$R_R())});
     decodeStorage.insert({"V128_FLT_MUL$R_I$R_M", (MOP_BASE*)(new COMP128_FLT_MUL$R_I$R_M())});
     decodeStorage.insert({"V128_FLT_MUL$R_I$R", (MOP_BASE*)(new COMP128_FLT_MUL$R_I$R())});
     decodeStorage.insert({"V128_FLT_MUL$R_I$M_R", (MOP_BASE*)(new COMP128_FLT_MUL$R_I$M_R())});
     decodeStorage.insert({"V128_FLT_MUL$R_I$M_M", (MOP_BASE*)(new COMP128_FLT_MUL$R_I$M_M())});
     decodeStorage.insert({"V128_FLT_MUL$R_I$M", (MOP_BASE*)(new COMP128_FLT_MUL$R_I$M())});
     decodeStorage.insert({"V128_FLT_MUL$R_M$R_R", (MOP_BASE*)(new COMP128_FLT_MUL$R_M$R_R())});
     decodeStorage.insert({"V128_FLT_MUL$R_M$R_M", (MOP_BASE*)(new COMP128_FLT_MUL$R_M$R_M())});
     decodeStorage.insert({"V128_FLT_MUL$R_M$R", (MOP_BASE*)(new COMP128_FLT_MUL$R_M$R())});
     decodeStorage.insert({"V128_FLT_MUL$R_M$M_R", (MOP_BASE*)(new COMP128_FLT_MUL$R_M$M_R())});
     decodeStorage.insert({"V128_FLT_MUL$R_M$M_M", (MOP_BASE*)(new COMP128_FLT_MUL$R_M$M_M())});
     decodeStorage.insert({"V128_FLT_MUL$R_M$M", (MOP_BASE*)(new COMP128_FLT_MUL$R_M$M())});
     decodeStorage.insert({"V128_FLT_MUL$I_R$R_R", (MOP_BASE*)(new COMP128_FLT_MUL$I_R$R_R())});
     decodeStorage.insert({"V128_FLT_MUL$I_R$R_M", (MOP_BASE*)(new COMP128_FLT_MUL$I_R$R_M())});
     decodeStorage.insert({"V128_FLT_MUL$I_R$R", (MOP_BASE*)(new COMP128_FLT_MUL$I_R$R())});
     decodeStorage.insert({"V128_FLT_MUL$I_R$M_R", (MOP_BASE*)(new COMP128_FLT_MUL$I_R$M_R())});
     decodeStorage.insert({"V128_FLT_MUL$I_R$M_M", (MOP_BASE*)(new COMP128_FLT_MUL$I_R$M_M())});
     decodeStorage.insert({"V128_FLT_MUL$I_R$M", (MOP_BASE*)(new COMP128_FLT_MUL$I_R$M())});
     decodeStorage.insert({"V128_FLT_MUL$I_I$R_R", (MOP_BASE*)(new COMP128_FLT_MUL$I_I$R_R())});
     decodeStorage.insert({"V128_FLT_MUL$I_I$R_M", (MOP_BASE*)(new COMP128_FLT_MUL$I_I$R_M())});
     decodeStorage.insert({"V128_FLT_MUL$I_I$R", (MOP_BASE*)(new COMP128_FLT_MUL$I_I$R())});
     decodeStorage.insert({"V128_FLT_MUL$I_I$M_R", (MOP_BASE*)(new COMP128_FLT_MUL$I_I$M_R())});
     decodeStorage.insert({"V128_FLT_MUL$I_I$M_M", (MOP_BASE*)(new COMP128_FLT_MUL$I_I$M_M())});
     decodeStorage.insert({"V128_FLT_MUL$I_I$M", (MOP_BASE*)(new COMP128_FLT_MUL$I_I$M())});
     decodeStorage.insert({"V128_FLT_MUL$I_M$R_R", (MOP_BASE*)(new COMP128_FLT_MUL$I_M$R_R())});
     decodeStorage.insert({"V128_FLT_MUL$I_M$R_M", (MOP_BASE*)(new COMP128_FLT_MUL$I_M$R_M())});
     decodeStorage.insert({"V128_FLT_MUL$I_M$R", (MOP_BASE*)(new COMP128_FLT_MUL$I_M$R())});
     decodeStorage.insert({"V128_FLT_MUL$I_M$M_R", (MOP_BASE*)(new COMP128_FLT_MUL$I_M$M_R())});
     decodeStorage.insert({"V128_FLT_MUL$I_M$M_M", (MOP_BASE*)(new COMP128_FLT_MUL$I_M$M_M())});
     decodeStorage.insert({"V128_FLT_MUL$I_M$M", (MOP_BASE*)(new COMP128_FLT_MUL$I_M$M())});
     decodeStorage.insert({"V128_FLT_MUL$M_R$R_R", (MOP_BASE*)(new COMP128_FLT_MUL$M_R$R_R())});
     decodeStorage.insert({"V128_FLT_MUL$M_R$R_M", (MOP_BASE*)(new COMP128_FLT_MUL$M_R$R_M())});
     decodeStorage.insert({"V128_FLT_MUL$M_R$R", (MOP_BASE*)(new COMP128_FLT_MUL$M_R$R())});
     decodeStorage.insert({"V128_FLT_MUL$M_R$M_R", (MOP_BASE*)(new COMP128_FLT_MUL$M_R$M_R())});
     decodeStorage.insert({"V128_FLT_MUL$M_R$M_M", (MOP_BASE*)(new COMP128_FLT_MUL$M_R$M_M())});
     decodeStorage.insert({"V128_FLT_MUL$M_R$M", (MOP_BASE*)(new COMP128_FLT_MUL$M_R$M())});
     decodeStorage.insert({"V128_FLT_MUL$M_I$R_R", (MOP_BASE*)(new COMP128_FLT_MUL$M_I$R_R())});
     decodeStorage.insert({"V128_FLT_MUL$M_I$R_M", (MOP_BASE*)(new COMP128_FLT_MUL$M_I$R_M())});
     decodeStorage.insert({"V128_FLT_MUL$M_I$R", (MOP_BASE*)(new COMP128_FLT_MUL$M_I$R())});
     decodeStorage.insert({"V128_FLT_MUL$M_I$M_R", (MOP_BASE*)(new COMP128_FLT_MUL$M_I$M_R())});
     decodeStorage.insert({"V128_FLT_MUL$M_I$M_M", (MOP_BASE*)(new COMP128_FLT_MUL$M_I$M_M())});
     decodeStorage.insert({"V128_FLT_MUL$M_I$M", (MOP_BASE*)(new COMP128_FLT_MUL$M_I$M())});
     decodeStorage.insert({"V128_FLT_MUL$M_M$R_R", (MOP_BASE*)(new COMP128_FLT_MUL$M_M$R_R())});
     decodeStorage.insert({"V128_FLT_MUL$M_M$R_M", (MOP_BASE*)(new COMP128_FLT_MUL$M_M$R_M())});
     decodeStorage.insert({"V128_FLT_MUL$M_M$R", (MOP_BASE*)(new COMP128_FLT_MUL$M_M$R())});
     decodeStorage.insert({"V128_FLT_MUL$M_M$M_R", (MOP_BASE*)(new COMP128_FLT_MUL$M_M$M_R())});
     decodeStorage.insert({"V128_FLT_MUL$M_M$M_M", (MOP_BASE*)(new COMP128_FLT_MUL$M_M$M_M())});
     decodeStorage.insert({"V128_FLT_MUL$M_M$M", (MOP_BASE*)(new COMP128_FLT_MUL$M_M$M())});
     decodeStorage.insert({"V128_FLT_DIV$R_R$R_R", (MOP_BASE*)(new COMP128_FLT_DIV$R_R$R_R())});
     decodeStorage.insert({"V128_FLT_DIV$R_R$R_M", (MOP_BASE*)(new COMP128_FLT_DIV$R_R$R_M())});
     decodeStorage.insert({"V128_FLT_DIV$R_R$R", (MOP_BASE*)(new COMP128_FLT_DIV$R_R$R())});
     decodeStorage.insert({"V128_FLT_DIV$R_R$M_R", (MOP_BASE*)(new COMP128_FLT_DIV$R_R$M_R())});
     decodeStorage.insert({"V128_FLT_DIV$R_R$M_M", (MOP_BASE*)(new COMP128_FLT_DIV$R_R$M_M())});
     decodeStorage.insert({"V128_FLT_DIV$R_R$M", (MOP_BASE*)(new COMP128_FLT_DIV$R_R$M())});
     decodeStorage.insert({"V128_FLT_DIV$R_I$R_R", (MOP_BASE*)(new COMP128_FLT_DIV$R_I$R_R())});
     decodeStorage.insert({"V128_FLT_DIV$R_I$R_M", (MOP_BASE*)(new COMP128_FLT_DIV$R_I$R_M())});
     decodeStorage.insert({"V128_FLT_DIV$R_I$R", (MOP_BASE*)(new COMP128_FLT_DIV$R_I$R())});
     decodeStorage.insert({"V128_FLT_DIV$R_I$M_R", (MOP_BASE*)(new COMP128_FLT_DIV$R_I$M_R())});
     decodeStorage.insert({"V128_FLT_DIV$R_I$M_M", (MOP_BASE*)(new COMP128_FLT_DIV$R_I$M_M())});
     decodeStorage.insert({"V128_FLT_DIV$R_I$M", (MOP_BASE*)(new COMP128_FLT_DIV$R_I$M())});
     decodeStorage.insert({"V128_FLT_DIV$R_M$R_R", (MOP_BASE*)(new COMP128_FLT_DIV$R_M$R_R())});
     decodeStorage.insert({"V128_FLT_DIV$R_M$R_M", (MOP_BASE*)(new COMP128_FLT_DIV$R_M$R_M())});
     decodeStorage.insert({"V128_FLT_DIV$R_M$R", (MOP_BASE*)(new COMP128_FLT_DIV$R_M$R())});
     decodeStorage.insert({"V128_FLT_DIV$R_M$M_R", (MOP_BASE*)(new COMP128_FLT_DIV$R_M$M_R())});
     decodeStorage.insert({"V128_FLT_DIV$R_M$M_M", (MOP_BASE*)(new COMP128_FLT_DIV$R_M$M_M())});
     decodeStorage.insert({"V128_FLT_DIV$R_M$M", (MOP_BASE*)(new COMP128_FLT_DIV$R_M$M())});
     decodeStorage.insert({"V128_FLT_DIV$I_R$R_R", (MOP_BASE*)(new COMP128_FLT_DIV$I_R$R_R())});
     decodeStorage.insert({"V128_FLT_DIV$I_R$R_M", (MOP_BASE*)(new COMP128_FLT_DIV$I_R$R_M())});
     decodeStorage.insert({"V128_FLT_DIV$I_R$R", (MOP_BASE*)(new COMP128_FLT_DIV$I_R$R())});
     decodeStorage.insert({"V128_FLT_DIV$I_R$M_R", (MOP_BASE*)(new COMP128_FLT_DIV$I_R$M_R())});
     decodeStorage.insert({"V128_FLT_DIV$I_R$M_M", (MOP_BASE*)(new COMP128_FLT_DIV$I_R$M_M())});
     decodeStorage.insert({"V128_FLT_DIV$I_R$M", (MOP_BASE*)(new COMP128_FLT_DIV$I_R$M())});
     decodeStorage.insert({"V128_FLT_DIV$I_I$R_R", (MOP_BASE*)(new COMP128_FLT_DIV$I_I$R_R())});
     decodeStorage.insert({"V128_FLT_DIV$I_I$R_M", (MOP_BASE*)(new COMP128_FLT_DIV$I_I$R_M())});
     decodeStorage.insert({"V128_FLT_DIV$I_I$R", (MOP_BASE*)(new COMP128_FLT_DIV$I_I$R())});
     decodeStorage.insert({"V128_FLT_DIV$I_I$M_R", (MOP_BASE*)(new COMP128_FLT_DIV$I_I$M_R())});
     decodeStorage.insert({"V128_FLT_DIV$I_I$M_M", (MOP_BASE*)(new COMP128_FLT_DIV$I_I$M_M())});
     decodeStorage.insert({"V128_FLT_DIV$I_I$M", (MOP_BASE*)(new COMP128_FLT_DIV$I_I$M())});
     decodeStorage.insert({"V128_FLT_DIV$I_M$R_R", (MOP_BASE*)(new COMP128_FLT_DIV$I_M$R_R())});
     decodeStorage.insert({"V128_FLT_DIV$I_M$R_M", (MOP_BASE*)(new COMP128_FLT_DIV$I_M$R_M())});
     decodeStorage.insert({"V128_FLT_DIV$I_M$R", (MOP_BASE*)(new COMP128_FLT_DIV$I_M$R())});
     decodeStorage.insert({"V128_FLT_DIV$I_M$M_R", (MOP_BASE*)(new COMP128_FLT_DIV$I_M$M_R())});
     decodeStorage.insert({"V128_FLT_DIV$I_M$M_M", (MOP_BASE*)(new COMP128_FLT_DIV$I_M$M_M())});
     decodeStorage.insert({"V128_FLT_DIV$I_M$M", (MOP_BASE*)(new COMP128_FLT_DIV$I_M$M())});
     decodeStorage.insert({"V128_FLT_DIV$M_R$R_R", (MOP_BASE*)(new COMP128_FLT_DIV$M_R$R_R())});
     decodeStorage.insert({"V128_FLT_DIV$M_R$R_M", (MOP_BASE*)(new COMP128_FLT_DIV$M_R$R_M())});
     decodeStorage.insert({"V128_FLT_DIV$M_R$R", (MOP_BASE*)(new COMP128_FLT_DIV$M_R$R())});
     decodeStorage.insert({"V128_FLT_DIV$M_R$M_R", (MOP_BASE*)(new COMP128_FLT_DIV$M_R$M_R())});
     decodeStorage.insert({"V128_FLT_DIV$M_R$M_M", (MOP_BASE*)(new COMP128_FLT_DIV$M_R$M_M())});
     decodeStorage.insert({"V128_FLT_DIV$M_R$M", (MOP_BASE*)(new COMP128_FLT_DIV$M_R$M())});
     decodeStorage.insert({"V128_FLT_DIV$M_I$R_R", (MOP_BASE*)(new COMP128_FLT_DIV$M_I$R_R())});
     decodeStorage.insert({"V128_FLT_DIV$M_I$R_M", (MOP_BASE*)(new COMP128_FLT_DIV$M_I$R_M())});
     decodeStorage.insert({"V128_FLT_DIV$M_I$R", (MOP_BASE*)(new COMP128_FLT_DIV$M_I$R())});
     decodeStorage.insert({"V128_FLT_DIV$M_I$M_R", (MOP_BASE*)(new COMP128_FLT_DIV$M_I$M_R())});
     decodeStorage.insert({"V128_FLT_DIV$M_I$M_M", (MOP_BASE*)(new COMP128_FLT_DIV$M_I$M_M())});
     decodeStorage.insert({"V128_FLT_DIV$M_I$M", (MOP_BASE*)(new COMP128_FLT_DIV$M_I$M())});
     decodeStorage.insert({"V128_FLT_DIV$M_M$R_R", (MOP_BASE*)(new COMP128_FLT_DIV$M_M$R_R())});
     decodeStorage.insert({"V128_FLT_DIV$M_M$R_M", (MOP_BASE*)(new COMP128_FLT_DIV$M_M$R_M())});
     decodeStorage.insert({"V128_FLT_DIV$M_M$R", (MOP_BASE*)(new COMP128_FLT_DIV$M_M$R())});
     decodeStorage.insert({"V128_FLT_DIV$M_M$M_R", (MOP_BASE*)(new COMP128_FLT_DIV$M_M$M_R())});
     decodeStorage.insert({"V128_FLT_DIV$M_M$M_M", (MOP_BASE*)(new COMP128_FLT_DIV$M_M$M_M())});
     decodeStorage.insert({"V128_FLT_DIV$M_M$M", (MOP_BASE*)(new COMP128_FLT_DIV$M_M$M())});
     decodeStorage.insert({"MOV$R$R", (MOP_BASE*)(new MOV_SIM$R$R())});
     decodeStorage.insert({"LEA$R$R", (MOP_BASE*)(new MOV_SIM$R$R())});
     decodeStorage.insert({"PUSH$R$R", (MOP_BASE*)(new MOV_SIM$R$R())});
     decodeStorage.insert({"POP$R$R", (MOP_BASE*)(new MOV_SIM$R$R())});
     decodeStorage.insert({"V64_MOV$R$R", (MOP_BASE*)(new MOV_SIM$R$R())});
     decodeStorage.insert({"JMP$R$R", (MOP_BASE*)(new MOV_SIM$R$R())});
     decodeStorage.insert({"MOVSXD$R$R", (MOP_BASE*)(new MOV_SIM$R$R())});
     decodeStorage.insert({"MOVZX$R$R", (MOP_BASE*)(new MOV_SIM$R$R())});
     decodeStorage.insert({"MOV$R$M", (MOP_BASE*)(new MOV_SIM$R$M())});
     decodeStorage.insert({"LEA$R$M", (MOP_BASE*)(new MOV_SIM$R$M())});
     decodeStorage.insert({"PUSH$R$M", (MOP_BASE*)(new MOV_SIM$R$M())});
     decodeStorage.insert({"POP$R$M", (MOP_BASE*)(new MOV_SIM$R$M())});
     decodeStorage.insert({"V64_MOV$R$M", (MOP_BASE*)(new MOV_SIM$R$M())});
     decodeStorage.insert({"JMP$R$M", (MOP_BASE*)(new MOV_SIM$R$M())});
     decodeStorage.insert({"MOVSXD$R$M", (MOP_BASE*)(new MOV_SIM$R$M())});
     decodeStorage.insert({"MOVZX$R$M", (MOP_BASE*)(new MOV_SIM$R$M())});
     decodeStorage.insert({"MOV$I$R", (MOP_BASE*)(new MOV_SIM$I$R())});
     decodeStorage.insert({"LEA$I$R", (MOP_BASE*)(new MOV_SIM$I$R())});
     decodeStorage.insert({"PUSH$I$R", (MOP_BASE*)(new MOV_SIM$I$R())});
     decodeStorage.insert({"POP$I$R", (MOP_BASE*)(new MOV_SIM$I$R())});
     decodeStorage.insert({"V64_MOV$I$R", (MOP_BASE*)(new MOV_SIM$I$R())});
     decodeStorage.insert({"JMP$I$R", (MOP_BASE*)(new MOV_SIM$I$R())});
     decodeStorage.insert({"MOVSXD$I$R", (MOP_BASE*)(new MOV_SIM$I$R())});
     decodeStorage.insert({"MOVZX$I$R", (MOP_BASE*)(new MOV_SIM$I$R())});
     decodeStorage.insert({"MOV$I$M", (MOP_BASE*)(new MOV_SIM$I$M())});
     decodeStorage.insert({"LEA$I$M", (MOP_BASE*)(new MOV_SIM$I$M())});
     decodeStorage.insert({"PUSH$I$M", (MOP_BASE*)(new MOV_SIM$I$M())});
     decodeStorage.insert({"POP$I$M", (MOP_BASE*)(new MOV_SIM$I$M())});
     decodeStorage.insert({"V64_MOV$I$M", (MOP_BASE*)(new MOV_SIM$I$M())});
     decodeStorage.insert({"JMP$I$M", (MOP_BASE*)(new MOV_SIM$I$M())});
     decodeStorage.insert({"MOVSXD$I$M", (MOP_BASE*)(new MOV_SIM$I$M())});
     decodeStorage.insert({"MOVZX$I$M", (MOP_BASE*)(new MOV_SIM$I$M())});
     decodeStorage.insert({"MOV$M$R", (MOP_BASE*)(new MOV_SIM$M$R())});
     decodeStorage.insert({"LEA$M$R", (MOP_BASE*)(new MOV_SIM$M$R())});
     decodeStorage.insert({"PUSH$M$R", (MOP_BASE*)(new MOV_SIM$M$R())});
     decodeStorage.insert({"POP$M$R", (MOP_BASE*)(new MOV_SIM$M$R())});
     decodeStorage.insert({"V64_MOV$M$R", (MOP_BASE*)(new MOV_SIM$M$R())});
     decodeStorage.insert({"JMP$M$R", (MOP_BASE*)(new MOV_SIM$M$R())});
     decodeStorage.insert({"MOVSXD$M$R", (MOP_BASE*)(new MOV_SIM$M$R())});
     decodeStorage.insert({"MOVZX$M$R", (MOP_BASE*)(new MOV_SIM$M$R())});
     decodeStorage.insert({"MOV$M$M", (MOP_BASE*)(new MOV_SIM$M$M())});
     decodeStorage.insert({"LEA$M$M", (MOP_BASE*)(new MOV_SIM$M$M())});
     decodeStorage.insert({"PUSH$M$M", (MOP_BASE*)(new MOV_SIM$M$M())});
     decodeStorage.insert({"POP$M$M", (MOP_BASE*)(new MOV_SIM$M$M())});
     decodeStorage.insert({"V64_MOV$M$M", (MOP_BASE*)(new MOV_SIM$M$M())});
     decodeStorage.insert({"JMP$M$M", (MOP_BASE*)(new MOV_SIM$M$M())});
     decodeStorage.insert({"MOVSXD$M$M", (MOP_BASE*)(new MOV_SIM$M$M())});
     decodeStorage.insert({"MOVZX$M$M", (MOP_BASE*)(new MOV_SIM$M$M())});
     decodeStorage.insert({"V128_MOV$R$R", (MOP_BASE*)(new MOV128_SIM$R$R())});
     decodeStorage.insert({"V128_MOV$R$M", (MOP_BASE*)(new MOV128_SIM$R$M())});
     decodeStorage.insert({"V128_MOV$I$R", (MOP_BASE*)(new MOV128_SIM$I$R())});
     decodeStorage.insert({"V128_MOV$I$M", (MOP_BASE*)(new MOV128_SIM$I$M())});
     decodeStorage.insert({"V128_MOV$M$R", (MOP_BASE*)(new MOV128_SIM$M$R())});
     decodeStorage.insert({"V128_MOV$M$M", (MOP_BASE*)(new MOV128_SIM$M$M())});
     decodeStorage.insert({"CMP$R_R$", (MOP_BASE*)(new CMP_ALL$R_R$())});
     decodeStorage.insert({"TEST$R_R$", (MOP_BASE*)(new CMP_ALL$R_R$())});
     decodeStorage.insert({"JNB$R_R$", (MOP_BASE*)(new CMP_ALL$R_R$())});
     decodeStorage.insert({"CMP$R_I$", (MOP_BASE*)(new CMP_ALL$R_I$())});
     decodeStorage.insert({"TEST$R_I$", (MOP_BASE*)(new CMP_ALL$R_I$())});
     decodeStorage.insert({"JNB$R_I$", (MOP_BASE*)(new CMP_ALL$R_I$())});
     decodeStorage.insert({"CMP$R_M$", (MOP_BASE*)(new CMP_ALL$R_M$())});
     decodeStorage.insert({"TEST$R_M$", (MOP_BASE*)(new CMP_ALL$R_M$())});
     decodeStorage.insert({"JNB$R_M$", (MOP_BASE*)(new CMP_ALL$R_M$())});
     decodeStorage.insert({"CMP$I_R$", (MOP_BASE*)(new CMP_ALL$I_R$())});
     decodeStorage.insert({"TEST$I_R$", (MOP_BASE*)(new CMP_ALL$I_R$())});
     decodeStorage.insert({"JNB$I_R$", (MOP_BASE*)(new CMP_ALL$I_R$())});
     decodeStorage.insert({"CMP$I_I$", (MOP_BASE*)(new CMP_ALL$I_I$())});
     decodeStorage.insert({"TEST$I_I$", (MOP_BASE*)(new CMP_ALL$I_I$())});
     decodeStorage.insert({"JNB$I_I$", (MOP_BASE*)(new CMP_ALL$I_I$())});
     decodeStorage.insert({"CMP$I_M$", (MOP_BASE*)(new CMP_ALL$I_M$())});
     decodeStorage.insert({"TEST$I_M$", (MOP_BASE*)(new CMP_ALL$I_M$())});
     decodeStorage.insert({"JNB$I_M$", (MOP_BASE*)(new CMP_ALL$I_M$())});
     decodeStorage.insert({"CMP$M_R$", (MOP_BASE*)(new CMP_ALL$M_R$())});
     decodeStorage.insert({"TEST$M_R$", (MOP_BASE*)(new CMP_ALL$M_R$())});
     decodeStorage.insert({"JNB$M_R$", (MOP_BASE*)(new CMP_ALL$M_R$())});
     decodeStorage.insert({"CMP$M_I$", (MOP_BASE*)(new CMP_ALL$M_I$())});
     decodeStorage.insert({"TEST$M_I$", (MOP_BASE*)(new CMP_ALL$M_I$())});
     decodeStorage.insert({"JNB$M_I$", (MOP_BASE*)(new CMP_ALL$M_I$())});
     decodeStorage.insert({"CMP$M_M$", (MOP_BASE*)(new CMP_ALL$M_M$())});
     decodeStorage.insert({"TEST$M_M$", (MOP_BASE*)(new CMP_ALL$M_M$())});
     decodeStorage.insert({"JNB$M_M$", (MOP_BASE*)(new CMP_ALL$M_M$())});
     decodeStorage.insert({"JMP$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JE$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JZ$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JL$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JB$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JLE$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JBE$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JG$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JA$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JGE$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JAE$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JNL$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JNE$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JNZ$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JNB$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JNBE$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
     decodeStorage.insert({"JNLE$R$R", (MOP_BASE*)(new CTRL_ALL$R$R())});
}




MOP_BASE*
X86_DECODER::decodeMOP(RT_INSTR& rt_instr) {

auto finder = decodeStorage.find(rt_instr.getDecodeKey());
return ( finder == decodeStorage.end() ) ? simpleMop: finder->second;

}
}
