#include"X86_mop.h"
#include"models/inst_model/rt_instr.h"



namespace traceBuilder::model {



using namespace stat;




void COMP_INT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_R$R_R$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_R$R_T$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_R$R$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_R$T_R$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_R$T_T$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_R$T$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_T$R_R$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_T$R_T$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_T$R$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_T$T_R$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_T$T_T$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_T$T$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_T$R_R$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_T$R_T$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_T$R$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_T$T_R$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_T$T_T$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$R_T$T$1();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_R$R_R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_R$R_T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_R$R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_R$T_R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_R$T_T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_R$T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$R_R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$R_T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$T_R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$T_T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$R_R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$R_T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$T_R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$T_T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_R$R_R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_R$R_T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_R$R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_R$T_R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_R$T_T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_R$T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$R_R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$R_T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$T_R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$T_T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$R_R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$R_T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$T_R$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$T_T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntAlu$T_T$T$1();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_R$R_R$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_R$R_T$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_R$R$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_R$T_R$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_R$T_T$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_R$T$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_T$R_R$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_T$R_T$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_T$R$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_T$T_R$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_T$T_T$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_T$T$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_T$R_R$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_T$R_T$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_T$R$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_T$T_R$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_T$T_T$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$R_T$T$2();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_R$R_R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_R$R_T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_R$R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_R$T_R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_R$T_T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_R$T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$R_R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$R_T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$T_R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$T_T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$R_R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$R_T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$T_R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$T_T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_R$R_R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_R$R_T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_R$R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_R$T_R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_R$T_T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_R$T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$R_R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$R_T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$T_R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$T_T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$R_R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$R_T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$T_R$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$T_T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntMult$T_T$T$2();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_R$R_R$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_R$R_T$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_R$R$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_R$T_R$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_R$T_T$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_R$T$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_T$R_R$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_T$R_T$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_T$R$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_T$T_R$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_T$T_T$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_T$T$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_T$R_R$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_T$R_T$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_T$R$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_T$T_R$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_T$T_T$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$R_T$T$3();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_R$R_R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_R$R_T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_R$R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_R$T_R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_R$T_T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_R$T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$R_R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$R_T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$T_R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$T_T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$R_R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$R_T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$T_R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$T_T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_R$R_R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_R$R_T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_R$R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_R$T_R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_R$T_T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_R$T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$R_R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$R_T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$T_R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$T_T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$R_R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$R_T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$T_R$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$T_T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new IntDiv$T_T$T$3();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_R$R_R$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_R$R_T$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_R$R$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_R$T_R$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_R$T_T$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_R$T$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_T$R_R$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_T$R_T$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_T$R$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_T$T_R$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_T$T_T$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_T$T$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_T$R_R$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_T$R_T$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_T$R$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_T$T_R$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_T$T_T$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$R_T$T$4();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_R$R_R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_R$R_T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_R$R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_R$T_R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_R$T_T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_R$T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$R_R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$R_T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$T_R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$T_T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$R_R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$R_T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$T_R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$T_T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_R$R_R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_R$R_T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_R$R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_R$T_R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_R$T_T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_R$T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$R_R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$R_T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$T_R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$T_T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$R_R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$R_T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$T_R$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$T_T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatAdd$T_T$T$4();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_R$R_R$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_R$R_T$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_R$R$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_R$T_R$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_R$T_T$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_R$T$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_T$R_R$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_T$R_T$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_T$R$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_T$T_R$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_T$T_T$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_T$T$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_T$R_R$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_T$R_T$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_T$R$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_T$T_R$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_T$T_T$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$R_T$T$7();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_R$R_R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_R$R_T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_R$R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_R$T_R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_R$T_T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_R$T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$R_R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$R_T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$T_R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$T_T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$R_R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$R_T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$T_R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$T_T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_R$R_R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_R$R_T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_R$R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_R$T_R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_R$T_T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_R$T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$R_R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$R_T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$T_R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$T_T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$R_R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$R_T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$T_R$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$T_T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatMult$T_T$T$7();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_R$R_R$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_R$R_T$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_R$R$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_R$T_R$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_R$T_T$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_R$T$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_T$R_R$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_T$R_T$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_T$R$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_T$T_R$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_T$T_T$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_T$T$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_T$R_R$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_T$R_T$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_T$R$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_T$T_R$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_T$T_T$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$R_T$T$9();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_R$R_R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_R$R_T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_R$R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_R$T_R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_R$T_T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_R$T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$R_R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$R_T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$T_R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$T_T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$R_R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$R_T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$T_R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$T_T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_R$R_R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_R$R_T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_R$R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_R$T_R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_R$T_T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_R$T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$R_R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$R_T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$T_R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$T_T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$R_R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$R_T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$T_R$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$T_T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new FloatDiv$T_T$T$9();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_INT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_INT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128X_FLT_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128X_FLT_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_INT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_INT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1, opr_oprStFrom1_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdFrom1
, opr_oprStFrom0_1
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0, opr_oprStFrom1_1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 6);
    OPR_TREG opr_oprStFrom1_1 = OPR_TREG(START_TREGID + 7);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1, opr_oprStFrom1_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_1->addMeta(opr_oprStFrom1_1
, opr_oprStTo1
, 8, 16);
    uop_uopSt1_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256_FLT_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256_FLT_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo0_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprLdTo1_1 = OPR_TREG(START_TREGID + 3);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 4);
    OPR_TREG opr_oprStFrom0_1 = OPR_TREG(START_TREGID + 5);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_1->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_1
, 8, 16
);
    results.push_back(uop_uopLd0_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_1->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_1
, 8, 16
);
    results.push_back(uop_uopLd1_1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_1, opr_oprLdTo1_1
, opr_oprStFrom0_1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_1, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_1, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_1->addMeta(opr_oprStFrom0_1
, opr_oprStTo0
, 8, 16);
    uop_uopSt0_1->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_R$T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$R_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_R$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_R$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T_T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_INT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_INT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdAlu$T_T$T$14();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_R$T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$R_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_R$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_R$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T_T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdMult$T_T$T$18();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_R$T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$R_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_R$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_R$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T_T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdDiv$T_T$T$22();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_R$T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_R$T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$R_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_R$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatMult$T_T$T$30();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1, 1
, 1, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1, 1
, 1);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_R$T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1, 1
);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 1
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 1, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 1);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP256X_FLT_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP256X_FLT_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_1 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_1->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_1->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_1);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_1, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_R$T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$R_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_R$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_R$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T_T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_INT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_INT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdAlu$T_T$T$14();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_R$T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$R_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_R$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_R$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T_T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdMult$T_T$T$18();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_R$T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$R_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_R$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_R$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T_T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdDiv$T_T$T$22();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_R$T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$R_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_R$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatAlu$T_T$T$25();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_R$T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$R_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_R$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_R$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T_T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatMult$T_T$T$30();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0, 0
, 0, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStTo0
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0, 0
, 0);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_R$T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0, 0
);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$R_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStTo1
, 0
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0, opr_oprStFrom1_0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStTo0
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStTo1
, 0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0, opr_oprStFrom1_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_R$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom0_0
, 0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStTo1
, 0, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0, opr_oprStFrom1_0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStTo0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStTo0
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_oprStTo1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStTo1
, 0);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_oprStTo1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_oprStFrom1_0 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0, opr_oprStFrom1_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt1_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt1_0->addMeta(opr_oprStFrom1_0
, opr_oprStTo1
, 0, 8);
    uop_uopSt1_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt1_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP64_FLT_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP64_FLT_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_oprStTo0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_oprStFrom0_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_compUop_0 = new SimdFloatDiv$T_T$T$28();
    uop_compUop_0->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom0_0
);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_compUop_0->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_compUop_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopSt0_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_uopSt0_0->addMeta(opr_oprStFrom0_0
, opr_oprStTo0
, 0, 8);
    uop_uopSt0_0->addDep<DEP_TEMP>(uop_compUop_0, nullptr);
    results.push_back(uop_uopSt0_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_INT$R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_INT$R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$R$R$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_INT$R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_INT$R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$R$T$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_INT$I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_INT$I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$I$R$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_INT$I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_INT$I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$I$T$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_INT$M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_INT$M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_INT$M$R$47();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0, 8
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_INT$M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_INT$M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0, 8
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_FLT$R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_FLT$R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$R$R$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_FLT$R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_FLT$R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$R$T$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_FLT$I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_FLT$I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$I$R$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_FLT$I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_FLT$I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$I$T$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_FLT$M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_FLT$M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_FLT$M$R$49();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0, 8
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_FLT$M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_FLT$M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0, 8
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_INT$R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_INT$R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$R$R$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_INT$R$R$48();
    uop_ld_1->addMeta(opr_srcOpr
, opr_desOpr
, 1
, 1);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_INT$R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_INT$R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_ld_to_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$R$T$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_INT$R$T$48();
    uop_ld_1->addMeta(opr_srcOpr
, opr_ld_to_1
, 1
);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_1->addMeta(opr_ld_to_0
, opr_desOpr
, 8, 16);
    uop_st_1->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_INT$I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_INT$I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$I$R$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_INT$I$R$48();
    uop_ld_1->addMeta(opr_srcOpr
, opr_desOpr
, 1);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_INT$I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_INT$I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_ld_to_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$I$T$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_INT$I$T$48();
    uop_ld_1->addMeta(opr_srcOpr
, opr_ld_to_1
);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_1->addMeta(opr_ld_to_0
, opr_desOpr
, 8, 16);
    uop_st_1->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_INT$M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_INT$M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_INT$M$R$47();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0, 8
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_LD_INT$M$R$47();
    uop_ld_1->addMeta(opr_srcOpr
, opr_desOpr
, 8, 16
, 1);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_INT$M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_INT$M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_ld_to_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0, 8
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_ld_1->addMeta(opr_srcOpr
, opr_ld_to_1
, 8, 16
);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_1->addMeta(opr_ld_to_0
, opr_desOpr
, 8, 16);
    uop_st_1->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_FLT$R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_FLT$R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$R$R$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_FLT$R$R$50();
    uop_ld_1->addMeta(opr_srcOpr
, opr_desOpr
, 1
, 1);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_FLT$R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_FLT$R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_ld_to_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$R$T$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_FLT$R$T$50();
    uop_ld_1->addMeta(opr_srcOpr
, opr_ld_to_1
, 1
);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_1->addMeta(opr_ld_to_0
, opr_desOpr
, 8, 16);
    uop_st_1->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_FLT$I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_FLT$I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$I$R$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_FLT$I$R$50();
    uop_ld_1->addMeta(opr_srcOpr
, opr_desOpr
, 1);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_FLT$I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_FLT$I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_ld_to_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$I$T$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_FLT$I$T$50();
    uop_ld_1->addMeta(opr_srcOpr
, opr_ld_to_1
);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_1->addMeta(opr_ld_to_0
, opr_desOpr
, 8, 16);
    uop_st_1->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_FLT$M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_FLT$M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_FLT$M$R$49();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0, 8
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_LD_FLT$M$R$49();
    uop_ld_1->addMeta(opr_srcOpr
, opr_desOpr
, 8, 16
, 1);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_FLT$M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_FLT$M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_ld_to_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0, 8
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_ld_1->addMeta(opr_srcOpr
, opr_ld_to_1
, 8, 16
);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_1->addMeta(opr_ld_to_0
, opr_desOpr
, 8, 16);
    uop_st_1->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128X_INT$R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128X_INT$R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$R$R$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128X_INT$R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128X_INT$R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$R$T$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128X_INT$I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128X_INT$I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$I$R$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128X_INT$I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128X_INT$I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$I$T$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128X_INT$M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128X_INT$M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_INT$M$R$47();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0, 8
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128X_INT$M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128X_INT$M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0, 8
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128X_FLT$R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128X_FLT$R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$R$R$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128X_FLT$R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128X_FLT$R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$R$T$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128X_FLT$I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128X_FLT$I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$I$R$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128X_FLT$I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128X_FLT$I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$I$T$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128X_FLT$M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128X_FLT$M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_FLT$M$R$49();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0, 8
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128X_FLT$M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128X_FLT$M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0, 8
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256_INT$R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256_INT$R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$R$R$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_INT$R$R$48();
    uop_ld_1->addMeta(opr_srcOpr
, opr_desOpr
, 1
, 1);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_2 = new MOV_MEM_ST_INT$R$R$48();
    uop_ld_2->addMeta(opr_srcOpr
, opr_desOpr
, 2
, 2);
    results.push_back(uop_ld_2);
///////////////////////////////////////////////////////////////////
    auto uop_ld_3 = new MOV_MEM_ST_INT$R$R$48();
    uop_ld_3->addMeta(opr_srcOpr
, opr_desOpr
, 3
, 3);
    results.push_back(uop_ld_3);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256_INT$R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256_INT$R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_ld_to_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_ld_to_2 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_ld_to_3 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$R$T$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_INT$R$T$48();
    uop_ld_1->addMeta(opr_srcOpr
, opr_ld_to_1
, 1
);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_2 = new MOV_MEM_ST_INT$R$T$48();
    uop_ld_2->addMeta(opr_srcOpr
, opr_ld_to_2
, 2
);
    results.push_back(uop_ld_2);
///////////////////////////////////////////////////////////////////
    auto uop_ld_3 = new MOV_MEM_ST_INT$R$T$48();
    uop_ld_3->addMeta(opr_srcOpr
, opr_ld_to_3
, 3
);
    results.push_back(uop_ld_3);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_1->addMeta(opr_ld_to_0
, opr_desOpr
, 8, 16);
    uop_st_1->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_1);
///////////////////////////////////////////////////////////////////
    auto uop_st_2 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_2->addMeta(opr_ld_to_0
, opr_desOpr
, 16, 24);
    uop_st_2->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_2);
///////////////////////////////////////////////////////////////////
    auto uop_st_3 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_3->addMeta(opr_ld_to_0
, opr_desOpr
, 24, 32);
    uop_st_3->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_3);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256_INT$I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256_INT$I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$I$R$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_INT$I$R$48();
    uop_ld_1->addMeta(opr_srcOpr
, opr_desOpr
, 1);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_2 = new MOV_MEM_ST_INT$I$R$48();
    uop_ld_2->addMeta(opr_srcOpr
, opr_desOpr
, 2);
    results.push_back(uop_ld_2);
///////////////////////////////////////////////////////////////////
    auto uop_ld_3 = new MOV_MEM_ST_INT$I$R$48();
    uop_ld_3->addMeta(opr_srcOpr
, opr_desOpr
, 3);
    results.push_back(uop_ld_3);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256_INT$I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256_INT$I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_ld_to_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_ld_to_2 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_ld_to_3 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$I$T$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_INT$I$T$48();
    uop_ld_1->addMeta(opr_srcOpr
, opr_ld_to_1
);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_2 = new MOV_MEM_ST_INT$I$T$48();
    uop_ld_2->addMeta(opr_srcOpr
, opr_ld_to_2
);
    results.push_back(uop_ld_2);
///////////////////////////////////////////////////////////////////
    auto uop_ld_3 = new MOV_MEM_ST_INT$I$T$48();
    uop_ld_3->addMeta(opr_srcOpr
, opr_ld_to_3
);
    results.push_back(uop_ld_3);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_1->addMeta(opr_ld_to_0
, opr_desOpr
, 8, 16);
    uop_st_1->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_1);
///////////////////////////////////////////////////////////////////
    auto uop_st_2 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_2->addMeta(opr_ld_to_0
, opr_desOpr
, 16, 24);
    uop_st_2->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_2);
///////////////////////////////////////////////////////////////////
    auto uop_st_3 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_3->addMeta(opr_ld_to_0
, opr_desOpr
, 24, 32);
    uop_st_3->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_3);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256_INT$M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256_INT$M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_INT$M$R$47();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0, 8
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_LD_INT$M$R$47();
    uop_ld_1->addMeta(opr_srcOpr
, opr_desOpr
, 8, 16
, 1);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_2 = new MOV_MEM_LD_INT$M$R$47();
    uop_ld_2->addMeta(opr_srcOpr
, opr_desOpr
, 16, 24
, 2);
    results.push_back(uop_ld_2);
///////////////////////////////////////////////////////////////////
    auto uop_ld_3 = new MOV_MEM_LD_INT$M$R$47();
    uop_ld_3->addMeta(opr_srcOpr
, opr_desOpr
, 24, 32
, 3);
    results.push_back(uop_ld_3);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256_INT$M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256_INT$M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_ld_to_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_ld_to_2 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_ld_to_3 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0, 8
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_LD_INT$M$T$47();
    uop_ld_1->addMeta(opr_srcOpr
, opr_ld_to_1
, 8, 16
);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_2 = new MOV_MEM_LD_INT$M$T$47();
    uop_ld_2->addMeta(opr_srcOpr
, opr_ld_to_2
, 16, 24
);
    results.push_back(uop_ld_2);
///////////////////////////////////////////////////////////////////
    auto uop_ld_3 = new MOV_MEM_LD_INT$M$T$47();
    uop_ld_3->addMeta(opr_srcOpr
, opr_ld_to_3
, 24, 32
);
    results.push_back(uop_ld_3);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_1 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_1->addMeta(opr_ld_to_0
, opr_desOpr
, 8, 16);
    uop_st_1->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_1);
///////////////////////////////////////////////////////////////////
    auto uop_st_2 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_2->addMeta(opr_ld_to_0
, opr_desOpr
, 16, 24);
    uop_st_2->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_2);
///////////////////////////////////////////////////////////////////
    auto uop_st_3 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_3->addMeta(opr_ld_to_0
, opr_desOpr
, 24, 32);
    uop_st_3->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_3);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256_FLT$R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256_FLT$R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$R$R$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_FLT$R$R$50();
    uop_ld_1->addMeta(opr_srcOpr
, opr_desOpr
, 1
, 1);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_2 = new MOV_MEM_ST_FLT$R$R$50();
    uop_ld_2->addMeta(opr_srcOpr
, opr_desOpr
, 2
, 2);
    results.push_back(uop_ld_2);
///////////////////////////////////////////////////////////////////
    auto uop_ld_3 = new MOV_MEM_ST_FLT$R$R$50();
    uop_ld_3->addMeta(opr_srcOpr
, opr_desOpr
, 3
, 3);
    results.push_back(uop_ld_3);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256_FLT$R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256_FLT$R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_ld_to_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_ld_to_2 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_ld_to_3 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$R$T$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_FLT$R$T$50();
    uop_ld_1->addMeta(opr_srcOpr
, opr_ld_to_1
, 1
);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_2 = new MOV_MEM_ST_FLT$R$T$50();
    uop_ld_2->addMeta(opr_srcOpr
, opr_ld_to_2
, 2
);
    results.push_back(uop_ld_2);
///////////////////////////////////////////////////////////////////
    auto uop_ld_3 = new MOV_MEM_ST_FLT$R$T$50();
    uop_ld_3->addMeta(opr_srcOpr
, opr_ld_to_3
, 3
);
    results.push_back(uop_ld_3);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_1->addMeta(opr_ld_to_0
, opr_desOpr
, 8, 16);
    uop_st_1->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_1);
///////////////////////////////////////////////////////////////////
    auto uop_st_2 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_2->addMeta(opr_ld_to_0
, opr_desOpr
, 16, 24);
    uop_st_2->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_2);
///////////////////////////////////////////////////////////////////
    auto uop_st_3 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_3->addMeta(opr_ld_to_0
, opr_desOpr
, 24, 32);
    uop_st_3->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_3);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256_FLT$I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256_FLT$I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$I$R$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_FLT$I$R$50();
    uop_ld_1->addMeta(opr_srcOpr
, opr_desOpr
, 1);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_2 = new MOV_MEM_ST_FLT$I$R$50();
    uop_ld_2->addMeta(opr_srcOpr
, opr_desOpr
, 2);
    results.push_back(uop_ld_2);
///////////////////////////////////////////////////////////////////
    auto uop_ld_3 = new MOV_MEM_ST_FLT$I$R$50();
    uop_ld_3->addMeta(opr_srcOpr
, opr_desOpr
, 3);
    results.push_back(uop_ld_3);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256_FLT$I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256_FLT$I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_ld_to_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_ld_to_2 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_ld_to_3 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$I$T$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_ST_FLT$I$T$50();
    uop_ld_1->addMeta(opr_srcOpr
, opr_ld_to_1
);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_2 = new MOV_MEM_ST_FLT$I$T$50();
    uop_ld_2->addMeta(opr_srcOpr
, opr_ld_to_2
);
    results.push_back(uop_ld_2);
///////////////////////////////////////////////////////////////////
    auto uop_ld_3 = new MOV_MEM_ST_FLT$I$T$50();
    uop_ld_3->addMeta(opr_srcOpr
, opr_ld_to_3
);
    results.push_back(uop_ld_3);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_1->addMeta(opr_ld_to_0
, opr_desOpr
, 8, 16);
    uop_st_1->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_1);
///////////////////////////////////////////////////////////////////
    auto uop_st_2 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_2->addMeta(opr_ld_to_0
, opr_desOpr
, 16, 24);
    uop_st_2->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_2);
///////////////////////////////////////////////////////////////////
    auto uop_st_3 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_3->addMeta(opr_ld_to_0
, opr_desOpr
, 24, 32);
    uop_st_3->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_3);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256_FLT$M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256_FLT$M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_FLT$M$R$49();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0, 8
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_LD_FLT$M$R$49();
    uop_ld_1->addMeta(opr_srcOpr
, opr_desOpr
, 8, 16
, 1);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_2 = new MOV_MEM_LD_FLT$M$R$49();
    uop_ld_2->addMeta(opr_srcOpr
, opr_desOpr
, 16, 24
, 2);
    results.push_back(uop_ld_2);
///////////////////////////////////////////////////////////////////
    auto uop_ld_3 = new MOV_MEM_LD_FLT$M$R$49();
    uop_ld_3->addMeta(opr_srcOpr
, opr_desOpr
, 24, 32
, 3);
    results.push_back(uop_ld_3);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256_FLT$M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256_FLT$M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_ld_to_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_ld_to_2 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_ld_to_3 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0, 8
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_1 = new MOV_MEM_LD_FLT$M$T$49();
    uop_ld_1->addMeta(opr_srcOpr
, opr_ld_to_1
, 8, 16
);
    results.push_back(uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_ld_2 = new MOV_MEM_LD_FLT$M$T$49();
    uop_ld_2->addMeta(opr_srcOpr
, opr_ld_to_2
, 16, 24
);
    results.push_back(uop_ld_2);
///////////////////////////////////////////////////////////////////
    auto uop_ld_3 = new MOV_MEM_LD_FLT$M$T$49();
    uop_ld_3->addMeta(opr_srcOpr
, opr_ld_to_3
, 24, 32
);
    results.push_back(uop_ld_3);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_1 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_1->addMeta(opr_ld_to_0
, opr_desOpr
, 8, 16);
    uop_st_1->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_1);
///////////////////////////////////////////////////////////////////
    auto uop_st_2 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_2->addMeta(opr_ld_to_0
, opr_desOpr
, 16, 24);
    uop_st_2->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_2);
///////////////////////////////////////////////////////////////////
    auto uop_st_3 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_3->addMeta(opr_ld_to_0
, opr_desOpr
, 24, 32);
    uop_st_3->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_3);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256X_INT$R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256X_INT$R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$R$R$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256X_INT$R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256X_INT$R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$R$T$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256X_INT$I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256X_INT$I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$I$R$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256X_INT$I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256X_INT$I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_INT$I$T$48();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256X_INT$M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256X_INT$M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_INT$M$R$47();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0, 8
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256X_INT$M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256X_INT$M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0, 8
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_INT$T$M$47();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256X_FLT$R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256X_FLT$R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$R$R$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256X_FLT$R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256X_FLT$R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_srcOpr = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$R$T$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256X_FLT$I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256X_FLT$I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$I$R$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256X_FLT$I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256X_FLT$I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_srcOpr = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_ST_FLT$I$T$50();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256X_FLT$M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256X_FLT$M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_desOpr = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_FLT$M$R$49();
    uop_ld_0->addMeta(opr_srcOpr
, opr_desOpr
, 0, 8
, 0);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV256X_FLT$M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV256X_FLT$M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_srcOpr = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_desOpr = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_ld_to_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_ld_0 = new MOV_MEM_LD_FLT$M$T$49();
    uop_ld_0->addMeta(opr_srcOpr
, opr_ld_to_0
, 0, 8
);
    results.push_back(uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_st_0 = new MOV_MEM_LD_FLT$T$M$49();
    uop_st_0->addMeta(opr_ld_to_0
, opr_desOpr
, 0, 8);
    uop_st_0->addDep<DEP_TEMP>(uop_ld_0, nullptr);
    results.push_back(uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_MOP$R_R$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_MOP$R_R$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_cmp = new IntAlu$R_R$$1();
    uop_cmp->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, 0, 0
);
    results.push_back(uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_MOP$R_I$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_MOP$R_I$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_cmp = new IntAlu$R_T$$1();
    uop_cmp->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, 0
);
    uop_cmp->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_MOP$R_M$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_MOP$R_M$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_cmp = new IntAlu$R_T$$1();
    uop_cmp->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, 0
);
    uop_cmp->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_MOP$I_R$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_MOP$I_R$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_cmp = new IntAlu$T_R$$1();
    uop_cmp->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, 0
);
    uop_cmp->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_MOP$I_I$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_MOP$I_I$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_cmp = new IntAlu$T_T$$1();
    uop_cmp->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
);
    uop_cmp->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_cmp->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_MOP$I_M$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_MOP$I_M$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_cmp = new IntAlu$T_T$$1();
    uop_cmp->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
);
    uop_cmp->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_cmp->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_MOP$M_R$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_MOP$M_R$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_cmp = new IntAlu$T_R$$1();
    uop_cmp->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, 0
);
    uop_cmp->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_MOP$M_I$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_MOP$M_I$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_cmp = new IntAlu$T_T$$1();
    uop_cmp->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
);
    uop_cmp->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_cmp->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_MOP$M_M$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_MOP$M_M$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_cmp = new IntAlu$T_T$$1();
    uop_cmp->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
);
    uop_cmp->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_cmp->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CTRL_ALL$R_R_R$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CTRL_ALL$R_R_R$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStFrom1 = * ((OPR_REG*)srcPool[2]);
///////////////////////////////////////////////////////////////////
    auto uop_jmp = new IntAlu$R_R$R$1();
    uop_jmp->addMeta(opr_oprLdFrom0, opr_oprLdFrom1
, opr_oprStFrom1
, 0, 0
, 0);
    results.push_back(uop_jmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CTRL_ALL$R_I_R$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CTRL_ALL$R_I_R$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStFrom1 = * ((OPR_REG*)srcPool[2]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_jmp = new IntAlu$R_T$R$1();
    uop_jmp->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom1
, 0
, 0);
    uop_jmp->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_jmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CTRL_ALL$R_M_R$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CTRL_ALL$R_M_R$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_oprLdFrom0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStFrom1 = * ((OPR_REG*)srcPool[2]);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_jmp = new IntAlu$R_T$R$1();
    uop_jmp->addMeta(opr_oprLdFrom0, opr_oprLdTo1_0
, opr_oprStFrom1
, 0
, 0);
    uop_jmp->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_jmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CTRL_ALL$I_R_R$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CTRL_ALL$I_R_R$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStFrom1 = * ((OPR_REG*)srcPool[2]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_jmp = new IntAlu$T_R$R$1();
    uop_jmp->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom1
, 0
, 0);
    uop_jmp->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_jmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CTRL_ALL$I_I_R$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CTRL_ALL$I_I_R$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStFrom1 = * ((OPR_REG*)srcPool[2]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_jmp = new IntAlu$T_T$R$1();
    uop_jmp->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom1
, 0);
    uop_jmp->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_jmp->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_jmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CTRL_ALL$I_M_R$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CTRL_ALL$I_M_R$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_oprLdFrom0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStFrom1 = * ((OPR_REG*)srcPool[2]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_jmp = new IntAlu$T_T$R$1();
    uop_jmp->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom1
, 0);
    uop_jmp->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_jmp->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_jmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CTRL_ALL$M_R_R$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CTRL_ALL$M_R_R$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_oprLdFrom1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_oprStFrom1 = * ((OPR_REG*)srcPool[2]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_jmp = new IntAlu$T_R$R$1();
    uop_jmp->addMeta(opr_oprLdTo0_0, opr_oprLdFrom1
, opr_oprStFrom1
, 0
, 0);
    uop_jmp->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    results.push_back(uop_jmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CTRL_ALL$M_I_R$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CTRL_ALL$M_I_R$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_oprLdFrom1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_oprStFrom1 = * ((OPR_REG*)srcPool[2]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LDI$I$T$1();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_jmp = new IntAlu$T_T$R$1();
    uop_jmp->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom1
, 0);
    uop_jmp->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_jmp->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_jmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CTRL_ALL$M_M_R$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CTRL_ALL$M_M_R$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_oprLdFrom0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_oprLdFrom1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_oprStFrom1 = * ((OPR_REG*)srcPool[2]);
    OPR_TREG opr_oprLdTo0_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_oprLdTo1_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd0_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd0_0->addMeta(opr_oprLdFrom0
, opr_oprLdTo0_0
, 0, 8
);
    results.push_back(uop_uopLd0_0);
///////////////////////////////////////////////////////////////////
    auto uop_uopLd1_0 = new MOV_MEM_LD_INT$M$T$47();
    uop_uopLd1_0->addMeta(opr_oprLdFrom1
, opr_oprLdTo1_0
, 0, 8
);
    results.push_back(uop_uopLd1_0);
///////////////////////////////////////////////////////////////////
    auto uop_jmp = new IntAlu$T_T$R$1();
    uop_jmp->addMeta(opr_oprLdTo0_0, opr_oprLdTo1_0
, opr_oprStFrom1
, 0);
    uop_jmp->addDep<DEP_TEMP>(uop_uopLd0_0, nullptr);
    uop_jmp->addDep<DEP_TEMP>(uop_uopLd1_0, nullptr);
    results.push_back(uop_jmp);
///////////////////////////////////////////////////////////////////

}

}
