#include"X86_mop.h"
#include"models/inst_model/rt_instr.h"



namespace traceBuilder::model {



using namespace stat;




void COMP_INT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_R$R_R$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_R$R_T$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_R$R$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_R$T_R$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_R$T_T$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_R$T$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_T$R_R$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_T$R_T$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_T$R$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_T$T_R$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_T$T_T$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_T$T$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_T$R_R$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_T$R_T$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_T$R$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_T$T_R$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_T$T_T$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$R_T$T$1();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_R$R_R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_R$R_T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_R$R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_R$T_R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_R$T_T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_R$T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$R_R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$R_T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$T_R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$T_T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$R_R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$R_T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$T_R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$T_T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_R$R_R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_R$R_T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_R$R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_R$T_R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_R$T_T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_R$T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$R_R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$R_T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$T_R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$T_T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$R_R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$R_T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$T_R$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$T_T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_INT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_INT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntAlu$T_T$T$1();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_R$R_R$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_R$R_T$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_R$R$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_R$T_R$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_R$T_T$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_R$T$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_T$R_R$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_T$R_T$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_T$R$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_T$T_R$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_T$T_T$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_T$T$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_T$R_R$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_T$R_T$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_T$R$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_T$T_R$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_T$T_T$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$R_T$T$2();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_R$R_R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_R$R_T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_R$R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_R$T_R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_R$T_T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_R$T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$R_R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$R_T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$T_R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$T_T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$R_R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$R_T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$T_R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$T_T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_R$R_R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_R$R_T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_R$R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_R$T_R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_R$T_T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_R$T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$R_R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$R_T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$T_R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$T_T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$R_R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$R_T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$T_R$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$T_T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntMult$T_T$T$2();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_R$R_R$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_R$R_T$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_R$R$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_R$T_R$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_R$T_T$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_R$T$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_T$R_R$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_T$R_T$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_T$R$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_T$T_R$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_T$T_T$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_T$T$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_T$R_R$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_T$R_T$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_T$R$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_T$T_R$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_T$T_T$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$R_T$T$3();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_R$R_R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_R$R_T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_R$R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_R$T_R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_R$T_T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_R$T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$R_R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$R_T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$T_R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$T_T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$R_R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$R_T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$T_R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$T_T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_R$R_R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_R$R_T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_R$R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_R$T_R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_R$T_T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_R$T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$R_R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$R_T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$T_R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$T_T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$R_R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$R_T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$T_R$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$T_T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new IntDiv$T_T$T$3();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_R$R_R$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_R$R_T$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_R$R$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_R$T_R$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_R$T_T$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_R$T$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_T$R_R$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_T$R_T$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_T$R$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_T$T_R$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_T$T_T$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_T$T$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_T$R_R$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_T$R_T$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_T$R$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_T$T_R$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_T$T_T$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$R_T$T$4();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_R$R_R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_R$R_T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_R$R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_R$T_R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_R$T_T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_R$T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$R_R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$R_T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$T_R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$T_T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$R_R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$R_T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$T_R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$T_T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_R$R_R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_R$R_T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_R$R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_R$T_R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_R$T_T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_R$T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$R_R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$R_T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$T_R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$T_T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$R_R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$R_T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$T_R$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$T_T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatAdd$T_T$T$4();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_R$R_R$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_R$R_T$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_R$R$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_R$T_R$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_R$T_T$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_R$T$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_T$R_R$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_T$R_T$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_T$R$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_T$T_R$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_T$T_T$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_T$T$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_T$R_R$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_T$R_T$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_T$R$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_T$T_R$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_T$T_T$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$R_T$T$7();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_R$R_R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_R$R_T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_R$R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_R$T_R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_R$T_T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_R$T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$R_R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$R_T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$T_R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$T_T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$R_R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$R_T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$T_R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$T_T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_R$R_R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_R$R_T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_R$R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_R$T_R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_R$T_T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_R$T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$R_R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$R_T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$T_R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$T_T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$R_R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$R_T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$T_R$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$T_T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatMult$T_T$T$7();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_R$R_R$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_R$R_T$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_R$R$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_R$T_R$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_R$T_T$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_R$T$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_T$R_R$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_T$R_T$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_T$R$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_T$T_R$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_T$T_T$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_T$T$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_T$R_R$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_T$R_T$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_T$R$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_T$T_R$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_T$T_T$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$R_T$T$9();
    uop_uop_comp->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_R$R_R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_R$R_T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_R$R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_R$T_R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_R$T_T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_R$T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$R_R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$R_T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$T_R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$T_T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$R_R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$R_T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$T_R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$T_T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_R$R_R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_R$R_T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_R$R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_R$T_R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_R$T_T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_R$T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$R_R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$R_T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$T_R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$T_T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$R_R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$R_T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$T_R$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_r_des_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$T_T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0, opr_preDes_1);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_st_1->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP_FLT_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP_FLT_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_0 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp = new FloatDiv$T_T$T$9();
    uop_uop_comp->addMeta(opr_t_0, opr_t_1 ,opr_preDes_0);
    uop_uop_comp->addTemDep(uop_uop_ld_0);
    uop_uop_comp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_comp);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_preDes_0 ,opr_m_des_0);
    uop_uop_st_0->addTemDep(uop_uop_comp);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_R$R_R$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_R$R_R$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_R$R_T$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_R$R_T$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_R$R$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_R$R$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_R$T_R$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_R$T_R$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_R$T_T$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_R$T_T$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_R$T$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_R$T$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_T$R_R$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_T$R_R$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_T$R_T$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_T$R_T$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_T$R$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_T$R$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_T$T_R$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_T$T_R$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_T$T_T$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_T$T_T$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_T$T$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_T$T$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_T$R_R$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_T$R_R$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_T$R_T$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_T$R_T$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_T$R$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_T$R$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_T$T_R$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_T$T_R$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_T$T_T$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_T$T_T$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$R_T$T$14();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$R_T$T$14();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_R$R_R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_R$R_R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_R$R_T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_R$R_T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_R$R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_R$R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_R$T_R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_R$T_R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_R$T_T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_R$T_T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_R$T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_R$T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$R_R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$R_R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$R_T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$R_T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$T_R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$T_R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$T_T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$T_T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$R_R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$R_R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$R_T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$R_T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$T_R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$T_R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$T_T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$T_T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_R$R_R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_R$R_R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_R$R_T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_R$R_T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_R$R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_R$R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_R$T_R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_R$T_R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_R$T_T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_R$T_T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_R$T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_R$T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$R_R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$R_R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$R_T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$R_T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$T_R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$T_R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$T_T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$T_T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$R_R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$R_R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$R_T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$R_T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$T_R$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$T_R$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$T_T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$T_T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_INT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_INT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdAlu$T_T$T$14();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdAlu$T_T$T$14();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_R$R_R$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_R$R_R$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_R$R_T$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_R$R_T$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_R$R$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_R$R$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_R$T_R$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_R$T_R$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_R$T_T$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_R$T_T$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_R$T$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_R$T$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_T$R_R$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_T$R_R$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_T$R_T$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_T$R_T$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_T$R$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_T$R$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_T$T_R$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_T$T_R$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_T$T_T$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_T$T_T$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_T$T$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_T$T$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_T$R_R$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_T$R_R$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_T$R_T$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_T$R_T$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_T$R$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_T$R$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_T$T_R$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_T$T_R$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_T$T_T$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_T$T_T$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$R_T$T$18();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$R_T$T$18();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_R$R_R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_R$R_R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_R$R_T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_R$R_T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_R$R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_R$R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_R$T_R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_R$T_R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_R$T_T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_R$T_T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_R$T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_R$T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$R_R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$R_R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$R_T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$R_T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$T_R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$T_R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$T_T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$T_T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$R_R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$R_R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$R_T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$R_T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$T_R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$T_R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$T_T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$T_T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_R$R_R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_R$R_R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_R$R_T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_R$R_T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_R$R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_R$R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_R$T_R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_R$T_R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_R$T_T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_R$T_T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_R$T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_R$T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$R_R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$R_R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$R_T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$R_T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$T_R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$T_R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$T_T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$T_T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$R_R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$R_R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$R_T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$R_T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$T_R$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$T_R$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$T_T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$T_T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdMult$T_T$T$18();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdMult$T_T$T$18();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_R$R_R$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_R$R_R$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_R$R_T$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_R$R_T$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_R$R$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_R$R$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_R$T_R$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_R$T_R$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_R$T_T$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_R$T_T$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_R$T$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_R$T$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_T$R_R$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_T$R_R$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_T$R_T$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_T$R_T$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_T$R$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_T$R$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_T$T_R$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_T$T_R$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_T$T_T$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_T$T_T$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_T$T$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_T$T$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_T$R_R$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_T$R_R$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_T$R_T$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_T$R_T$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_T$R$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_T$R$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_T$T_R$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_T$T_R$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_T$T_T$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_T$T_T$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$R_T$T$22();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$R_T$T$22();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_R$R_R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_R$R_R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_R$R_T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_R$R_T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_R$R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_R$R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_R$T_R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_R$T_R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_R$T_T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_R$T_T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_R$T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_R$T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$R_R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$R_R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$R_T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$R_T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$T_R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$T_R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$T_T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$T_T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$R_R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$R_R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$R_T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$R_T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$T_R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$T_R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$T_T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$T_T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_R$R_R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_R$R_R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_R$R_T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_R$R_T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_R$R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_R$R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_R$T_R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_R$T_R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_R$T_T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_R$T_T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_R$T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_R$T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$R_R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$R_R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$R_T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$R_T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$T_R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$T_R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$T_T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$T_T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$R_R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$R_R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$R_T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$R_T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$T_R$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$T_R$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$T_T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$T_T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdDiv$T_T$T$22();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdDiv$T_T$T$22();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_R$R_R$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_R$R_R$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_R$R_T$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_R$R_T$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_R$R$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_R$R$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_R$T_R$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_R$T_R$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_R$T_T$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_R$T_T$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_R$T$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_R$T$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_T$R_R$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_T$R_R$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_T$R_T$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_T$R_T$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_T$R$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_T$R$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_T$T_R$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_T$T_R$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_T$T_T$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_T$T_T$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_T$T$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_T$T$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_T$R_R$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_T$R_R$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_T$R_T$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_T$R_T$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_T$R$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_T$R$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_T$T_R$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_T$T_R$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_T$T_T$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_T$T_T$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$R_T$T$25();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$R_T$T$25();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_R$R_R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_R$R_R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_R$R_T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_R$R_T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_R$R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_R$R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_R$T_R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_R$T_R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_R$T_T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_R$T_T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_R$T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_R$T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_R$R_R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_R$R_R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_R$R_T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_R$R_T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_R$R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_R$R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_R$T_R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_R$T_R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_R$T_T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_R$T_T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_R$T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_R$T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$R_R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$R_R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$R_T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$R_T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$T_R$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$T_R$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$T_T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$T_T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatAlu$T_T$T$25();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatAlu$T_T$T$25();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_R$R_R$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_R$R_R$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_R$R_T$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_R$R_T$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_R$R$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_R$R$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_R$T_R$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_R$T_R$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_R$T_T$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_R$T_T$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_R$T$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_R$T$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_T$R_R$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_T$R_R$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_T$R_T$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_T$R_T$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_T$R$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_T$R$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_T$T_R$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_T$T_R$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_T$T_T$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_T$T_T$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_T$T$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_T$T$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_T$R_R$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_T$R_R$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_T$R_T$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_T$R_T$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_T$R$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_T$R$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_T$T_R$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_T$T_R$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_T$T_T$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_T$T_T$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$R_T$T$30();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$R_T$T$30();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_R$R_R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_R$R_R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_R$R_T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_R$R_T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_R$R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_R$R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_R$T_R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_R$T_R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_R$T_T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_R$T_T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_R$T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_R$T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$R_R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$R_R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$R_T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$R_T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$T_R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$T_R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$T_T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$T_T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$R_R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$R_R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$R_T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$R_T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$T_R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$T_R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$T_T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$T_T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_R$R_R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_R$R_R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_R$R_T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_R$R_T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_R$R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_R$R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_R$T_R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_R$T_R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_R$T_T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_R$T_T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_R$T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_R$T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$R_R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$R_R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$R_T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$R_T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$T_R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$T_R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$T_T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$T_T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$R_R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$R_R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$R_T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$R_T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$T_R$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$T_R$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$T_T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$T_T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_MUL$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_MUL$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatMult$T_T$T$30();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatMult$T_T$T$30();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_R$R_R$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_R$R_R$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_R$R_T$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_R$R_T$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_R$R$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_R$R$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_r_des_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_R$T_R$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_R$T_R$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_R$T_T$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_R$T_T$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_R$T$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_R$T$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_r_src_1 ,opr_preDes);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_T$R_R$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_T$R_R$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_T$R_T$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_T$R_T$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_T$R$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_T$R$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_T$T_R$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_T$T_R$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_T$T_T$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_T$T_T$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_T$T$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_T$T$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_T$R_R$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_T$R_R$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_T$R_T$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_T$R_T$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_T$R$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_T$R$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_T$T_R$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_T$T_R$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_T$T_T$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_T$T_T$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$R_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$R_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$R_T$T$28();
    uop_uop_comp_0->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$R_T$T$28();
    uop_uop_comp_1->addMeta(opr_r_src_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_R$R_R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_R$R_R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_R$R_T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_R$R_T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_R$R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_R$R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_R$T_R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_R$T_R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_R$T_T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_R$T_T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_R$T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_R$T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$I_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$I_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_R$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_R$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_R$R_R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_R$R_R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_R$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_R$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_R$R_T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_R$R_T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_R$R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_R$R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_R$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_R$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_R$T_R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_R$T_R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_R$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_R$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_R$T_T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_R$T_T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_R$T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_R$T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_r_src_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_I$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_I$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_I$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_I$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_I$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_I$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_I$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_I$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_M$R_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_M$R_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$R_R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$R_R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_M$R_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_M$R_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$R_T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$R_T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_r_des_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_M$M_R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_M$M_R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_REG& opr_r_des_1 = * ((OPR_REG*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$T_R$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$T_R$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_r_des_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_M$M_M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_M$M_M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_MEM& opr_m_des_1 = * ((OPR_MEM*)desPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
    OPR_TREG opr_preDes_1 = OPR_TREG(START_TREGID + 3);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$T_T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$T_T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes, opr_preDes_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_stl_1->addTemDep(uop_uop_comp_0);
    uop_uop_stl_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_1 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_1->addMeta(opr_preDes_1 ,opr_m_des_1);
    uop_uop_sth_1->addTemDep(uop_uop_comp_0);
    uop_uop_sth_1->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_1);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void COMP128_FLT_DIV$M_M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["COMP128_FLT_DIV$M_M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
    OPR_TREG opr_preDes = OPR_TREG(START_TREGID + 2);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldh_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ldl_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_0 = new SimdFloatDiv$T_T$T$28();
    uop_uop_comp_0->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_0->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_0->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_comp_1 = new SimdFloatDiv$T_T$T$28();
    uop_uop_comp_1->addMeta(opr_t_0, opr_t_1 ,opr_preDes);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_0);
    uop_uop_comp_1->addTemDep(uop_uop_ldh_1);
    uop_uop_comp_1->addTemDep(uop_uop_ldl_1);
    results.push_back(uop_uop_comp_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_0);
    uop_uop_stl_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_preDes ,opr_m_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_0);
    uop_uop_sth_0->addTemDep(uop_uop_comp_1);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_SIM$R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_SIM$R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_x_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_REG$R$R$0();
    uop_uop_st_0->addMeta(opr_r_src_0 ,opr_x_des_0);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_SIM$R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_SIM$R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_x_des_0 = * ((OPR_MEM*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$R$M$48();
    uop_uop_st_0->addMeta(opr_r_src_0 ,opr_x_des_0);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_SIM$I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_SIM$I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_x_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$R$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_x_des_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_SIM$I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_SIM$I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_x_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_t_0 ,opr_x_des_0);
    uop_uop_st_0->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_SIM$M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_SIM$M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_x_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$R$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_x_des_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV_SIM$M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV_SIM$M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_x_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_st_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_st_0->addMeta(opr_t_0 ,opr_x_des_0);
    uop_uop_st_0->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_st_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_SIM$R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_SIM$R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_REG$R$R$0();
    uop_uop_sth_0->addMeta(opr_r_src_0 ,opr_r_des_0);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_SIM$R$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_SIM$R$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_des_0 = * ((OPR_MEM*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$R$M$48();
    uop_uop_sth_0->addMeta(opr_r_src_0 ,opr_m_des_0);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$R$M$48();
    uop_uop_stl_0->addMeta(opr_r_src_0 ,opr_m_des_0);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_SIM$I$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_SIM$I$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_x_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$R$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_x_des_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_SIM$I$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_SIM$I$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_x_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldh_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ldl_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_t_0 ,opr_x_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_ldh_0);
    uop_uop_sth_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_t_0 ,opr_x_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_ldh_0);
    uop_uop_stl_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_SIM$M$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_SIM$M$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_x_des_0 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$R$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_x_des_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void MOV128_SIM$M$M::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["MOV128_SIM$M$M"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_x_des_0 = * ((OPR_MEM*)desPool[0]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldh_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldh_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldh_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ldl_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ldl_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ldl_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_sth_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_sth_0->addMeta(opr_t_0 ,opr_x_des_0);
    uop_uop_sth_0->addTemDep(uop_uop_ldh_0);
    uop_uop_sth_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_sth_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_stl_0 = new MOV_MEM_ST$T$M$48();
    uop_uop_stl_0->addMeta(opr_t_0 ,opr_x_des_0);
    uop_uop_stl_0->addTemDep(uop_uop_ldh_0);
    uop_uop_stl_0->addTemDep(uop_uop_ldl_0);
    results.push_back(uop_uop_stl_0);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_ALL$R_R$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_ALL$R_R$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_cmp = new IntAlu$R_R$$1();
    uop_uop_cmp->addMeta(opr_r_src_0, opr_r_src_1 );
    results.push_back(uop_uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_ALL$R_I$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_ALL$R_I$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_cmp = new IntAlu$R_T$$1();
    uop_uop_cmp->addMeta(opr_r_src_0, opr_t_1 );
    uop_uop_cmp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_ALL$R_M$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_ALL$R_M$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_cmp = new IntAlu$R_T$$1();
    uop_uop_cmp->addMeta(opr_r_src_0, opr_t_1 );
    uop_uop_cmp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_ALL$I_R$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_ALL$I_R$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_cmp = new IntAlu$T_R$$1();
    uop_uop_cmp->addMeta(opr_t_0, opr_r_src_1 );
    uop_uop_cmp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_ALL$I_I$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_ALL$I_I$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_cmp = new IntAlu$T_T$$1();
    uop_uop_cmp->addMeta(opr_t_0, opr_t_1 );
    uop_uop_cmp->addTemDep(uop_uop_ld_0);
    uop_uop_cmp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_ALL$I_M$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_ALL$I_M$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_IMM& opr_i_src_0 = * ((OPR_IMM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_0->addMeta(opr_i_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_cmp = new IntAlu$T_T$$1();
    uop_uop_cmp->addMeta(opr_t_0, opr_t_1 );
    uop_uop_cmp->addTemDep(uop_uop_ld_0);
    uop_uop_cmp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_ALL$M_R$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_ALL$M_R$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_REG& opr_r_src_1 = * ((OPR_REG*)srcPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_cmp = new IntAlu$T_R$$1();
    uop_uop_cmp->addMeta(opr_t_0, opr_r_src_1 );
    uop_uop_cmp->addTemDep(uop_uop_ld_0);
    results.push_back(uop_uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_ALL$M_I$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_ALL$M_I$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_IMM& opr_i_src_1 = * ((OPR_IMM*)srcPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LDI$I$T$0();
    uop_uop_ld_1->addMeta(opr_i_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_cmp = new IntAlu$T_T$$1();
    uop_uop_cmp->addMeta(opr_t_0, opr_t_1 );
    uop_uop_cmp->addTemDep(uop_uop_ld_0);
    uop_uop_cmp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CMP_ALL$M_M$::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CMP_ALL$M_M$"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_MEM& opr_m_src_0 = * ((OPR_MEM*)srcPool[0]);
    OPR_MEM& opr_m_src_1 = * ((OPR_MEM*)srcPool[1]);
    OPR_TREG opr_t_0 = OPR_TREG(START_TREGID + 0);
    OPR_TREG opr_t_1 = OPR_TREG(START_TREGID + 1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_0 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_0->addMeta(opr_m_src_0 ,opr_t_0);
    results.push_back(uop_uop_ld_0);
///////////////////////////////////////////////////////////////////
    auto uop_uop_ld_1 = new MOV_MEM_LD$M$T$47();
    uop_uop_ld_1->addMeta(opr_m_src_1 ,opr_t_1);
    results.push_back(uop_uop_ld_1);
///////////////////////////////////////////////////////////////////
    auto uop_uop_cmp = new IntAlu$T_T$$1();
    uop_uop_cmp->addMeta(opr_t_0, opr_t_1 );
    uop_uop_cmp->addTemDep(uop_uop_ld_0);
    uop_uop_cmp->addTemDep(uop_uop_ld_1);
    results.push_back(uop_uop_cmp);
///////////////////////////////////////////////////////////////////

}
///////////////////////////////////////////////////////////////



void CTRL_ALL$R$R::genUop(std::vector<UOP_BASE*>& results, RT_INSTR* _rt_instr){
    MAIN_STAT["mopGen"]["CTRL_ALL$R$R"].asUINT()++;
    auto srcPool = _rt_instr->getSrcMacroPoolOperands();
    auto desPool = _rt_instr->getDesMacroPoolOperands();
    OPR_REG& opr_r_src_0 = * ((OPR_REG*)srcPool[0]);
    OPR_REG& opr_reg_des_1 = * ((OPR_REG*)desPool[0]);
///////////////////////////////////////////////////////////////////
    auto uop_uop_jmp = new IntAlu$R$R$1();
    uop_uop_jmp->addMeta(opr_r_src_0 ,opr_reg_des_1);
    results.push_back(uop_uop_jmp);
///////////////////////////////////////////////////////////////////

}

}
