#include"X86_dec.h"
#include"models/inst_model/rt_instr.h"




X86_DECODER::X86_DECODER(): DECODER_BASE(){



     decodeStorage.insert({"ADC$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"ADD$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"AND$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"OR$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"ROL$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"ROR$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"SAL$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"SAR$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"SBB$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"SHL$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"SHLD$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"SHR$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"SHRD$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"SUB$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"XCHG$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"XOR$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"CMP$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"INC$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"RCL$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"RCR$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"V64_COMP$R_R$R", (MOP_BASE*)(new SIM_ALU$R_R$R())});
     decodeStorage.insert({"ADC$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"ADD$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"AND$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"OR$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"ROL$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"ROR$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"SAL$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"SAR$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"SBB$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"SHL$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"SHLD$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"SHR$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"SHRD$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"SUB$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"XCHG$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"XOR$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"CMP$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"INC$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"RCL$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"RCR$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"V64_COMP$R_R$M", (MOP_BASE*)(new SIM_ALU$R_R$M())});
     decodeStorage.insert({"ADC$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"ADD$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"AND$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"OR$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"ROL$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"ROR$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"SAL$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"SAR$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"SBB$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"SHL$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"SHLD$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"SHR$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"SHRD$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"SUB$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"XCHG$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"XOR$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"CMP$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"INC$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"RCL$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"RCR$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"V64_COMP$R_I$R", (MOP_BASE*)(new SIM_ALU$R_I$R())});
     decodeStorage.insert({"ADC$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"ADD$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"AND$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"OR$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"ROL$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"ROR$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"SAL$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"SAR$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"SBB$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"SHL$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"SHLD$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"SHR$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"SHRD$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"SUB$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"XCHG$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"XOR$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"CMP$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"INC$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"RCL$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"RCR$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"V64_COMP$R_I$M", (MOP_BASE*)(new SIM_ALU$R_I$M())});
     decodeStorage.insert({"ADC$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"ADD$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"AND$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"OR$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"ROL$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"ROR$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"SAL$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"SAR$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"SBB$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"SHL$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"SHLD$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"SHR$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"SHRD$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"SUB$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"XCHG$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"XOR$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"CMP$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"INC$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"RCL$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"RCR$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"V64_COMP$R_M$R", (MOP_BASE*)(new SIM_ALU$R_M$R())});
     decodeStorage.insert({"ADC$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"ADD$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"AND$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"OR$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"ROL$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"ROR$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"SAL$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"SAR$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"SBB$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"SHL$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"SHLD$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"SHR$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"SHRD$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"SUB$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"XCHG$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"XOR$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"CMP$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"INC$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"RCL$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"RCR$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"V64_COMP$R_M$M", (MOP_BASE*)(new SIM_ALU$R_M$M())});
     decodeStorage.insert({"ADC$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"ADD$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"AND$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"OR$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"ROL$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"ROR$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"SAL$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"SAR$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"SBB$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"SHL$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"SHLD$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"SHR$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"SHRD$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"SUB$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"XCHG$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"XOR$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"CMP$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"INC$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"RCL$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"RCR$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"V64_COMP$I_R$R", (MOP_BASE*)(new SIM_ALU$I_R$R())});
     decodeStorage.insert({"ADC$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"ADD$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"AND$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"OR$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"ROL$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"ROR$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"SAL$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"SAR$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"SBB$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"SHL$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"SHLD$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"SHR$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"SHRD$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"SUB$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"XCHG$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"XOR$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"CMP$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"INC$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"RCL$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"RCR$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"V64_COMP$I_R$M", (MOP_BASE*)(new SIM_ALU$I_R$M())});
     decodeStorage.insert({"ADC$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"ADD$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"AND$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"OR$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"ROL$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"ROR$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"SAL$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"SAR$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"SBB$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"SHL$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"SHLD$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"SHR$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"SHRD$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"SUB$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"XCHG$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"XOR$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"CMP$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"INC$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"RCL$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"RCR$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"V64_COMP$I_I$R", (MOP_BASE*)(new SIM_ALU$I_I$R())});
     decodeStorage.insert({"ADC$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"ADD$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"AND$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"OR$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"ROL$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"ROR$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"SAL$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"SAR$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"SBB$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"SHL$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"SHLD$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"SHR$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"SHRD$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"SUB$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"XCHG$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"XOR$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"CMP$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"INC$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"RCL$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"RCR$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"V64_COMP$I_I$M", (MOP_BASE*)(new SIM_ALU$I_I$M())});
     decodeStorage.insert({"ADC$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"ADD$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"AND$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"OR$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"ROL$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"ROR$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"SAL$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"SAR$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"SBB$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"SHL$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"SHLD$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"SHR$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"SHRD$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"SUB$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"XCHG$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"XOR$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"CMP$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"INC$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"RCL$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"RCR$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"V64_COMP$I_M$R", (MOP_BASE*)(new SIM_ALU$I_M$R())});
     decodeStorage.insert({"ADC$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"ADD$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"AND$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"OR$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"ROL$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"ROR$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"SAL$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"SAR$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"SBB$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"SHL$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"SHLD$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"SHR$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"SHRD$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"SUB$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"XCHG$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"XOR$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"CMP$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"INC$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"RCL$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"RCR$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"V64_COMP$I_M$M", (MOP_BASE*)(new SIM_ALU$I_M$M())});
     decodeStorage.insert({"ADC$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"ADD$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"AND$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"OR$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"ROL$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"ROR$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"SAL$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"SAR$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"SBB$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"SHL$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"SHLD$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"SHR$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"SHRD$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"SUB$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"XCHG$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"XOR$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"CMP$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"INC$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"RCL$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"RCR$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"V64_COMP$M_R$R", (MOP_BASE*)(new SIM_ALU$M_R$R())});
     decodeStorage.insert({"ADC$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"ADD$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"AND$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"OR$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"ROL$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"ROR$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"SAL$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"SAR$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"SBB$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"SHL$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"SHLD$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"SHR$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"SHRD$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"SUB$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"XCHG$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"XOR$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"CMP$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"INC$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"RCL$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"RCR$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"V64_COMP$M_R$M", (MOP_BASE*)(new SIM_ALU$M_R$M())});
     decodeStorage.insert({"ADC$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"ADD$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"AND$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"OR$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"ROL$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"ROR$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"SAL$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"SAR$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"SBB$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"SHL$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"SHLD$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"SHR$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"SHRD$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"SUB$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"XCHG$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"XOR$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"CMP$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"INC$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"RCL$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"RCR$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"V64_COMP$M_I$R", (MOP_BASE*)(new SIM_ALU$M_I$R())});
     decodeStorage.insert({"ADC$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"ADD$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"AND$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"OR$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"ROL$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"ROR$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"SAL$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"SAR$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"SBB$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"SHL$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"SHLD$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"SHR$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"SHRD$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"SUB$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"XCHG$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"XOR$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"CMP$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"INC$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"RCL$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"RCR$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"V64_COMP$M_I$M", (MOP_BASE*)(new SIM_ALU$M_I$M())});
     decodeStorage.insert({"ADC$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"ADD$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"AND$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"OR$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"ROL$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"ROR$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"SAL$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"SAR$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"SBB$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"SHL$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"SHLD$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"SHR$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"SHRD$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"SUB$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"XCHG$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"XOR$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"CMP$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"INC$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"RCL$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"RCR$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"V64_COMP$M_M$R", (MOP_BASE*)(new SIM_ALU$M_M$R())});
     decodeStorage.insert({"ADC$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"ADD$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"AND$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"OR$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"ROL$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"ROR$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"SAL$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"SAR$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"SBB$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"SHL$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"SHLD$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"SHR$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"SHRD$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"SUB$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"XCHG$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"XOR$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"CMP$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"INC$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"RCL$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"RCR$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"V64_COMP$M_M$M", (MOP_BASE*)(new SIM_ALU$M_M$M())});
     decodeStorage.insert({"MUL$R_R$R", (MOP_BASE*)(new MUL_ALU$R_R$R())});
     decodeStorage.insert({"IMUL$R_R$R", (MOP_BASE*)(new MUL_ALU$R_R$R())});
     decodeStorage.insert({"MULX$R_R$R", (MOP_BASE*)(new MUL_ALU$R_R$R())});
     decodeStorage.insert({"V64_MUL$R_R$R", (MOP_BASE*)(new MUL_ALU$R_R$R())});
     decodeStorage.insert({"MUL$R_R$M", (MOP_BASE*)(new MUL_ALU$R_R$M())});
     decodeStorage.insert({"IMUL$R_R$M", (MOP_BASE*)(new MUL_ALU$R_R$M())});
     decodeStorage.insert({"MULX$R_R$M", (MOP_BASE*)(new MUL_ALU$R_R$M())});
     decodeStorage.insert({"V64_MUL$R_R$M", (MOP_BASE*)(new MUL_ALU$R_R$M())});
     decodeStorage.insert({"MUL$R_I$R", (MOP_BASE*)(new MUL_ALU$R_I$R())});
     decodeStorage.insert({"IMUL$R_I$R", (MOP_BASE*)(new MUL_ALU$R_I$R())});
     decodeStorage.insert({"MULX$R_I$R", (MOP_BASE*)(new MUL_ALU$R_I$R())});
     decodeStorage.insert({"V64_MUL$R_I$R", (MOP_BASE*)(new MUL_ALU$R_I$R())});
     decodeStorage.insert({"MUL$R_I$M", (MOP_BASE*)(new MUL_ALU$R_I$M())});
     decodeStorage.insert({"IMUL$R_I$M", (MOP_BASE*)(new MUL_ALU$R_I$M())});
     decodeStorage.insert({"MULX$R_I$M", (MOP_BASE*)(new MUL_ALU$R_I$M())});
     decodeStorage.insert({"V64_MUL$R_I$M", (MOP_BASE*)(new MUL_ALU$R_I$M())});
     decodeStorage.insert({"MUL$R_M$R", (MOP_BASE*)(new MUL_ALU$R_M$R())});
     decodeStorage.insert({"IMUL$R_M$R", (MOP_BASE*)(new MUL_ALU$R_M$R())});
     decodeStorage.insert({"MULX$R_M$R", (MOP_BASE*)(new MUL_ALU$R_M$R())});
     decodeStorage.insert({"V64_MUL$R_M$R", (MOP_BASE*)(new MUL_ALU$R_M$R())});
     decodeStorage.insert({"MUL$R_M$M", (MOP_BASE*)(new MUL_ALU$R_M$M())});
     decodeStorage.insert({"IMUL$R_M$M", (MOP_BASE*)(new MUL_ALU$R_M$M())});
     decodeStorage.insert({"MULX$R_M$M", (MOP_BASE*)(new MUL_ALU$R_M$M())});
     decodeStorage.insert({"V64_MUL$R_M$M", (MOP_BASE*)(new MUL_ALU$R_M$M())});
     decodeStorage.insert({"MUL$I_R$R", (MOP_BASE*)(new MUL_ALU$I_R$R())});
     decodeStorage.insert({"IMUL$I_R$R", (MOP_BASE*)(new MUL_ALU$I_R$R())});
     decodeStorage.insert({"MULX$I_R$R", (MOP_BASE*)(new MUL_ALU$I_R$R())});
     decodeStorage.insert({"V64_MUL$I_R$R", (MOP_BASE*)(new MUL_ALU$I_R$R())});
     decodeStorage.insert({"MUL$I_R$M", (MOP_BASE*)(new MUL_ALU$I_R$M())});
     decodeStorage.insert({"IMUL$I_R$M", (MOP_BASE*)(new MUL_ALU$I_R$M())});
     decodeStorage.insert({"MULX$I_R$M", (MOP_BASE*)(new MUL_ALU$I_R$M())});
     decodeStorage.insert({"V64_MUL$I_R$M", (MOP_BASE*)(new MUL_ALU$I_R$M())});
     decodeStorage.insert({"MUL$I_I$R", (MOP_BASE*)(new MUL_ALU$I_I$R())});
     decodeStorage.insert({"IMUL$I_I$R", (MOP_BASE*)(new MUL_ALU$I_I$R())});
     decodeStorage.insert({"MULX$I_I$R", (MOP_BASE*)(new MUL_ALU$I_I$R())});
     decodeStorage.insert({"V64_MUL$I_I$R", (MOP_BASE*)(new MUL_ALU$I_I$R())});
     decodeStorage.insert({"MUL$I_I$M", (MOP_BASE*)(new MUL_ALU$I_I$M())});
     decodeStorage.insert({"IMUL$I_I$M", (MOP_BASE*)(new MUL_ALU$I_I$M())});
     decodeStorage.insert({"MULX$I_I$M", (MOP_BASE*)(new MUL_ALU$I_I$M())});
     decodeStorage.insert({"V64_MUL$I_I$M", (MOP_BASE*)(new MUL_ALU$I_I$M())});
     decodeStorage.insert({"MUL$I_M$R", (MOP_BASE*)(new MUL_ALU$I_M$R())});
     decodeStorage.insert({"IMUL$I_M$R", (MOP_BASE*)(new MUL_ALU$I_M$R())});
     decodeStorage.insert({"MULX$I_M$R", (MOP_BASE*)(new MUL_ALU$I_M$R())});
     decodeStorage.insert({"V64_MUL$I_M$R", (MOP_BASE*)(new MUL_ALU$I_M$R())});
     decodeStorage.insert({"MUL$I_M$M", (MOP_BASE*)(new MUL_ALU$I_M$M())});
     decodeStorage.insert({"IMUL$I_M$M", (MOP_BASE*)(new MUL_ALU$I_M$M())});
     decodeStorage.insert({"MULX$I_M$M", (MOP_BASE*)(new MUL_ALU$I_M$M())});
     decodeStorage.insert({"V64_MUL$I_M$M", (MOP_BASE*)(new MUL_ALU$I_M$M())});
     decodeStorage.insert({"MUL$M_R$R", (MOP_BASE*)(new MUL_ALU$M_R$R())});
     decodeStorage.insert({"IMUL$M_R$R", (MOP_BASE*)(new MUL_ALU$M_R$R())});
     decodeStorage.insert({"MULX$M_R$R", (MOP_BASE*)(new MUL_ALU$M_R$R())});
     decodeStorage.insert({"V64_MUL$M_R$R", (MOP_BASE*)(new MUL_ALU$M_R$R())});
     decodeStorage.insert({"MUL$M_R$M", (MOP_BASE*)(new MUL_ALU$M_R$M())});
     decodeStorage.insert({"IMUL$M_R$M", (MOP_BASE*)(new MUL_ALU$M_R$M())});
     decodeStorage.insert({"MULX$M_R$M", (MOP_BASE*)(new MUL_ALU$M_R$M())});
     decodeStorage.insert({"V64_MUL$M_R$M", (MOP_BASE*)(new MUL_ALU$M_R$M())});
     decodeStorage.insert({"MUL$M_I$R", (MOP_BASE*)(new MUL_ALU$M_I$R())});
     decodeStorage.insert({"IMUL$M_I$R", (MOP_BASE*)(new MUL_ALU$M_I$R())});
     decodeStorage.insert({"MULX$M_I$R", (MOP_BASE*)(new MUL_ALU$M_I$R())});
     decodeStorage.insert({"V64_MUL$M_I$R", (MOP_BASE*)(new MUL_ALU$M_I$R())});
     decodeStorage.insert({"MUL$M_I$M", (MOP_BASE*)(new MUL_ALU$M_I$M())});
     decodeStorage.insert({"IMUL$M_I$M", (MOP_BASE*)(new MUL_ALU$M_I$M())});
     decodeStorage.insert({"MULX$M_I$M", (MOP_BASE*)(new MUL_ALU$M_I$M())});
     decodeStorage.insert({"V64_MUL$M_I$M", (MOP_BASE*)(new MUL_ALU$M_I$M())});
     decodeStorage.insert({"MUL$M_M$R", (MOP_BASE*)(new MUL_ALU$M_M$R())});
     decodeStorage.insert({"IMUL$M_M$R", (MOP_BASE*)(new MUL_ALU$M_M$R())});
     decodeStorage.insert({"MULX$M_M$R", (MOP_BASE*)(new MUL_ALU$M_M$R())});
     decodeStorage.insert({"V64_MUL$M_M$R", (MOP_BASE*)(new MUL_ALU$M_M$R())});
     decodeStorage.insert({"MUL$M_M$M", (MOP_BASE*)(new MUL_ALU$M_M$M())});
     decodeStorage.insert({"IMUL$M_M$M", (MOP_BASE*)(new MUL_ALU$M_M$M())});
     decodeStorage.insert({"MULX$M_M$M", (MOP_BASE*)(new MUL_ALU$M_M$M())});
     decodeStorage.insert({"V64_MUL$M_M$M", (MOP_BASE*)(new MUL_ALU$M_M$M())});
     decodeStorage.insert({"DIV$R_R$R", (MOP_BASE*)(new DIV_ALU$R_R$R())});
     decodeStorage.insert({"IDIV$R_R$R", (MOP_BASE*)(new DIV_ALU$R_R$R())});
     decodeStorage.insert({"V64_DIV$R_R$R", (MOP_BASE*)(new DIV_ALU$R_R$R())});
     decodeStorage.insert({"DIV$R_R$M", (MOP_BASE*)(new DIV_ALU$R_R$M())});
     decodeStorage.insert({"IDIV$R_R$M", (MOP_BASE*)(new DIV_ALU$R_R$M())});
     decodeStorage.insert({"V64_DIV$R_R$M", (MOP_BASE*)(new DIV_ALU$R_R$M())});
     decodeStorage.insert({"DIV$R_I$R", (MOP_BASE*)(new DIV_ALU$R_I$R())});
     decodeStorage.insert({"IDIV$R_I$R", (MOP_BASE*)(new DIV_ALU$R_I$R())});
     decodeStorage.insert({"V64_DIV$R_I$R", (MOP_BASE*)(new DIV_ALU$R_I$R())});
     decodeStorage.insert({"DIV$R_I$M", (MOP_BASE*)(new DIV_ALU$R_I$M())});
     decodeStorage.insert({"IDIV$R_I$M", (MOP_BASE*)(new DIV_ALU$R_I$M())});
     decodeStorage.insert({"V64_DIV$R_I$M", (MOP_BASE*)(new DIV_ALU$R_I$M())});
     decodeStorage.insert({"DIV$R_M$R", (MOP_BASE*)(new DIV_ALU$R_M$R())});
     decodeStorage.insert({"IDIV$R_M$R", (MOP_BASE*)(new DIV_ALU$R_M$R())});
     decodeStorage.insert({"V64_DIV$R_M$R", (MOP_BASE*)(new DIV_ALU$R_M$R())});
     decodeStorage.insert({"DIV$R_M$M", (MOP_BASE*)(new DIV_ALU$R_M$M())});
     decodeStorage.insert({"IDIV$R_M$M", (MOP_BASE*)(new DIV_ALU$R_M$M())});
     decodeStorage.insert({"V64_DIV$R_M$M", (MOP_BASE*)(new DIV_ALU$R_M$M())});
     decodeStorage.insert({"DIV$I_R$R", (MOP_BASE*)(new DIV_ALU$I_R$R())});
     decodeStorage.insert({"IDIV$I_R$R", (MOP_BASE*)(new DIV_ALU$I_R$R())});
     decodeStorage.insert({"V64_DIV$I_R$R", (MOP_BASE*)(new DIV_ALU$I_R$R())});
     decodeStorage.insert({"DIV$I_R$M", (MOP_BASE*)(new DIV_ALU$I_R$M())});
     decodeStorage.insert({"IDIV$I_R$M", (MOP_BASE*)(new DIV_ALU$I_R$M())});
     decodeStorage.insert({"V64_DIV$I_R$M", (MOP_BASE*)(new DIV_ALU$I_R$M())});
     decodeStorage.insert({"DIV$I_I$R", (MOP_BASE*)(new DIV_ALU$I_I$R())});
     decodeStorage.insert({"IDIV$I_I$R", (MOP_BASE*)(new DIV_ALU$I_I$R())});
     decodeStorage.insert({"V64_DIV$I_I$R", (MOP_BASE*)(new DIV_ALU$I_I$R())});
     decodeStorage.insert({"DIV$I_I$M", (MOP_BASE*)(new DIV_ALU$I_I$M())});
     decodeStorage.insert({"IDIV$I_I$M", (MOP_BASE*)(new DIV_ALU$I_I$M())});
     decodeStorage.insert({"V64_DIV$I_I$M", (MOP_BASE*)(new DIV_ALU$I_I$M())});
     decodeStorage.insert({"DIV$I_M$R", (MOP_BASE*)(new DIV_ALU$I_M$R())});
     decodeStorage.insert({"IDIV$I_M$R", (MOP_BASE*)(new DIV_ALU$I_M$R())});
     decodeStorage.insert({"V64_DIV$I_M$R", (MOP_BASE*)(new DIV_ALU$I_M$R())});
     decodeStorage.insert({"DIV$I_M$M", (MOP_BASE*)(new DIV_ALU$I_M$M())});
     decodeStorage.insert({"IDIV$I_M$M", (MOP_BASE*)(new DIV_ALU$I_M$M())});
     decodeStorage.insert({"V64_DIV$I_M$M", (MOP_BASE*)(new DIV_ALU$I_M$M())});
     decodeStorage.insert({"DIV$M_R$R", (MOP_BASE*)(new DIV_ALU$M_R$R())});
     decodeStorage.insert({"IDIV$M_R$R", (MOP_BASE*)(new DIV_ALU$M_R$R())});
     decodeStorage.insert({"V64_DIV$M_R$R", (MOP_BASE*)(new DIV_ALU$M_R$R())});
     decodeStorage.insert({"DIV$M_R$M", (MOP_BASE*)(new DIV_ALU$M_R$M())});
     decodeStorage.insert({"IDIV$M_R$M", (MOP_BASE*)(new DIV_ALU$M_R$M())});
     decodeStorage.insert({"V64_DIV$M_R$M", (MOP_BASE*)(new DIV_ALU$M_R$M())});
     decodeStorage.insert({"DIV$M_I$R", (MOP_BASE*)(new DIV_ALU$M_I$R())});
     decodeStorage.insert({"IDIV$M_I$R", (MOP_BASE*)(new DIV_ALU$M_I$R())});
     decodeStorage.insert({"V64_DIV$M_I$R", (MOP_BASE*)(new DIV_ALU$M_I$R())});
     decodeStorage.insert({"DIV$M_I$M", (MOP_BASE*)(new DIV_ALU$M_I$M())});
     decodeStorage.insert({"IDIV$M_I$M", (MOP_BASE*)(new DIV_ALU$M_I$M())});
     decodeStorage.insert({"V64_DIV$M_I$M", (MOP_BASE*)(new DIV_ALU$M_I$M())});
     decodeStorage.insert({"DIV$M_M$R", (MOP_BASE*)(new DIV_ALU$M_M$R())});
     decodeStorage.insert({"IDIV$M_M$R", (MOP_BASE*)(new DIV_ALU$M_M$R())});
     decodeStorage.insert({"V64_DIV$M_M$R", (MOP_BASE*)(new DIV_ALU$M_M$R())});
     decodeStorage.insert({"DIV$M_M$M", (MOP_BASE*)(new DIV_ALU$M_M$M())});
     decodeStorage.insert({"IDIV$M_M$M", (MOP_BASE*)(new DIV_ALU$M_M$M())});
     decodeStorage.insert({"V64_DIV$M_M$M", (MOP_BASE*)(new DIV_ALU$M_M$M())});
     decodeStorage.insert({"V128_COMP$R_R$R", (MOP_BASE*)(new SIM128_ALU$R_R$R())});
     decodeStorage.insert({"V128_COMP$R_R$M", (MOP_BASE*)(new SIM128_ALU$R_R$M())});
     decodeStorage.insert({"V128_COMP$R_I$R", (MOP_BASE*)(new SIM128_ALU$R_I$R())});
     decodeStorage.insert({"V128_COMP$R_I$M", (MOP_BASE*)(new SIM128_ALU$R_I$M())});
     decodeStorage.insert({"V128_COMP$R_M$R", (MOP_BASE*)(new SIM128_ALU$R_M$R())});
     decodeStorage.insert({"V128_COMP$R_M$M", (MOP_BASE*)(new SIM128_ALU$R_M$M())});
     decodeStorage.insert({"V128_COMP$I_R$R", (MOP_BASE*)(new SIM128_ALU$I_R$R())});
     decodeStorage.insert({"V128_COMP$I_R$M", (MOP_BASE*)(new SIM128_ALU$I_R$M())});
     decodeStorage.insert({"V128_COMP$I_I$R", (MOP_BASE*)(new SIM128_ALU$I_I$R())});
     decodeStorage.insert({"V128_COMP$I_I$M", (MOP_BASE*)(new SIM128_ALU$I_I$M())});
     decodeStorage.insert({"V128_COMP$I_M$R", (MOP_BASE*)(new SIM128_ALU$I_M$R())});
     decodeStorage.insert({"V128_COMP$I_M$M", (MOP_BASE*)(new SIM128_ALU$I_M$M())});
     decodeStorage.insert({"V128_COMP$M_R$R", (MOP_BASE*)(new SIM128_ALU$M_R$R())});
     decodeStorage.insert({"V128_COMP$M_R$M", (MOP_BASE*)(new SIM128_ALU$M_R$M())});
     decodeStorage.insert({"V128_COMP$M_I$R", (MOP_BASE*)(new SIM128_ALU$M_I$R())});
     decodeStorage.insert({"V128_COMP$M_I$M", (MOP_BASE*)(new SIM128_ALU$M_I$M())});
     decodeStorage.insert({"V128_COMP$M_M$R", (MOP_BASE*)(new SIM128_ALU$M_M$R())});
     decodeStorage.insert({"V128_COMP$M_M$M", (MOP_BASE*)(new SIM128_ALU$M_M$M())});
     decodeStorage.insert({"V128_COMP$R_R$R", (MOP_BASE*)(new MUL128_ALU$R_R$R())});
     decodeStorage.insert({"V128_COMP$R_R$M", (MOP_BASE*)(new MUL128_ALU$R_R$M())});
     decodeStorage.insert({"V128_COMP$R_I$R", (MOP_BASE*)(new MUL128_ALU$R_I$R())});
     decodeStorage.insert({"V128_COMP$R_I$M", (MOP_BASE*)(new MUL128_ALU$R_I$M())});
     decodeStorage.insert({"V128_COMP$R_M$R", (MOP_BASE*)(new MUL128_ALU$R_M$R())});
     decodeStorage.insert({"V128_COMP$R_M$M", (MOP_BASE*)(new MUL128_ALU$R_M$M())});
     decodeStorage.insert({"V128_COMP$I_R$R", (MOP_BASE*)(new MUL128_ALU$I_R$R())});
     decodeStorage.insert({"V128_COMP$I_R$M", (MOP_BASE*)(new MUL128_ALU$I_R$M())});
     decodeStorage.insert({"V128_COMP$I_I$R", (MOP_BASE*)(new MUL128_ALU$I_I$R())});
     decodeStorage.insert({"V128_COMP$I_I$M", (MOP_BASE*)(new MUL128_ALU$I_I$M())});
     decodeStorage.insert({"V128_COMP$I_M$R", (MOP_BASE*)(new MUL128_ALU$I_M$R())});
     decodeStorage.insert({"V128_COMP$I_M$M", (MOP_BASE*)(new MUL128_ALU$I_M$M())});
     decodeStorage.insert({"V128_COMP$M_R$R", (MOP_BASE*)(new MUL128_ALU$M_R$R())});
     decodeStorage.insert({"V128_COMP$M_R$M", (MOP_BASE*)(new MUL128_ALU$M_R$M())});
     decodeStorage.insert({"V128_COMP$M_I$R", (MOP_BASE*)(new MUL128_ALU$M_I$R())});
     decodeStorage.insert({"V128_COMP$M_I$M", (MOP_BASE*)(new MUL128_ALU$M_I$M())});
     decodeStorage.insert({"V128_COMP$M_M$R", (MOP_BASE*)(new MUL128_ALU$M_M$R())});
     decodeStorage.insert({"V128_COMP$M_M$M", (MOP_BASE*)(new MUL128_ALU$M_M$M())});
     decodeStorage.insert({"V128_COMP$R_R$R", (MOP_BASE*)(new DIV128_ALU$R_R$R())});
     decodeStorage.insert({"V128_COMP$R_R$M", (MOP_BASE*)(new DIV128_ALU$R_R$M())});
     decodeStorage.insert({"V128_COMP$R_I$R", (MOP_BASE*)(new DIV128_ALU$R_I$R())});
     decodeStorage.insert({"V128_COMP$R_I$M", (MOP_BASE*)(new DIV128_ALU$R_I$M())});
     decodeStorage.insert({"V128_COMP$R_M$R", (MOP_BASE*)(new DIV128_ALU$R_M$R())});
     decodeStorage.insert({"V128_COMP$R_M$M", (MOP_BASE*)(new DIV128_ALU$R_M$M())});
     decodeStorage.insert({"V128_COMP$I_R$R", (MOP_BASE*)(new DIV128_ALU$I_R$R())});
     decodeStorage.insert({"V128_COMP$I_R$M", (MOP_BASE*)(new DIV128_ALU$I_R$M())});
     decodeStorage.insert({"V128_COMP$I_I$R", (MOP_BASE*)(new DIV128_ALU$I_I$R())});
     decodeStorage.insert({"V128_COMP$I_I$M", (MOP_BASE*)(new DIV128_ALU$I_I$M())});
     decodeStorage.insert({"V128_COMP$I_M$R", (MOP_BASE*)(new DIV128_ALU$I_M$R())});
     decodeStorage.insert({"V128_COMP$I_M$M", (MOP_BASE*)(new DIV128_ALU$I_M$M())});
     decodeStorage.insert({"V128_COMP$M_R$R", (MOP_BASE*)(new DIV128_ALU$M_R$R())});
     decodeStorage.insert({"V128_COMP$M_R$M", (MOP_BASE*)(new DIV128_ALU$M_R$M())});
     decodeStorage.insert({"V128_COMP$M_I$R", (MOP_BASE*)(new DIV128_ALU$M_I$R())});
     decodeStorage.insert({"V128_COMP$M_I$M", (MOP_BASE*)(new DIV128_ALU$M_I$M())});
     decodeStorage.insert({"V128_COMP$M_M$R", (MOP_BASE*)(new DIV128_ALU$M_M$R())});
     decodeStorage.insert({"V128_COMP$M_M$M", (MOP_BASE*)(new DIV128_ALU$M_M$M())});
     decodeStorage.insert({"MOV$R$R", (MOP_BASE*)(new SIM_MOV$R$R())});
     decodeStorage.insert({"LEA$R$R", (MOP_BASE*)(new SIM_MOV$R$R())});
     decodeStorage.insert({"PUSH$R$R", (MOP_BASE*)(new SIM_MOV$R$R())});
     decodeStorage.insert({"POP$R$R", (MOP_BASE*)(new SIM_MOV$R$R())});
     decodeStorage.insert({"V64_MOV$R$R", (MOP_BASE*)(new SIM_MOV$R$R())});
     decodeStorage.insert({"MOV$R$M", (MOP_BASE*)(new SIM_MOV$R$M())});
     decodeStorage.insert({"LEA$R$M", (MOP_BASE*)(new SIM_MOV$R$M())});
     decodeStorage.insert({"PUSH$R$M", (MOP_BASE*)(new SIM_MOV$R$M())});
     decodeStorage.insert({"POP$R$M", (MOP_BASE*)(new SIM_MOV$R$M())});
     decodeStorage.insert({"V64_MOV$R$M", (MOP_BASE*)(new SIM_MOV$R$M())});
     decodeStorage.insert({"MOV$I$R", (MOP_BASE*)(new SIM_MOV$I$R())});
     decodeStorage.insert({"LEA$I$R", (MOP_BASE*)(new SIM_MOV$I$R())});
     decodeStorage.insert({"PUSH$I$R", (MOP_BASE*)(new SIM_MOV$I$R())});
     decodeStorage.insert({"POP$I$R", (MOP_BASE*)(new SIM_MOV$I$R())});
     decodeStorage.insert({"V64_MOV$I$R", (MOP_BASE*)(new SIM_MOV$I$R())});
     decodeStorage.insert({"MOV$I$M", (MOP_BASE*)(new SIM_MOV$I$M())});
     decodeStorage.insert({"LEA$I$M", (MOP_BASE*)(new SIM_MOV$I$M())});
     decodeStorage.insert({"PUSH$I$M", (MOP_BASE*)(new SIM_MOV$I$M())});
     decodeStorage.insert({"POP$I$M", (MOP_BASE*)(new SIM_MOV$I$M())});
     decodeStorage.insert({"V64_MOV$I$M", (MOP_BASE*)(new SIM_MOV$I$M())});
     decodeStorage.insert({"MOV$M$R", (MOP_BASE*)(new SIM_MOV$M$R())});
     decodeStorage.insert({"LEA$M$R", (MOP_BASE*)(new SIM_MOV$M$R())});
     decodeStorage.insert({"PUSH$M$R", (MOP_BASE*)(new SIM_MOV$M$R())});
     decodeStorage.insert({"POP$M$R", (MOP_BASE*)(new SIM_MOV$M$R())});
     decodeStorage.insert({"V64_MOV$M$R", (MOP_BASE*)(new SIM_MOV$M$R())});
     decodeStorage.insert({"MOV$M$M", (MOP_BASE*)(new SIM_MOV$M$M())});
     decodeStorage.insert({"LEA$M$M", (MOP_BASE*)(new SIM_MOV$M$M())});
     decodeStorage.insert({"PUSH$M$M", (MOP_BASE*)(new SIM_MOV$M$M())});
     decodeStorage.insert({"POP$M$M", (MOP_BASE*)(new SIM_MOV$M$M())});
     decodeStorage.insert({"V64_MOV$M$M", (MOP_BASE*)(new SIM_MOV$M$M())});
     decodeStorage.insert({"V128_MOV$R$R", (MOP_BASE*)(new SIM_MOV128$R$R())});
     decodeStorage.insert({"V128_MOV$R$M", (MOP_BASE*)(new SIM_MOV128$R$M())});
     decodeStorage.insert({"V128_MOV$I$R", (MOP_BASE*)(new SIM_MOV128$I$R())});
     decodeStorage.insert({"V128_MOV$I$M", (MOP_BASE*)(new SIM_MOV128$I$M())});
     decodeStorage.insert({"V128_MOV$M$R", (MOP_BASE*)(new SIM_MOV128$M$R())});
     decodeStorage.insert({"V128_MOV$M$M", (MOP_BASE*)(new SIM_MOV128$M$M())});
}




MOP_BASE*
X86_DECODER::decodeMOP(RT_INSTR& rt_instr) {

auto finder = decodeStorage.find(rt_instr.getDecodeKey());
return ( finder == decodeStorage.end() ) ? simpleMop: finder->second;

}