// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mach.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mach_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mach_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mach_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mach_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mach_2eproto;
namespace ProtoMessage {
class InstrRecord;
class InstrRecordDefaultTypeInternal;
extern InstrRecordDefaultTypeInternal _InstrRecord_default_instance_;
class headerRecord;
class headerRecordDefaultTypeInternal;
extern headerRecordDefaultTypeInternal _headerRecord_default_instance_;
class machRecord;
class machRecordDefaultTypeInternal;
extern machRecordDefaultTypeInternal _machRecord_default_instance_;
}  // namespace ProtoMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoMessage::InstrRecord* Arena::CreateMaybeMessage<::ProtoMessage::InstrRecord>(Arena*);
template<> ::ProtoMessage::headerRecord* Arena::CreateMaybeMessage<::ProtoMessage::headerRecord>(Arena*);
template<> ::ProtoMessage::machRecord* Arena::CreateMaybeMessage<::ProtoMessage::machRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoMessage {

enum machRecord_RecordType : int {
  machRecord_RecordType_UOP_COMP = 0,
  machRecord_RecordType_UOP_LOAD = 1,
  machRecord_RecordType_UOP_STORE = 2,
  machRecord_RecordType_UOP_IMM = 3,
  machRecord_RecordType_UOP_DUMMY = 4
};
bool machRecord_RecordType_IsValid(int value);
constexpr machRecord_RecordType machRecord_RecordType_RecordType_MIN = machRecord_RecordType_UOP_COMP;
constexpr machRecord_RecordType machRecord_RecordType_RecordType_MAX = machRecord_RecordType_UOP_DUMMY;
constexpr int machRecord_RecordType_RecordType_ARRAYSIZE = machRecord_RecordType_RecordType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* machRecord_RecordType_descriptor();
template<typename T>
inline const std::string& machRecord_RecordType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, machRecord_RecordType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function machRecord_RecordType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    machRecord_RecordType_descriptor(), enum_t_value);
}
inline bool machRecord_RecordType_Parse(
    const std::string& name, machRecord_RecordType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<machRecord_RecordType>(
    machRecord_RecordType_descriptor(), name, value);
}
// ===================================================================

class headerRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMessage.headerRecord) */ {
 public:
  inline headerRecord() : headerRecord(nullptr) {};
  virtual ~headerRecord();

  headerRecord(const headerRecord& from);
  headerRecord(headerRecord&& from) noexcept
    : headerRecord() {
    *this = ::std::move(from);
  }

  inline headerRecord& operator=(const headerRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline headerRecord& operator=(headerRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const headerRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const headerRecord* internal_default_instance() {
    return reinterpret_cast<const headerRecord*>(
               &_headerRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(headerRecord& a, headerRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(headerRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(headerRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline headerRecord* New() const final {
    return CreateMaybeMessage<headerRecord>(nullptr);
  }

  headerRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<headerRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const headerRecord& from);
  void MergeFrom(const headerRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(headerRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMessage.headerRecord";
  }
  protected:
  explicit headerRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mach_2eproto);
    return ::descriptor_table_mach_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjIdFieldNumber = 1,
    kVerFieldNumber = 2,
  };
  // required string obj_id = 1;
  bool has_obj_id() const;
  private:
  bool _internal_has_obj_id() const;
  public:
  void clear_obj_id();
  const std::string& obj_id() const;
  void set_obj_id(const std::string& value);
  void set_obj_id(std::string&& value);
  void set_obj_id(const char* value);
  void set_obj_id(const char* value, size_t size);
  std::string* mutable_obj_id();
  std::string* release_obj_id();
  void set_allocated_obj_id(std::string* obj_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_obj_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_obj_id(
      std::string* obj_id);
  private:
  const std::string& _internal_obj_id() const;
  void _internal_set_obj_id(const std::string& value);
  std::string* _internal_mutable_obj_id();
  public:

  // optional uint32 ver = 2 [default = 0];
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  ::PROTOBUF_NAMESPACE_ID::uint32 ver() const;
  void set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ver() const;
  void _internal_set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMessage.headerRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ver_;
  friend struct ::TableStruct_mach_2eproto;
};
// -------------------------------------------------------------------

class machRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMessage.machRecord) */ {
 public:
  inline machRecord() : machRecord(nullptr) {};
  virtual ~machRecord();

  machRecord(const machRecord& from);
  machRecord(machRecord&& from) noexcept
    : machRecord() {
    *this = ::std::move(from);
  }

  inline machRecord& operator=(const machRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline machRecord& operator=(machRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const machRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const machRecord* internal_default_instance() {
    return reinterpret_cast<const machRecord*>(
               &_machRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(machRecord& a, machRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(machRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(machRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline machRecord* New() const final {
    return CreateMaybeMessage<machRecord>(nullptr);
  }

  machRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<machRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const machRecord& from);
  void MergeFrom(const machRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(machRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMessage.machRecord";
  }
  protected:
  explicit machRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mach_2eproto);
    return ::descriptor_table_mach_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef machRecord_RecordType RecordType;
  static constexpr RecordType UOP_COMP =
    machRecord_RecordType_UOP_COMP;
  static constexpr RecordType UOP_LOAD =
    machRecord_RecordType_UOP_LOAD;
  static constexpr RecordType UOP_STORE =
    machRecord_RecordType_UOP_STORE;
  static constexpr RecordType UOP_IMM =
    machRecord_RecordType_UOP_IMM;
  static constexpr RecordType UOP_DUMMY =
    machRecord_RecordType_UOP_DUMMY;
  static inline bool RecordType_IsValid(int value) {
    return machRecord_RecordType_IsValid(value);
  }
  static constexpr RecordType RecordType_MIN =
    machRecord_RecordType_RecordType_MIN;
  static constexpr RecordType RecordType_MAX =
    machRecord_RecordType_RecordType_MAX;
  static constexpr int RecordType_ARRAYSIZE =
    machRecord_RecordType_RecordType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RecordType_descriptor() {
    return machRecord_RecordType_descriptor();
  }
  template<typename T>
  static inline const std::string& RecordType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RecordType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RecordType_Name.");
    return machRecord_RecordType_Name(enum_t_value);
  }
  static inline bool RecordType_Parse(const std::string& name,
      RecordType* value) {
    return machRecord_RecordType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSrcArchRegIdFieldNumber = 7,
    kDesArchRegIdFieldNumber = 8,
    kSrcTempRegIdFieldNumber = 9,
    kDesTempRegIdFieldNumber = 10,
    kSeqNumFieldNumber = 1,
    kVAddrFieldNumber = 2,
    kPEffAddrFieldNumber = 4,
    kVSizeFieldNumber = 3,
    kPEffSizeFieldNumber = 5,
    kFuncUnitFieldNumber = 6,
    kRecTypeFieldNumber = 11,
  };
  // repeated uint32 srcArchRegId = 7;
  int srcarchregid_size() const;
  private:
  int _internal_srcarchregid_size() const;
  public:
  void clear_srcarchregid();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srcarchregid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_srcarchregid() const;
  void _internal_add_srcarchregid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_srcarchregid();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 srcarchregid(int index) const;
  void set_srcarchregid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_srcarchregid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      srcarchregid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_srcarchregid();

  // repeated uint32 desArchRegId = 8;
  int desarchregid_size() const;
  private:
  int _internal_desarchregid_size() const;
  public:
  void clear_desarchregid();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_desarchregid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_desarchregid() const;
  void _internal_add_desarchregid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_desarchregid();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 desarchregid(int index) const;
  void set_desarchregid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_desarchregid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      desarchregid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_desarchregid();

  // repeated uint32 srcTempRegId = 9;
  int srctempregid_size() const;
  private:
  int _internal_srctempregid_size() const;
  public:
  void clear_srctempregid();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srctempregid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_srctempregid() const;
  void _internal_add_srctempregid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_srctempregid();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 srctempregid(int index) const;
  void set_srctempregid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_srctempregid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      srctempregid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_srctempregid();

  // repeated uint32 desTempRegId = 10;
  int destempregid_size() const;
  private:
  int _internal_destempregid_size() const;
  public:
  void clear_destempregid();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_destempregid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_destempregid() const;
  void _internal_add_destempregid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_destempregid();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 destempregid(int index) const;
  void set_destempregid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_destempregid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      destempregid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_destempregid();

  // required uint64 seq_num = 1;
  bool has_seq_num() const;
  private:
  bool _internal_has_seq_num() const;
  public:
  void clear_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num() const;
  void set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq_num() const;
  void _internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 v_Addr = 2;
  bool has_v_addr() const;
  private:
  bool _internal_has_v_addr() const;
  public:
  void clear_v_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 v_addr() const;
  void set_v_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_v_addr() const;
  void _internal_set_v_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 p_effAddr = 4;
  bool has_p_effaddr() const;
  private:
  bool _internal_has_p_effaddr() const;
  public:
  void clear_p_effaddr();
  ::PROTOBUF_NAMESPACE_ID::uint64 p_effaddr() const;
  void set_p_effaddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_p_effaddr() const;
  void _internal_set_p_effaddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 v_Size = 3;
  bool has_v_size() const;
  private:
  bool _internal_has_v_size() const;
  public:
  void clear_v_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 v_size() const;
  void set_v_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_v_size() const;
  void _internal_set_v_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 p_effSize = 5;
  bool has_p_effsize() const;
  private:
  bool _internal_has_p_effsize() const;
  public:
  void clear_p_effsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 p_effsize() const;
  void set_p_effsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_p_effsize() const;
  void _internal_set_p_effsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 funcUnit = 6;
  bool has_funcunit() const;
  private:
  bool _internal_has_funcunit() const;
  public:
  void clear_funcunit();
  ::PROTOBUF_NAMESPACE_ID::uint32 funcunit() const;
  void set_funcunit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_funcunit() const;
  void _internal_set_funcunit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .ProtoMessage.machRecord.RecordType recType = 11 [default = UOP_DUMMY];
  bool has_rectype() const;
  private:
  bool _internal_has_rectype() const;
  public:
  void clear_rectype();
  ::ProtoMessage::machRecord_RecordType rectype() const;
  void set_rectype(::ProtoMessage::machRecord_RecordType value);
  private:
  ::ProtoMessage::machRecord_RecordType _internal_rectype() const;
  void _internal_set_rectype(::ProtoMessage::machRecord_RecordType value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMessage.machRecord)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > srcarchregid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > desarchregid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > srctempregid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > destempregid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 v_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 p_effaddr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 v_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 p_effsize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 funcunit_;
  int rectype_;
  friend struct ::TableStruct_mach_2eproto;
};
// -------------------------------------------------------------------

class InstrRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMessage.InstrRecord) */ {
 public:
  inline InstrRecord() : InstrRecord(nullptr) {};
  virtual ~InstrRecord();

  InstrRecord(const InstrRecord& from);
  InstrRecord(InstrRecord&& from) noexcept
    : InstrRecord() {
    *this = ::std::move(from);
  }

  inline InstrRecord& operator=(const InstrRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrRecord& operator=(InstrRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrRecord* internal_default_instance() {
    return reinterpret_cast<const InstrRecord*>(
               &_InstrRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InstrRecord& a, InstrRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrRecord* New() const final {
    return CreateMaybeMessage<InstrRecord>(nullptr);
  }

  InstrRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrRecord& from);
  void MergeFrom(const InstrRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMessage.InstrRecord";
  }
  protected:
  explicit InstrRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mach_2eproto);
    return ::descriptor_table_mach_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUopsFieldNumber = 3,
    kInstrNumFieldNumber = 1,
    kFetchNumFieldNumber = 2,
    kVInstrAddrFieldNumber = 4,
    kVInstrSizeFieldNumber = 5,
  };
  // repeated .ProtoMessage.machRecord uops = 3;
  int uops_size() const;
  private:
  int _internal_uops_size() const;
  public:
  void clear_uops();
  ::ProtoMessage::machRecord* mutable_uops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMessage::machRecord >*
      mutable_uops();
  private:
  const ::ProtoMessage::machRecord& _internal_uops(int index) const;
  ::ProtoMessage::machRecord* _internal_add_uops();
  public:
  const ::ProtoMessage::machRecord& uops(int index) const;
  ::ProtoMessage::machRecord* add_uops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMessage::machRecord >&
      uops() const;

  // required uint64 instr_num = 1;
  bool has_instr_num() const;
  private:
  bool _internal_has_instr_num() const;
  public:
  void clear_instr_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 instr_num() const;
  void set_instr_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_instr_num() const;
  void _internal_set_instr_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 fetch_num = 2;
  bool has_fetch_num() const;
  private:
  bool _internal_has_fetch_num() const;
  public:
  void clear_fetch_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 fetch_num() const;
  void set_fetch_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fetch_num() const;
  void _internal_set_fetch_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 v_instrAddr = 4;
  bool has_v_instraddr() const;
  private:
  bool _internal_has_v_instraddr() const;
  public:
  void clear_v_instraddr();
  ::PROTOBUF_NAMESPACE_ID::uint64 v_instraddr() const;
  void set_v_instraddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_v_instraddr() const;
  void _internal_set_v_instraddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 v_instrSize = 5;
  bool has_v_instrsize() const;
  private:
  bool _internal_has_v_instrsize() const;
  public:
  void clear_v_instrsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 v_instrsize() const;
  void set_v_instrsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_v_instrsize() const;
  void _internal_set_v_instrsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMessage.InstrRecord)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMessage::machRecord > uops_;
  ::PROTOBUF_NAMESPACE_ID::uint64 instr_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fetch_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 v_instraddr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 v_instrsize_;
  friend struct ::TableStruct_mach_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// headerRecord

// required string obj_id = 1;
inline bool headerRecord::_internal_has_obj_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool headerRecord::has_obj_id() const {
  return _internal_has_obj_id();
}
inline void headerRecord::clear_obj_id() {
  obj_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& headerRecord::obj_id() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.headerRecord.obj_id)
  return _internal_obj_id();
}
inline void headerRecord::set_obj_id(const std::string& value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.headerRecord.obj_id)
}
inline std::string* headerRecord::mutable_obj_id() {
  // @@protoc_insertion_point(field_mutable:ProtoMessage.headerRecord.obj_id)
  return _internal_mutable_obj_id();
}
inline const std::string& headerRecord::_internal_obj_id() const {
  return obj_id_.Get();
}
inline void headerRecord::_internal_set_obj_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  obj_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void headerRecord::set_obj_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  obj_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoMessage.headerRecord.obj_id)
}
inline void headerRecord::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  obj_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoMessage.headerRecord.obj_id)
}
inline void headerRecord::set_obj_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  obj_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoMessage.headerRecord.obj_id)
}
inline std::string* headerRecord::_internal_mutable_obj_id() {
  _has_bits_[0] |= 0x00000001u;
  return obj_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* headerRecord::release_obj_id() {
  // @@protoc_insertion_point(field_release:ProtoMessage.headerRecord.obj_id)
  if (!_internal_has_obj_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return obj_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void headerRecord::set_allocated_obj_id(std::string* obj_id) {
  if (obj_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obj_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoMessage.headerRecord.obj_id)
}
inline std::string* headerRecord::unsafe_arena_release_obj_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoMessage.headerRecord.obj_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return obj_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void headerRecord::unsafe_arena_set_allocated_obj_id(
    std::string* obj_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (obj_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obj_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      obj_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoMessage.headerRecord.obj_id)
}

// optional uint32 ver = 2 [default = 0];
inline bool headerRecord::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool headerRecord::has_ver() const {
  return _internal_has_ver();
}
inline void headerRecord::clear_ver() {
  ver_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 headerRecord::_internal_ver() const {
  return ver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 headerRecord::ver() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.headerRecord.ver)
  return _internal_ver();
}
inline void headerRecord::_internal_set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ver_ = value;
}
inline void headerRecord::set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.headerRecord.ver)
}

// -------------------------------------------------------------------

// machRecord

// required uint64 seq_num = 1;
inline bool machRecord::_internal_has_seq_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool machRecord::has_seq_num() const {
  return _internal_has_seq_num();
}
inline void machRecord::clear_seq_num() {
  seq_num_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 machRecord::_internal_seq_num() const {
  return seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 machRecord::seq_num() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.machRecord.seq_num)
  return _internal_seq_num();
}
inline void machRecord::_internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  seq_num_ = value;
}
inline void machRecord::set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq_num(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.machRecord.seq_num)
}

// required uint64 v_Addr = 2;
inline bool machRecord::_internal_has_v_addr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool machRecord::has_v_addr() const {
  return _internal_has_v_addr();
}
inline void machRecord::clear_v_addr() {
  v_addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 machRecord::_internal_v_addr() const {
  return v_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 machRecord::v_addr() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.machRecord.v_Addr)
  return _internal_v_addr();
}
inline void machRecord::_internal_set_v_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  v_addr_ = value;
}
inline void machRecord::set_v_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_v_addr(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.machRecord.v_Addr)
}

// required uint32 v_Size = 3;
inline bool machRecord::_internal_has_v_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool machRecord::has_v_size() const {
  return _internal_has_v_size();
}
inline void machRecord::clear_v_size() {
  v_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 machRecord::_internal_v_size() const {
  return v_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 machRecord::v_size() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.machRecord.v_Size)
  return _internal_v_size();
}
inline void machRecord::_internal_set_v_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  v_size_ = value;
}
inline void machRecord::set_v_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_v_size(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.machRecord.v_Size)
}

// required uint64 p_effAddr = 4;
inline bool machRecord::_internal_has_p_effaddr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool machRecord::has_p_effaddr() const {
  return _internal_has_p_effaddr();
}
inline void machRecord::clear_p_effaddr() {
  p_effaddr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 machRecord::_internal_p_effaddr() const {
  return p_effaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 machRecord::p_effaddr() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.machRecord.p_effAddr)
  return _internal_p_effaddr();
}
inline void machRecord::_internal_set_p_effaddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  p_effaddr_ = value;
}
inline void machRecord::set_p_effaddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_p_effaddr(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.machRecord.p_effAddr)
}

// required uint32 p_effSize = 5;
inline bool machRecord::_internal_has_p_effsize() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool machRecord::has_p_effsize() const {
  return _internal_has_p_effsize();
}
inline void machRecord::clear_p_effsize() {
  p_effsize_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 machRecord::_internal_p_effsize() const {
  return p_effsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 machRecord::p_effsize() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.machRecord.p_effSize)
  return _internal_p_effsize();
}
inline void machRecord::_internal_set_p_effsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  p_effsize_ = value;
}
inline void machRecord::set_p_effsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_p_effsize(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.machRecord.p_effSize)
}

// required uint32 funcUnit = 6;
inline bool machRecord::_internal_has_funcunit() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool machRecord::has_funcunit() const {
  return _internal_has_funcunit();
}
inline void machRecord::clear_funcunit() {
  funcunit_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 machRecord::_internal_funcunit() const {
  return funcunit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 machRecord::funcunit() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.machRecord.funcUnit)
  return _internal_funcunit();
}
inline void machRecord::_internal_set_funcunit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  funcunit_ = value;
}
inline void machRecord::set_funcunit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_funcunit(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.machRecord.funcUnit)
}

// repeated uint32 srcArchRegId = 7;
inline int machRecord::_internal_srcarchregid_size() const {
  return srcarchregid_.size();
}
inline int machRecord::srcarchregid_size() const {
  return _internal_srcarchregid_size();
}
inline void machRecord::clear_srcarchregid() {
  srcarchregid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 machRecord::_internal_srcarchregid(int index) const {
  return srcarchregid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 machRecord::srcarchregid(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMessage.machRecord.srcArchRegId)
  return _internal_srcarchregid(index);
}
inline void machRecord::set_srcarchregid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  srcarchregid_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoMessage.machRecord.srcArchRegId)
}
inline void machRecord::_internal_add_srcarchregid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  srcarchregid_.Add(value);
}
inline void machRecord::add_srcarchregid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_srcarchregid(value);
  // @@protoc_insertion_point(field_add:ProtoMessage.machRecord.srcArchRegId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
machRecord::_internal_srcarchregid() const {
  return srcarchregid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
machRecord::srcarchregid() const {
  // @@protoc_insertion_point(field_list:ProtoMessage.machRecord.srcArchRegId)
  return _internal_srcarchregid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
machRecord::_internal_mutable_srcarchregid() {
  return &srcarchregid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
machRecord::mutable_srcarchregid() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMessage.machRecord.srcArchRegId)
  return _internal_mutable_srcarchregid();
}

// repeated uint32 desArchRegId = 8;
inline int machRecord::_internal_desarchregid_size() const {
  return desarchregid_.size();
}
inline int machRecord::desarchregid_size() const {
  return _internal_desarchregid_size();
}
inline void machRecord::clear_desarchregid() {
  desarchregid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 machRecord::_internal_desarchregid(int index) const {
  return desarchregid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 machRecord::desarchregid(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMessage.machRecord.desArchRegId)
  return _internal_desarchregid(index);
}
inline void machRecord::set_desarchregid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  desarchregid_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoMessage.machRecord.desArchRegId)
}
inline void machRecord::_internal_add_desarchregid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  desarchregid_.Add(value);
}
inline void machRecord::add_desarchregid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_desarchregid(value);
  // @@protoc_insertion_point(field_add:ProtoMessage.machRecord.desArchRegId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
machRecord::_internal_desarchregid() const {
  return desarchregid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
machRecord::desarchregid() const {
  // @@protoc_insertion_point(field_list:ProtoMessage.machRecord.desArchRegId)
  return _internal_desarchregid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
machRecord::_internal_mutable_desarchregid() {
  return &desarchregid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
machRecord::mutable_desarchregid() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMessage.machRecord.desArchRegId)
  return _internal_mutable_desarchregid();
}

// repeated uint32 srcTempRegId = 9;
inline int machRecord::_internal_srctempregid_size() const {
  return srctempregid_.size();
}
inline int machRecord::srctempregid_size() const {
  return _internal_srctempregid_size();
}
inline void machRecord::clear_srctempregid() {
  srctempregid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 machRecord::_internal_srctempregid(int index) const {
  return srctempregid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 machRecord::srctempregid(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMessage.machRecord.srcTempRegId)
  return _internal_srctempregid(index);
}
inline void machRecord::set_srctempregid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  srctempregid_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoMessage.machRecord.srcTempRegId)
}
inline void machRecord::_internal_add_srctempregid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  srctempregid_.Add(value);
}
inline void machRecord::add_srctempregid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_srctempregid(value);
  // @@protoc_insertion_point(field_add:ProtoMessage.machRecord.srcTempRegId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
machRecord::_internal_srctempregid() const {
  return srctempregid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
machRecord::srctempregid() const {
  // @@protoc_insertion_point(field_list:ProtoMessage.machRecord.srcTempRegId)
  return _internal_srctempregid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
machRecord::_internal_mutable_srctempregid() {
  return &srctempregid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
machRecord::mutable_srctempregid() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMessage.machRecord.srcTempRegId)
  return _internal_mutable_srctempregid();
}

// repeated uint32 desTempRegId = 10;
inline int machRecord::_internal_destempregid_size() const {
  return destempregid_.size();
}
inline int machRecord::destempregid_size() const {
  return _internal_destempregid_size();
}
inline void machRecord::clear_destempregid() {
  destempregid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 machRecord::_internal_destempregid(int index) const {
  return destempregid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 machRecord::destempregid(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMessage.machRecord.desTempRegId)
  return _internal_destempregid(index);
}
inline void machRecord::set_destempregid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  destempregid_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoMessage.machRecord.desTempRegId)
}
inline void machRecord::_internal_add_destempregid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  destempregid_.Add(value);
}
inline void machRecord::add_destempregid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_destempregid(value);
  // @@protoc_insertion_point(field_add:ProtoMessage.machRecord.desTempRegId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
machRecord::_internal_destempregid() const {
  return destempregid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
machRecord::destempregid() const {
  // @@protoc_insertion_point(field_list:ProtoMessage.machRecord.desTempRegId)
  return _internal_destempregid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
machRecord::_internal_mutable_destempregid() {
  return &destempregid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
machRecord::mutable_destempregid() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMessage.machRecord.desTempRegId)
  return _internal_mutable_destempregid();
}

// required .ProtoMessage.machRecord.RecordType recType = 11 [default = UOP_DUMMY];
inline bool machRecord::_internal_has_rectype() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool machRecord::has_rectype() const {
  return _internal_has_rectype();
}
inline void machRecord::clear_rectype() {
  rectype_ = 4;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::ProtoMessage::machRecord_RecordType machRecord::_internal_rectype() const {
  return static_cast< ::ProtoMessage::machRecord_RecordType >(rectype_);
}
inline ::ProtoMessage::machRecord_RecordType machRecord::rectype() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.machRecord.recType)
  return _internal_rectype();
}
inline void machRecord::_internal_set_rectype(::ProtoMessage::machRecord_RecordType value) {
  assert(::ProtoMessage::machRecord_RecordType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  rectype_ = value;
}
inline void machRecord::set_rectype(::ProtoMessage::machRecord_RecordType value) {
  _internal_set_rectype(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.machRecord.recType)
}

// -------------------------------------------------------------------

// InstrRecord

// required uint64 instr_num = 1;
inline bool InstrRecord::_internal_has_instr_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InstrRecord::has_instr_num() const {
  return _internal_has_instr_num();
}
inline void InstrRecord::clear_instr_num() {
  instr_num_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrRecord::_internal_instr_num() const {
  return instr_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrRecord::instr_num() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstrRecord.instr_num)
  return _internal_instr_num();
}
inline void InstrRecord::_internal_set_instr_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  instr_num_ = value;
}
inline void InstrRecord::set_instr_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_instr_num(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstrRecord.instr_num)
}

// required uint64 fetch_num = 2;
inline bool InstrRecord::_internal_has_fetch_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InstrRecord::has_fetch_num() const {
  return _internal_has_fetch_num();
}
inline void InstrRecord::clear_fetch_num() {
  fetch_num_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrRecord::_internal_fetch_num() const {
  return fetch_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrRecord::fetch_num() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstrRecord.fetch_num)
  return _internal_fetch_num();
}
inline void InstrRecord::_internal_set_fetch_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  fetch_num_ = value;
}
inline void InstrRecord::set_fetch_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fetch_num(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstrRecord.fetch_num)
}

// repeated .ProtoMessage.machRecord uops = 3;
inline int InstrRecord::_internal_uops_size() const {
  return uops_.size();
}
inline int InstrRecord::uops_size() const {
  return _internal_uops_size();
}
inline void InstrRecord::clear_uops() {
  uops_.Clear();
}
inline ::ProtoMessage::machRecord* InstrRecord::mutable_uops(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoMessage.InstrRecord.uops)
  return uops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMessage::machRecord >*
InstrRecord::mutable_uops() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMessage.InstrRecord.uops)
  return &uops_;
}
inline const ::ProtoMessage::machRecord& InstrRecord::_internal_uops(int index) const {
  return uops_.Get(index);
}
inline const ::ProtoMessage::machRecord& InstrRecord::uops(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstrRecord.uops)
  return _internal_uops(index);
}
inline ::ProtoMessage::machRecord* InstrRecord::_internal_add_uops() {
  return uops_.Add();
}
inline ::ProtoMessage::machRecord* InstrRecord::add_uops() {
  // @@protoc_insertion_point(field_add:ProtoMessage.InstrRecord.uops)
  return _internal_add_uops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMessage::machRecord >&
InstrRecord::uops() const {
  // @@protoc_insertion_point(field_list:ProtoMessage.InstrRecord.uops)
  return uops_;
}

// required uint64 v_instrAddr = 4;
inline bool InstrRecord::_internal_has_v_instraddr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InstrRecord::has_v_instraddr() const {
  return _internal_has_v_instraddr();
}
inline void InstrRecord::clear_v_instraddr() {
  v_instraddr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrRecord::_internal_v_instraddr() const {
  return v_instraddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrRecord::v_instraddr() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstrRecord.v_instrAddr)
  return _internal_v_instraddr();
}
inline void InstrRecord::_internal_set_v_instraddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  v_instraddr_ = value;
}
inline void InstrRecord::set_v_instraddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_v_instraddr(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstrRecord.v_instrAddr)
}

// required uint32 v_instrSize = 5;
inline bool InstrRecord::_internal_has_v_instrsize() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InstrRecord::has_v_instrsize() const {
  return _internal_has_v_instrsize();
}
inline void InstrRecord::clear_v_instrsize() {
  v_instrsize_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrRecord::_internal_v_instrsize() const {
  return v_instrsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrRecord::v_instrsize() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstrRecord.v_instrSize)
  return _internal_v_instrsize();
}
inline void InstrRecord::_internal_set_v_instrsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  v_instrsize_ = value;
}
inline void InstrRecord::set_v_instrsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_v_instrsize(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstrRecord.v_instrSize)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMessage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ProtoMessage::machRecord_RecordType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMessage::machRecord_RecordType>() {
  return ::ProtoMessage::machRecord_RecordType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mach_2eproto
