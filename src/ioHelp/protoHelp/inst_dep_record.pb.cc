// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inst_dep_record.proto

#include "inst_dep_record.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ProtoMessage {
class InstDepRecordHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstDepRecordHeader> _instance;
} _InstDepRecordHeader_default_instance_;
class InstDepRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstDepRecord> _instance;
} _InstDepRecord_default_instance_;
}  // namespace ProtoMessage
static void InitDefaultsscc_info_InstDepRecord_inst_5fdep_5frecord_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoMessage::_InstDepRecord_default_instance_;
    new (ptr) ::ProtoMessage::InstDepRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoMessage::InstDepRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstDepRecord_inst_5fdep_5frecord_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstDepRecord_inst_5fdep_5frecord_2eproto}, {}};

static void InitDefaultsscc_info_InstDepRecordHeader_inst_5fdep_5frecord_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoMessage::_InstDepRecordHeader_default_instance_;
    new (ptr) ::ProtoMessage::InstDepRecordHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoMessage::InstDepRecordHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstDepRecordHeader_inst_5fdep_5frecord_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstDepRecordHeader_inst_5fdep_5frecord_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_inst_5fdep_5frecord_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_inst_5fdep_5frecord_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_inst_5fdep_5frecord_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_inst_5fdep_5frecord_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecordHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecordHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecordHeader, obj_id_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecordHeader, ver_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecordHeader, tick_freq_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecordHeader, window_size_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecord, seq_num_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecord, type_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecord, p_addr_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecord, size_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecord, flags_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecord, rob_dep_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecord, comp_delay_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecord, reg_dep_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecord, weight_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecord, pc_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecord, v_addr_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstDepRecord, asid_),
  0,
  2,
  1,
  3,
  5,
  ~0u,
  4,
  ~0u,
  6,
  7,
  8,
  9,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::ProtoMessage::InstDepRecordHeader)},
  { 13, 30, sizeof(::ProtoMessage::InstDepRecord)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoMessage::_InstDepRecordHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoMessage::_InstDepRecord_default_instance_),
};

const char descriptor_table_protodef_inst_5fdep_5frecord_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025inst_dep_record.proto\022\014ProtoMessage\"]\n"
  "\023InstDepRecordHeader\022\016\n\006obj_id\030\001 \002(\t\022\016\n\003"
  "ver\030\002 \001(\r:\0010\022\021\n\ttick_freq\030\003 \002(\004\022\023\n\013windo"
  "w_size\030\004 \002(\r\"\266\002\n\rInstDepRecord\022\017\n\007seq_nu"
  "m\030\001 \002(\004\022=\n\004type\030\002 \002(\0162&.ProtoMessage.Ins"
  "tDepRecord.RecordType:\007INVALID\022\016\n\006p_addr"
  "\030\003 \001(\004\022\014\n\004size\030\004 \001(\r\022\r\n\005flags\030\005 \001(\r\022\017\n\007r"
  "ob_dep\030\006 \003(\004\022\022\n\ncomp_delay\030\007 \002(\004\022\017\n\007reg_"
  "dep\030\010 \003(\004\022\016\n\006weight\030\t \001(\r\022\n\n\002pc\030\n \001(\004\022\016\n"
  "\006v_addr\030\013 \001(\004\022\014\n\004asid\030\014 \001(\r\"8\n\nRecordTyp"
  "e\022\013\n\007INVALID\020\000\022\010\n\004LOAD\020\001\022\t\n\005STORE\020\002\022\010\n\004C"
  "OMP\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_inst_5fdep_5frecord_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_inst_5fdep_5frecord_2eproto_sccs[2] = {
  &scc_info_InstDepRecord_inst_5fdep_5frecord_2eproto.base,
  &scc_info_InstDepRecordHeader_inst_5fdep_5frecord_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_inst_5fdep_5frecord_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_inst_5fdep_5frecord_2eproto = {
  false, false, descriptor_table_protodef_inst_5fdep_5frecord_2eproto, "inst_dep_record.proto", 445,
  &descriptor_table_inst_5fdep_5frecord_2eproto_once, descriptor_table_inst_5fdep_5frecord_2eproto_sccs, descriptor_table_inst_5fdep_5frecord_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_inst_5fdep_5frecord_2eproto::offsets,
  file_level_metadata_inst_5fdep_5frecord_2eproto, 2, file_level_enum_descriptors_inst_5fdep_5frecord_2eproto, file_level_service_descriptors_inst_5fdep_5frecord_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_inst_5fdep_5frecord_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_inst_5fdep_5frecord_2eproto)), true);
namespace ProtoMessage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InstDepRecord_RecordType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_inst_5fdep_5frecord_2eproto);
  return file_level_enum_descriptors_inst_5fdep_5frecord_2eproto[0];
}
bool InstDepRecord_RecordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InstDepRecord_RecordType InstDepRecord::INVALID;
constexpr InstDepRecord_RecordType InstDepRecord::LOAD;
constexpr InstDepRecord_RecordType InstDepRecord::STORE;
constexpr InstDepRecord_RecordType InstDepRecord::COMP;
constexpr InstDepRecord_RecordType InstDepRecord::RecordType_MIN;
constexpr InstDepRecord_RecordType InstDepRecord::RecordType_MAX;
constexpr int InstDepRecord::RecordType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void InstDepRecordHeader::InitAsDefaultInstance() {
}
class InstDepRecordHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<InstDepRecordHeader>()._has_bits_);
  static void set_has_obj_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tick_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

InstDepRecordHeader::InstDepRecordHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoMessage.InstDepRecordHeader)
}
InstDepRecordHeader::InstDepRecordHeader(const InstDepRecordHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  obj_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_obj_id()) {
    obj_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_obj_id(),
      GetArena());
  }
  ::memcpy(&tick_freq_, &from.tick_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&window_size_) -
    reinterpret_cast<char*>(&tick_freq_)) + sizeof(window_size_));
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.InstDepRecordHeader)
}

void InstDepRecordHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstDepRecordHeader_inst_5fdep_5frecord_2eproto.base);
  obj_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tick_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_size_) -
      reinterpret_cast<char*>(&tick_freq_)) + sizeof(window_size_));
}

InstDepRecordHeader::~InstDepRecordHeader() {
  // @@protoc_insertion_point(destructor:ProtoMessage.InstDepRecordHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstDepRecordHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  obj_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstDepRecordHeader::ArenaDtor(void* object) {
  InstDepRecordHeader* _this = reinterpret_cast< InstDepRecordHeader* >(object);
  (void)_this;
}
void InstDepRecordHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstDepRecordHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstDepRecordHeader& InstDepRecordHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstDepRecordHeader_inst_5fdep_5frecord_2eproto.base);
  return *internal_default_instance();
}


void InstDepRecordHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.InstDepRecordHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    obj_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&tick_freq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&window_size_) -
        reinterpret_cast<char*>(&tick_freq_)) + sizeof(window_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstDepRecordHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string obj_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_obj_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoMessage.InstDepRecordHeader.obj_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ver = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ver(&has_bits);
          ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 tick_freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tick_freq(&has_bits);
          tick_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 window_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_window_size(&has_bits);
          window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstDepRecordHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.InstDepRecordHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string obj_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_obj_id().data(), static_cast<int>(this->_internal_obj_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoMessage.InstDepRecordHeader.obj_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_obj_id(), target);
  }

  // optional uint32 ver = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ver(), target);
  }

  // required uint64 tick_freq = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick_freq(), target);
  }

  // required uint32 window_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_window_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.InstDepRecordHeader)
  return target;
}

size_t InstDepRecordHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoMessage.InstDepRecordHeader)
  size_t total_size = 0;

  if (_internal_has_obj_id()) {
    // required string obj_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obj_id());
  }

  if (_internal_has_tick_freq()) {
    // required uint64 tick_freq = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick_freq());
  }

  if (_internal_has_window_size()) {
    // required uint32 window_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_window_size());
  }

  return total_size;
}
size_t InstDepRecordHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.InstDepRecordHeader)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string obj_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obj_id());

    // required uint64 tick_freq = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick_freq());

    // required uint32 window_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_window_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 ver = 2 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ver());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstDepRecordHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.InstDepRecordHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const InstDepRecordHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstDepRecordHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.InstDepRecordHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.InstDepRecordHeader)
    MergeFrom(*source);
  }
}

void InstDepRecordHeader::MergeFrom(const InstDepRecordHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.InstDepRecordHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_obj_id(from._internal_obj_id());
    }
    if (cached_has_bits & 0x00000002u) {
      tick_freq_ = from.tick_freq_;
    }
    if (cached_has_bits & 0x00000004u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000008u) {
      window_size_ = from.window_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InstDepRecordHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.InstDepRecordHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstDepRecordHeader::CopyFrom(const InstDepRecordHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.InstDepRecordHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstDepRecordHeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InstDepRecordHeader::InternalSwap(InstDepRecordHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obj_id_.Swap(&other->obj_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstDepRecordHeader, window_size_)
      + sizeof(InstDepRecordHeader::window_size_)
      - PROTOBUF_FIELD_OFFSET(InstDepRecordHeader, tick_freq_)>(
          reinterpret_cast<char*>(&tick_freq_),
          reinterpret_cast<char*>(&other->tick_freq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstDepRecordHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstDepRecord::InitAsDefaultInstance() {
}
class InstDepRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<InstDepRecord>()._has_bits_);
  static void set_has_seq_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_p_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_comp_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_v_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_asid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000015) ^ 0x00000015) != 0;
  }
};

InstDepRecord::InstDepRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rob_dep_(arena),
  reg_dep_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoMessage.InstDepRecord)
}
InstDepRecord::InstDepRecord(const InstDepRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rob_dep_(from.rob_dep_),
      reg_dep_(from.reg_dep_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seq_num_, &from.seq_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&asid_) -
    reinterpret_cast<char*>(&seq_num_)) + sizeof(asid_));
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.InstDepRecord)
}

void InstDepRecord::SharedCtor() {
  ::memset(&seq_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asid_) -
      reinterpret_cast<char*>(&seq_num_)) + sizeof(asid_));
}

InstDepRecord::~InstDepRecord() {
  // @@protoc_insertion_point(destructor:ProtoMessage.InstDepRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstDepRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InstDepRecord::ArenaDtor(void* object) {
  InstDepRecord* _this = reinterpret_cast< InstDepRecord* >(object);
  (void)_this;
}
void InstDepRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstDepRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstDepRecord& InstDepRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstDepRecord_inst_5fdep_5frecord_2eproto.base);
  return *internal_default_instance();
}


void InstDepRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.InstDepRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rob_dep_.Clear();
  reg_dep_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&seq_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pc_) -
        reinterpret_cast<char*>(&seq_num_)) + sizeof(pc_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&v_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&asid_) -
        reinterpret_cast<char*>(&v_addr_)) + sizeof(asid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstDepRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 seq_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seq_num(&has_bits);
          seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ProtoMessage.InstDepRecord.RecordType type = 2 [default = INVALID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoMessage::InstDepRecord_RecordType_IsValid(val))) {
            _internal_set_type(static_cast<::ProtoMessage::InstDepRecord_RecordType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 p_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_p_addr(&has_bits);
          p_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 rob_dep = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rob_dep(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_rob_dep(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 comp_delay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_comp_delay(&has_bits);
          comp_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 reg_dep = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_reg_dep(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_reg_dep(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 weight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 pc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_pc(&has_bits);
          pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 v_addr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_v_addr(&has_bits);
          v_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 asid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_asid(&has_bits);
          asid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstDepRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.InstDepRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 seq_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seq_num(), target);
  }

  // required .ProtoMessage.InstDepRecord.RecordType type = 2 [default = INVALID];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional uint64 p_addr = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_p_addr(), target);
  }

  // optional uint32 size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_size(), target);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flags(), target);
  }

  // repeated uint64 rob_dep = 6;
  for (int i = 0, n = this->_internal_rob_dep_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_rob_dep(i), target);
  }

  // required uint64 comp_delay = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_comp_delay(), target);
  }

  // repeated uint64 reg_dep = 8;
  for (int i = 0, n = this->_internal_reg_dep_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_reg_dep(i), target);
  }

  // optional uint32 weight = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_weight(), target);
  }

  // optional uint64 pc = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_pc(), target);
  }

  // optional uint64 v_addr = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_v_addr(), target);
  }

  // optional uint32 asid = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_asid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.InstDepRecord)
  return target;
}

size_t InstDepRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoMessage.InstDepRecord)
  size_t total_size = 0;

  if (_internal_has_seq_num()) {
    // required uint64 seq_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_num());
  }

  if (_internal_has_type()) {
    // required .ProtoMessage.InstDepRecord.RecordType type = 2 [default = INVALID];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_comp_delay()) {
    // required uint64 comp_delay = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_comp_delay());
  }

  return total_size;
}
size_t InstDepRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.InstDepRecord)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000015) ^ 0x00000015) == 0) {  // All required fields are present.
    // required uint64 seq_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_num());

    // required .ProtoMessage.InstDepRecord.RecordType type = 2 [default = INVALID];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required uint64 comp_delay = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_comp_delay());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 rob_dep = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->rob_dep_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rob_dep_size());
    total_size += data_size;
  }

  // repeated uint64 reg_dep = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->reg_dep_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reg_dep_size());
    total_size += data_size;
  }

  // optional uint64 p_addr = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_p_addr());
  }

  // optional uint32 size = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (cached_has_bits & 0x000000e0u) {
    // optional uint32 flags = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 weight = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weight());
    }

    // optional uint64 pc = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_pc());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 v_addr = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_v_addr());
    }

    // optional uint32 asid = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_asid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstDepRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.InstDepRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const InstDepRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstDepRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.InstDepRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.InstDepRecord)
    MergeFrom(*source);
  }
}

void InstDepRecord::MergeFrom(const InstDepRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.InstDepRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rob_dep_.MergeFrom(from.rob_dep_);
  reg_dep_.MergeFrom(from.reg_dep_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      seq_num_ = from.seq_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      p_addr_ = from.p_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      comp_delay_ = from.comp_delay_;
    }
    if (cached_has_bits & 0x00000020u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      pc_ = from.pc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      v_addr_ = from.v_addr_;
    }
    if (cached_has_bits & 0x00000200u) {
      asid_ = from.asid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InstDepRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.InstDepRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstDepRecord::CopyFrom(const InstDepRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.InstDepRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstDepRecord::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InstDepRecord::InternalSwap(InstDepRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rob_dep_.InternalSwap(&other->rob_dep_);
  reg_dep_.InternalSwap(&other->reg_dep_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstDepRecord, asid_)
      + sizeof(InstDepRecord::asid_)
      - PROTOBUF_FIELD_OFFSET(InstDepRecord, seq_num_)>(
          reinterpret_cast<char*>(&seq_num_),
          reinterpret_cast<char*>(&other->seq_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstDepRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtoMessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProtoMessage::InstDepRecordHeader* Arena::CreateMaybeMessage< ::ProtoMessage::InstDepRecordHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMessage::InstDepRecordHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoMessage::InstDepRecord* Arena::CreateMaybeMessage< ::ProtoMessage::InstDepRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMessage::InstDepRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
