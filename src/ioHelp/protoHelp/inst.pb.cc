// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inst.proto

#include "inst.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_inst_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Inst_MemAccess_inst_2eproto;
namespace ProtoMessage {
class InstHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstHeader> _instance;
} _InstHeader_default_instance_;
class Inst_MemAccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Inst_MemAccess> _instance;
} _Inst_MemAccess_default_instance_;
class InstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Inst> _instance;
} _Inst_default_instance_;
}  // namespace ProtoMessage
static void InitDefaultsscc_info_Inst_inst_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoMessage::_Inst_default_instance_;
    new (ptr) ::ProtoMessage::Inst();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoMessage::Inst::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Inst_inst_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Inst_inst_2eproto}, {
      &scc_info_Inst_MemAccess_inst_2eproto.base,}};

static void InitDefaultsscc_info_Inst_MemAccess_inst_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoMessage::_Inst_MemAccess_default_instance_;
    new (ptr) ::ProtoMessage::Inst_MemAccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoMessage::Inst_MemAccess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Inst_MemAccess_inst_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Inst_MemAccess_inst_2eproto}, {}};

static void InitDefaultsscc_info_InstHeader_inst_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoMessage::_InstHeader_default_instance_;
    new (ptr) ::ProtoMessage::InstHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoMessage::InstHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstHeader_inst_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstHeader_inst_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_inst_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_inst_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_inst_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_inst_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, obj_id_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, ver_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, tick_freq_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, has_mem_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, addr_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, size_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, mem_flags_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, pc_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, inst_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, inst_bytes_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, nodeid_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, cpuid_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, tick_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, type_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, inst_flags_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, mem_access_),
  1,
  2,
  0,
  3,
  5,
  4,
  6,
  7,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::ProtoMessage::InstHeader)},
  { 13, 21, sizeof(::ProtoMessage::Inst_MemAccess)},
  { 24, 38, sizeof(::ProtoMessage::Inst)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoMessage::_InstHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoMessage::_Inst_MemAccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoMessage::_Inst_default_instance_),
};

const char descriptor_table_protodef_inst_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ninst.proto\022\014ProtoMessage\"P\n\nInstHeader"
  "\022\016\n\006obj_id\030\001 \002(\t\022\016\n\003ver\030\002 \002(\r:\0010\022\021\n\ttick"
  "_freq\030\003 \002(\004\022\017\n\007has_mem\030\004 \002(\010\"\277\006\n\004Inst\022\n\n"
  "\002pc\030\001 \002(\004\022\014\n\004inst\030\002 \001(\007\022\022\n\ninst_bytes\030\t "
  "\001(\014\022\016\n\006nodeid\030\003 \001(\r\022\r\n\005cpuid\030\004 \001(\r\022\014\n\004ti"
  "ck\030\005 \001(\006\022)\n\004type\030\006 \001(\0162\033.ProtoMessage.In"
  "st.InstType\022\022\n\ninst_flags\030\007 \001(\r\0220\n\nmem_a"
  "ccess\030\010 \003(\0132\034.ProtoMessage.Inst.MemAcces"
  "s\032:\n\tMemAccess\022\014\n\004addr\030\001 \002(\004\022\014\n\004size\030\002 \002"
  "(\r\022\021\n\tmem_flags\030\003 \001(\r\"\256\004\n\010InstType\022\010\n\004No"
  "ne\020\000\022\n\n\006IntAlu\020\001\022\n\n\006IntMul\020\002\022\n\n\006IntDiv\020\003"
  "\022\014\n\010FloatAdd\020\004\022\014\n\010FloatCmp\020\005\022\014\n\010FloatCvt"
  "\020\006\022\r\n\tFloatMult\020\007\022\014\n\010FloatDiv\020\010\022\r\n\tFloat"
  "Sqrt\020\t\022\016\n\nSIMDIntAdd\020\n\022\021\n\rSIMDIntAddAcc\020"
  "\013\022\016\n\nSIMDIntAlu\020\014\022\016\n\nSIMDIntCmp\020\r\022\016\n\nSIM"
  "DIntCvt\020\016\022\014\n\010SIMDMisc\020\017\022\017\n\013SIMDIntMult\020\020"
  "\022\022\n\016SIMDIntMultAcc\020\021\022\020\n\014SIMDIntShift\020\022\022\023"
  "\n\017SIMDIntShiftAcc\020\023\022\014\n\010SIMDSqrt\020\024\022\020\n\014SIM"
  "DFloatAdd\020\025\022\020\n\014SIMDFloatAlu\020\026\022\020\n\014SIMDFlo"
  "atCmp\020\027\022\020\n\014SIMDFloatCvt\020\030\022\020\n\014SIMDFloatDi"
  "v\020\031\022\021\n\rSIMDFloatMisc\020\032\022\021\n\rSIMDFloatMult\020"
  "\033\022\024\n\020SIMDFloatMultAdd\020\034\022\021\n\rSIMDFloatSqrt"
  "\020\035\022\013\n\007MemRead\020\036\022\014\n\010MemWrite\020\037\022\r\n\tIprAcce"
  "ss\020 \022\020\n\014InstPrefetch\020!"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_inst_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_inst_2eproto_sccs[3] = {
  &scc_info_Inst_inst_2eproto.base,
  &scc_info_Inst_MemAccess_inst_2eproto.base,
  &scc_info_InstHeader_inst_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_inst_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_inst_2eproto = {
  false, false, descriptor_table_protodef_inst_2eproto, "inst.proto", 942,
  &descriptor_table_inst_2eproto_once, descriptor_table_inst_2eproto_sccs, descriptor_table_inst_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_inst_2eproto::offsets,
  file_level_metadata_inst_2eproto, 3, file_level_enum_descriptors_inst_2eproto, file_level_service_descriptors_inst_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_inst_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_inst_2eproto)), true);
namespace ProtoMessage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Inst_InstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_inst_2eproto);
  return file_level_enum_descriptors_inst_2eproto[0];
}
bool Inst_InstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Inst_InstType Inst::None;
constexpr Inst_InstType Inst::IntAlu;
constexpr Inst_InstType Inst::IntMul;
constexpr Inst_InstType Inst::IntDiv;
constexpr Inst_InstType Inst::FloatAdd;
constexpr Inst_InstType Inst::FloatCmp;
constexpr Inst_InstType Inst::FloatCvt;
constexpr Inst_InstType Inst::FloatMult;
constexpr Inst_InstType Inst::FloatDiv;
constexpr Inst_InstType Inst::FloatSqrt;
constexpr Inst_InstType Inst::SIMDIntAdd;
constexpr Inst_InstType Inst::SIMDIntAddAcc;
constexpr Inst_InstType Inst::SIMDIntAlu;
constexpr Inst_InstType Inst::SIMDIntCmp;
constexpr Inst_InstType Inst::SIMDIntCvt;
constexpr Inst_InstType Inst::SIMDMisc;
constexpr Inst_InstType Inst::SIMDIntMult;
constexpr Inst_InstType Inst::SIMDIntMultAcc;
constexpr Inst_InstType Inst::SIMDIntShift;
constexpr Inst_InstType Inst::SIMDIntShiftAcc;
constexpr Inst_InstType Inst::SIMDSqrt;
constexpr Inst_InstType Inst::SIMDFloatAdd;
constexpr Inst_InstType Inst::SIMDFloatAlu;
constexpr Inst_InstType Inst::SIMDFloatCmp;
constexpr Inst_InstType Inst::SIMDFloatCvt;
constexpr Inst_InstType Inst::SIMDFloatDiv;
constexpr Inst_InstType Inst::SIMDFloatMisc;
constexpr Inst_InstType Inst::SIMDFloatMult;
constexpr Inst_InstType Inst::SIMDFloatMultAdd;
constexpr Inst_InstType Inst::SIMDFloatSqrt;
constexpr Inst_InstType Inst::MemRead;
constexpr Inst_InstType Inst::MemWrite;
constexpr Inst_InstType Inst::IprAccess;
constexpr Inst_InstType Inst::InstPrefetch;
constexpr Inst_InstType Inst::InstType_MIN;
constexpr Inst_InstType Inst::InstType_MAX;
constexpr int Inst::InstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void InstHeader::InitAsDefaultInstance() {
}
class InstHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<InstHeader>()._has_bits_);
  static void set_has_obj_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tick_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_has_mem(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

InstHeader::InstHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoMessage.InstHeader)
}
InstHeader::InstHeader(const InstHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  obj_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_obj_id()) {
    obj_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_obj_id(),
      GetArena());
  }
  ::memcpy(&tick_freq_, &from.tick_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_mem_) -
    reinterpret_cast<char*>(&tick_freq_)) + sizeof(has_mem_));
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.InstHeader)
}

void InstHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstHeader_inst_2eproto.base);
  obj_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tick_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_mem_) -
      reinterpret_cast<char*>(&tick_freq_)) + sizeof(has_mem_));
}

InstHeader::~InstHeader() {
  // @@protoc_insertion_point(destructor:ProtoMessage.InstHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  obj_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstHeader::ArenaDtor(void* object) {
  InstHeader* _this = reinterpret_cast< InstHeader* >(object);
  (void)_this;
}
void InstHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstHeader& InstHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstHeader_inst_2eproto.base);
  return *internal_default_instance();
}


void InstHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.InstHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    obj_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&tick_freq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_mem_) -
        reinterpret_cast<char*>(&tick_freq_)) + sizeof(has_mem_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string obj_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_obj_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoMessage.InstHeader.obj_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 ver = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ver(&has_bits);
          ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 tick_freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tick_freq(&has_bits);
          tick_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool has_mem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_has_mem(&has_bits);
          has_mem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.InstHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string obj_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_obj_id().data(), static_cast<int>(this->_internal_obj_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoMessage.InstHeader.obj_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_obj_id(), target);
  }

  // required uint32 ver = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ver(), target);
  }

  // required uint64 tick_freq = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick_freq(), target);
  }

  // required bool has_mem = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_mem(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.InstHeader)
  return target;
}

size_t InstHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoMessage.InstHeader)
  size_t total_size = 0;

  if (_internal_has_obj_id()) {
    // required string obj_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obj_id());
  }

  if (_internal_has_tick_freq()) {
    // required uint64 tick_freq = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick_freq());
  }

  if (_internal_has_ver()) {
    // required uint32 ver = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ver());
  }

  if (_internal_has_has_mem()) {
    // required bool has_mem = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t InstHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.InstHeader)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string obj_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obj_id());

    // required uint64 tick_freq = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick_freq());

    // required uint32 ver = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ver());

    // required bool has_mem = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.InstHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const InstHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.InstHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.InstHeader)
    MergeFrom(*source);
  }
}

void InstHeader::MergeFrom(const InstHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.InstHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_obj_id(from._internal_obj_id());
    }
    if (cached_has_bits & 0x00000002u) {
      tick_freq_ = from.tick_freq_;
    }
    if (cached_has_bits & 0x00000004u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_mem_ = from.has_mem_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InstHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.InstHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstHeader::CopyFrom(const InstHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.InstHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstHeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InstHeader::InternalSwap(InstHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obj_id_.Swap(&other->obj_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstHeader, has_mem_)
      + sizeof(InstHeader::has_mem_)
      - PROTOBUF_FIELD_OFFSET(InstHeader, tick_freq_)>(
          reinterpret_cast<char*>(&tick_freq_),
          reinterpret_cast<char*>(&other->tick_freq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Inst_MemAccess::InitAsDefaultInstance() {
}
class Inst_MemAccess::_Internal {
 public:
  using HasBits = decltype(std::declval<Inst_MemAccess>()._has_bits_);
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mem_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Inst_MemAccess::Inst_MemAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoMessage.Inst.MemAccess)
}
Inst_MemAccess::Inst_MemAccess(const Inst_MemAccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&mem_flags_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(mem_flags_));
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.Inst.MemAccess)
}

void Inst_MemAccess::SharedCtor() {
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_flags_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(mem_flags_));
}

Inst_MemAccess::~Inst_MemAccess() {
  // @@protoc_insertion_point(destructor:ProtoMessage.Inst.MemAccess)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Inst_MemAccess::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Inst_MemAccess::ArenaDtor(void* object) {
  Inst_MemAccess* _this = reinterpret_cast< Inst_MemAccess* >(object);
  (void)_this;
}
void Inst_MemAccess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Inst_MemAccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Inst_MemAccess& Inst_MemAccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Inst_MemAccess_inst_2eproto.base);
  return *internal_default_instance();
}


void Inst_MemAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.Inst.MemAccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mem_flags_) -
        reinterpret_cast<char*>(&addr_)) + sizeof(mem_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Inst_MemAccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_addr(&has_bits);
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mem_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mem_flags(&has_bits);
          mem_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Inst_MemAccess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.Inst.MemAccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_addr(), target);
  }

  // required uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // optional uint32 mem_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mem_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.Inst.MemAccess)
  return target;
}

size_t Inst_MemAccess::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoMessage.Inst.MemAccess)
  size_t total_size = 0;

  if (_internal_has_addr()) {
    // required uint64 addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_addr());
  }

  if (_internal_has_size()) {
    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  return total_size;
}
size_t Inst_MemAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.Inst.MemAccess)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_addr());

    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 mem_flags = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mem_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Inst_MemAccess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.Inst.MemAccess)
  GOOGLE_DCHECK_NE(&from, this);
  const Inst_MemAccess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Inst_MemAccess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.Inst.MemAccess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.Inst.MemAccess)
    MergeFrom(*source);
  }
}

void Inst_MemAccess::MergeFrom(const Inst_MemAccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.Inst.MemAccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      addr_ = from.addr_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      mem_flags_ = from.mem_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Inst_MemAccess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.Inst.MemAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inst_MemAccess::CopyFrom(const Inst_MemAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.Inst.MemAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inst_MemAccess::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Inst_MemAccess::InternalSwap(Inst_MemAccess* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Inst_MemAccess, mem_flags_)
      + sizeof(Inst_MemAccess::mem_flags_)
      - PROTOBUF_FIELD_OFFSET(Inst_MemAccess, addr_)>(
          reinterpret_cast<char*>(&addr_),
          reinterpret_cast<char*>(&other->addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Inst_MemAccess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Inst::InitAsDefaultInstance() {
}
class Inst::_Internal {
 public:
  using HasBits = decltype(std::declval<Inst>()._has_bits_);
  static void set_has_pc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inst(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inst_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nodeid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cpuid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_inst_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

Inst::Inst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mem_access_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoMessage.Inst)
}
Inst::Inst(const Inst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mem_access_(from.mem_access_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inst_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inst_bytes()) {
    inst_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_inst_bytes(),
      GetArena());
  }
  ::memcpy(&pc_, &from.pc_,
    static_cast<size_t>(reinterpret_cast<char*>(&inst_flags_) -
    reinterpret_cast<char*>(&pc_)) + sizeof(inst_flags_));
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.Inst)
}

void Inst::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Inst_inst_2eproto.base);
  inst_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inst_flags_) -
      reinterpret_cast<char*>(&pc_)) + sizeof(inst_flags_));
}

Inst::~Inst() {
  // @@protoc_insertion_point(destructor:ProtoMessage.Inst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Inst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  inst_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Inst::ArenaDtor(void* object) {
  Inst* _this = reinterpret_cast< Inst* >(object);
  (void)_this;
}
void Inst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Inst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Inst& Inst::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Inst_inst_2eproto.base);
  return *internal_default_instance();
}


void Inst::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.Inst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mem_access_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    inst_bytes_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&pc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inst_flags_) -
        reinterpret_cast<char*>(&pc_)) + sizeof(inst_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Inst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 pc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pc(&has_bits);
          pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 inst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_inst(&has_bits);
          inst_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 nodeid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nodeid(&has_bits);
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cpuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cpuid(&has_bits);
          cpuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 tick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_tick(&has_bits);
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .ProtoMessage.Inst.InstType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoMessage::Inst_InstType_IsValid(val))) {
            _internal_set_type(static_cast<::ProtoMessage::Inst_InstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 inst_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_inst_flags(&has_bits);
          inst_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mem_access(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes inst_bytes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_inst_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Inst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.Inst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 pc = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pc(), target);
  }

  // optional fixed32 inst = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_inst(), target);
  }

  // optional uint32 nodeid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nodeid(), target);
  }

  // optional uint32 cpuid = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cpuid(), target);
  }

  // optional fixed64 tick = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_tick(), target);
  }

  // optional .ProtoMessage.Inst.InstType type = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // optional uint32 inst_flags = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_inst_flags(), target);
  }

  // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mem_access_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_mem_access(i), target, stream);
  }

  // optional bytes inst_bytes = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_inst_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.Inst)
  return target;
}

size_t Inst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.Inst)
  size_t total_size = 0;

  // required uint64 pc = 1;
  if (_internal_has_pc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pc());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
  total_size += 1UL * this->_internal_mem_access_size();
  for (const auto& msg : this->mem_access_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes inst_bytes = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_inst_bytes());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional fixed32 inst = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 nodeid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_nodeid());
    }

    // optional fixed64 tick = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 cpuid = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cpuid());
    }

    // optional .ProtoMessage.Inst.InstType type = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 inst_flags = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_inst_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Inst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.Inst)
  GOOGLE_DCHECK_NE(&from, this);
  const Inst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Inst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.Inst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.Inst)
    MergeFrom(*source);
  }
}

void Inst::MergeFrom(const Inst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.Inst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mem_access_.MergeFrom(from.mem_access_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_inst_bytes(from._internal_inst_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      pc_ = from.pc_;
    }
    if (cached_has_bits & 0x00000004u) {
      inst_ = from.inst_;
    }
    if (cached_has_bits & 0x00000008u) {
      nodeid_ = from.nodeid_;
    }
    if (cached_has_bits & 0x00000010u) {
      tick_ = from.tick_;
    }
    if (cached_has_bits & 0x00000020u) {
      cpuid_ = from.cpuid_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      inst_flags_ = from.inst_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Inst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.Inst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inst::CopyFrom(const Inst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.Inst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inst::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(mem_access_)) return false;
  return true;
}

void Inst::InternalSwap(Inst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mem_access_.InternalSwap(&other->mem_access_);
  inst_bytes_.Swap(&other->inst_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Inst, inst_flags_)
      + sizeof(Inst::inst_flags_)
      - PROTOBUF_FIELD_OFFSET(Inst, pc_)>(
          reinterpret_cast<char*>(&pc_),
          reinterpret_cast<char*>(&other->pc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Inst::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtoMessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProtoMessage::InstHeader* Arena::CreateMaybeMessage< ::ProtoMessage::InstHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMessage::InstHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoMessage::Inst_MemAccess* Arena::CreateMaybeMessage< ::ProtoMessage::Inst_MemAccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMessage::Inst_MemAccess >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoMessage::Inst* Arena::CreateMaybeMessage< ::ProtoMessage::Inst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMessage::Inst >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
