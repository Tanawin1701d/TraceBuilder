// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inst_dep_record.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_inst_5fdep_5frecord_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_inst_5fdep_5frecord_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_inst_5fdep_5frecord_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_inst_5fdep_5frecord_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_inst_5fdep_5frecord_2eproto;
namespace ProtoMessage {
class InstDepRecord;
class InstDepRecordDefaultTypeInternal;
extern InstDepRecordDefaultTypeInternal _InstDepRecord_default_instance_;
class InstDepRecordHeader;
class InstDepRecordHeaderDefaultTypeInternal;
extern InstDepRecordHeaderDefaultTypeInternal _InstDepRecordHeader_default_instance_;
}  // namespace ProtoMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoMessage::InstDepRecord* Arena::CreateMaybeMessage<::ProtoMessage::InstDepRecord>(Arena*);
template<> ::ProtoMessage::InstDepRecordHeader* Arena::CreateMaybeMessage<::ProtoMessage::InstDepRecordHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoMessage {

enum InstDepRecord_RecordType : int {
  InstDepRecord_RecordType_INVALID = 0,
  InstDepRecord_RecordType_LOAD = 1,
  InstDepRecord_RecordType_STORE = 2,
  InstDepRecord_RecordType_COMP = 3
};
bool InstDepRecord_RecordType_IsValid(int value);
constexpr InstDepRecord_RecordType InstDepRecord_RecordType_RecordType_MIN = InstDepRecord_RecordType_INVALID;
constexpr InstDepRecord_RecordType InstDepRecord_RecordType_RecordType_MAX = InstDepRecord_RecordType_COMP;
constexpr int InstDepRecord_RecordType_RecordType_ARRAYSIZE = InstDepRecord_RecordType_RecordType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InstDepRecord_RecordType_descriptor();
template<typename T>
inline const std::string& InstDepRecord_RecordType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InstDepRecord_RecordType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InstDepRecord_RecordType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InstDepRecord_RecordType_descriptor(), enum_t_value);
}
inline bool InstDepRecord_RecordType_Parse(
    const std::string& name, InstDepRecord_RecordType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InstDepRecord_RecordType>(
    InstDepRecord_RecordType_descriptor(), name, value);
}
// ===================================================================

class InstDepRecordHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMessage.InstDepRecordHeader) */ {
 public:
  inline InstDepRecordHeader() : InstDepRecordHeader(nullptr) {};
  virtual ~InstDepRecordHeader();

  InstDepRecordHeader(const InstDepRecordHeader& from);
  InstDepRecordHeader(InstDepRecordHeader&& from) noexcept
    : InstDepRecordHeader() {
    *this = ::std::move(from);
  }

  inline InstDepRecordHeader& operator=(const InstDepRecordHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstDepRecordHeader& operator=(InstDepRecordHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstDepRecordHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstDepRecordHeader* internal_default_instance() {
    return reinterpret_cast<const InstDepRecordHeader*>(
               &_InstDepRecordHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InstDepRecordHeader& a, InstDepRecordHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(InstDepRecordHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstDepRecordHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstDepRecordHeader* New() const final {
    return CreateMaybeMessage<InstDepRecordHeader>(nullptr);
  }

  InstDepRecordHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstDepRecordHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstDepRecordHeader& from);
  void MergeFrom(const InstDepRecordHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstDepRecordHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMessage.InstDepRecordHeader";
  }
  protected:
  explicit InstDepRecordHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inst_5fdep_5frecord_2eproto);
    return ::descriptor_table_inst_5fdep_5frecord_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjIdFieldNumber = 1,
    kTickFreqFieldNumber = 3,
    kVerFieldNumber = 2,
    kWindowSizeFieldNumber = 4,
  };
  // required string obj_id = 1;
  bool has_obj_id() const;
  private:
  bool _internal_has_obj_id() const;
  public:
  void clear_obj_id();
  const std::string& obj_id() const;
  void set_obj_id(const std::string& value);
  void set_obj_id(std::string&& value);
  void set_obj_id(const char* value);
  void set_obj_id(const char* value, size_t size);
  std::string* mutable_obj_id();
  std::string* release_obj_id();
  void set_allocated_obj_id(std::string* obj_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_obj_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_obj_id(
      std::string* obj_id);
  private:
  const std::string& _internal_obj_id() const;
  void _internal_set_obj_id(const std::string& value);
  std::string* _internal_mutable_obj_id();
  public:

  // required uint64 tick_freq = 3;
  bool has_tick_freq() const;
  private:
  bool _internal_has_tick_freq() const;
  public:
  void clear_tick_freq();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_freq() const;
  void set_tick_freq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick_freq() const;
  void _internal_set_tick_freq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 ver = 2 [default = 0];
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  ::PROTOBUF_NAMESPACE_ID::uint32 ver() const;
  void set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ver() const;
  void _internal_set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 window_size = 4;
  bool has_window_size() const;
  private:
  bool _internal_has_window_size() const;
  public:
  void clear_window_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 window_size() const;
  void set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_window_size() const;
  void _internal_set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMessage.InstDepRecordHeader)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_freq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 window_size_;
  friend struct ::TableStruct_inst_5fdep_5frecord_2eproto;
};
// -------------------------------------------------------------------

class InstDepRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMessage.InstDepRecord) */ {
 public:
  inline InstDepRecord() : InstDepRecord(nullptr) {};
  virtual ~InstDepRecord();

  InstDepRecord(const InstDepRecord& from);
  InstDepRecord(InstDepRecord&& from) noexcept
    : InstDepRecord() {
    *this = ::std::move(from);
  }

  inline InstDepRecord& operator=(const InstDepRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstDepRecord& operator=(InstDepRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstDepRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstDepRecord* internal_default_instance() {
    return reinterpret_cast<const InstDepRecord*>(
               &_InstDepRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InstDepRecord& a, InstDepRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(InstDepRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstDepRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstDepRecord* New() const final {
    return CreateMaybeMessage<InstDepRecord>(nullptr);
  }

  InstDepRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstDepRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstDepRecord& from);
  void MergeFrom(const InstDepRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstDepRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMessage.InstDepRecord";
  }
  protected:
  explicit InstDepRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inst_5fdep_5frecord_2eproto);
    return ::descriptor_table_inst_5fdep_5frecord_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef InstDepRecord_RecordType RecordType;
  static constexpr RecordType INVALID =
    InstDepRecord_RecordType_INVALID;
  static constexpr RecordType LOAD =
    InstDepRecord_RecordType_LOAD;
  static constexpr RecordType STORE =
    InstDepRecord_RecordType_STORE;
  static constexpr RecordType COMP =
    InstDepRecord_RecordType_COMP;
  static inline bool RecordType_IsValid(int value) {
    return InstDepRecord_RecordType_IsValid(value);
  }
  static constexpr RecordType RecordType_MIN =
    InstDepRecord_RecordType_RecordType_MIN;
  static constexpr RecordType RecordType_MAX =
    InstDepRecord_RecordType_RecordType_MAX;
  static constexpr int RecordType_ARRAYSIZE =
    InstDepRecord_RecordType_RecordType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RecordType_descriptor() {
    return InstDepRecord_RecordType_descriptor();
  }
  template<typename T>
  static inline const std::string& RecordType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RecordType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RecordType_Name.");
    return InstDepRecord_RecordType_Name(enum_t_value);
  }
  static inline bool RecordType_Parse(const std::string& name,
      RecordType* value) {
    return InstDepRecord_RecordType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRobDepFieldNumber = 6,
    kRegDepFieldNumber = 8,
    kSeqNumFieldNumber = 1,
    kPAddrFieldNumber = 3,
    kTypeFieldNumber = 2,
    kSizeFieldNumber = 4,
    kCompDelayFieldNumber = 7,
    kFlagsFieldNumber = 5,
    kWeightFieldNumber = 9,
    kPcFieldNumber = 10,
    kVAddrFieldNumber = 11,
    kAsidFieldNumber = 12,
  };
  // repeated uint64 rob_dep = 6;
  int rob_dep_size() const;
  private:
  int _internal_rob_dep_size() const;
  public:
  void clear_rob_dep();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rob_dep(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_rob_dep() const;
  void _internal_add_rob_dep(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_rob_dep();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 rob_dep(int index) const;
  void set_rob_dep(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_rob_dep(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      rob_dep() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_rob_dep();

  // repeated uint64 reg_dep = 8;
  int reg_dep_size() const;
  private:
  int _internal_reg_dep_size() const;
  public:
  void clear_reg_dep();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reg_dep(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_reg_dep() const;
  void _internal_add_reg_dep(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_reg_dep();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 reg_dep(int index) const;
  void set_reg_dep(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_reg_dep(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      reg_dep() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_reg_dep();

  // required uint64 seq_num = 1;
  bool has_seq_num() const;
  private:
  bool _internal_has_seq_num() const;
  public:
  void clear_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num() const;
  void set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq_num() const;
  void _internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 p_addr = 3;
  bool has_p_addr() const;
  private:
  bool _internal_has_p_addr() const;
  public:
  void clear_p_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 p_addr() const;
  void set_p_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_p_addr() const;
  void _internal_set_p_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .ProtoMessage.InstDepRecord.RecordType type = 2 [default = INVALID];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ProtoMessage::InstDepRecord_RecordType type() const;
  void set_type(::ProtoMessage::InstDepRecord_RecordType value);
  private:
  ::ProtoMessage::InstDepRecord_RecordType _internal_type() const;
  void _internal_set_type(::ProtoMessage::InstDepRecord_RecordType value);
  public:

  // optional uint32 size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint64 comp_delay = 7;
  bool has_comp_delay() const;
  private:
  bool _internal_has_comp_delay() const;
  public:
  void clear_comp_delay();
  ::PROTOBUF_NAMESPACE_ID::uint64 comp_delay() const;
  void set_comp_delay(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_comp_delay() const;
  void _internal_set_comp_delay(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 flags = 5;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 weight = 9;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::uint32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 pc = 10;
  bool has_pc() const;
  private:
  bool _internal_has_pc() const;
  public:
  void clear_pc();
  ::PROTOBUF_NAMESPACE_ID::uint64 pc() const;
  void set_pc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pc() const;
  void _internal_set_pc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 v_addr = 11;
  bool has_v_addr() const;
  private:
  bool _internal_has_v_addr() const;
  public:
  void clear_v_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 v_addr() const;
  void set_v_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_v_addr() const;
  void _internal_set_v_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 asid = 12;
  bool has_asid() const;
  private:
  bool _internal_has_asid() const;
  public:
  void clear_asid();
  ::PROTOBUF_NAMESPACE_ID::uint32 asid() const;
  void set_asid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asid() const;
  void _internal_set_asid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMessage.InstDepRecord)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > rob_dep_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > reg_dep_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 p_addr_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 comp_delay_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weight_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 v_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asid_;
  friend struct ::TableStruct_inst_5fdep_5frecord_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InstDepRecordHeader

// required string obj_id = 1;
inline bool InstDepRecordHeader::_internal_has_obj_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InstDepRecordHeader::has_obj_id() const {
  return _internal_has_obj_id();
}
inline void InstDepRecordHeader::clear_obj_id() {
  obj_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InstDepRecordHeader::obj_id() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecordHeader.obj_id)
  return _internal_obj_id();
}
inline void InstDepRecordHeader::set_obj_id(const std::string& value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecordHeader.obj_id)
}
inline std::string* InstDepRecordHeader::mutable_obj_id() {
  // @@protoc_insertion_point(field_mutable:ProtoMessage.InstDepRecordHeader.obj_id)
  return _internal_mutable_obj_id();
}
inline const std::string& InstDepRecordHeader::_internal_obj_id() const {
  return obj_id_.Get();
}
inline void InstDepRecordHeader::_internal_set_obj_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  obj_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstDepRecordHeader::set_obj_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  obj_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoMessage.InstDepRecordHeader.obj_id)
}
inline void InstDepRecordHeader::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  obj_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoMessage.InstDepRecordHeader.obj_id)
}
inline void InstDepRecordHeader::set_obj_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  obj_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoMessage.InstDepRecordHeader.obj_id)
}
inline std::string* InstDepRecordHeader::_internal_mutable_obj_id() {
  _has_bits_[0] |= 0x00000001u;
  return obj_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstDepRecordHeader::release_obj_id() {
  // @@protoc_insertion_point(field_release:ProtoMessage.InstDepRecordHeader.obj_id)
  if (!_internal_has_obj_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return obj_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstDepRecordHeader::set_allocated_obj_id(std::string* obj_id) {
  if (obj_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obj_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoMessage.InstDepRecordHeader.obj_id)
}
inline std::string* InstDepRecordHeader::unsafe_arena_release_obj_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoMessage.InstDepRecordHeader.obj_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return obj_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstDepRecordHeader::unsafe_arena_set_allocated_obj_id(
    std::string* obj_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (obj_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obj_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      obj_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoMessage.InstDepRecordHeader.obj_id)
}

// optional uint32 ver = 2 [default = 0];
inline bool InstDepRecordHeader::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InstDepRecordHeader::has_ver() const {
  return _internal_has_ver();
}
inline void InstDepRecordHeader::clear_ver() {
  ver_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstDepRecordHeader::_internal_ver() const {
  return ver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstDepRecordHeader::ver() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecordHeader.ver)
  return _internal_ver();
}
inline void InstDepRecordHeader::_internal_set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ver_ = value;
}
inline void InstDepRecordHeader::set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecordHeader.ver)
}

// required uint64 tick_freq = 3;
inline bool InstDepRecordHeader::_internal_has_tick_freq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InstDepRecordHeader::has_tick_freq() const {
  return _internal_has_tick_freq();
}
inline void InstDepRecordHeader::clear_tick_freq() {
  tick_freq_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecordHeader::_internal_tick_freq() const {
  return tick_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecordHeader::tick_freq() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecordHeader.tick_freq)
  return _internal_tick_freq();
}
inline void InstDepRecordHeader::_internal_set_tick_freq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  tick_freq_ = value;
}
inline void InstDepRecordHeader::set_tick_freq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick_freq(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecordHeader.tick_freq)
}

// required uint32 window_size = 4;
inline bool InstDepRecordHeader::_internal_has_window_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InstDepRecordHeader::has_window_size() const {
  return _internal_has_window_size();
}
inline void InstDepRecordHeader::clear_window_size() {
  window_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstDepRecordHeader::_internal_window_size() const {
  return window_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstDepRecordHeader::window_size() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecordHeader.window_size)
  return _internal_window_size();
}
inline void InstDepRecordHeader::_internal_set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  window_size_ = value;
}
inline void InstDepRecordHeader::set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_window_size(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecordHeader.window_size)
}

// -------------------------------------------------------------------

// InstDepRecord

// required uint64 seq_num = 1;
inline bool InstDepRecord::_internal_has_seq_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InstDepRecord::has_seq_num() const {
  return _internal_has_seq_num();
}
inline void InstDepRecord::clear_seq_num() {
  seq_num_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecord::_internal_seq_num() const {
  return seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecord::seq_num() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecord.seq_num)
  return _internal_seq_num();
}
inline void InstDepRecord::_internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  seq_num_ = value;
}
inline void InstDepRecord::set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq_num(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecord.seq_num)
}

// required .ProtoMessage.InstDepRecord.RecordType type = 2 [default = INVALID];
inline bool InstDepRecord::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InstDepRecord::has_type() const {
  return _internal_has_type();
}
inline void InstDepRecord::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ProtoMessage::InstDepRecord_RecordType InstDepRecord::_internal_type() const {
  return static_cast< ::ProtoMessage::InstDepRecord_RecordType >(type_);
}
inline ::ProtoMessage::InstDepRecord_RecordType InstDepRecord::type() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecord.type)
  return _internal_type();
}
inline void InstDepRecord::_internal_set_type(::ProtoMessage::InstDepRecord_RecordType value) {
  assert(::ProtoMessage::InstDepRecord_RecordType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void InstDepRecord::set_type(::ProtoMessage::InstDepRecord_RecordType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecord.type)
}

// optional uint64 p_addr = 3;
inline bool InstDepRecord::_internal_has_p_addr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InstDepRecord::has_p_addr() const {
  return _internal_has_p_addr();
}
inline void InstDepRecord::clear_p_addr() {
  p_addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecord::_internal_p_addr() const {
  return p_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecord::p_addr() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecord.p_addr)
  return _internal_p_addr();
}
inline void InstDepRecord::_internal_set_p_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  p_addr_ = value;
}
inline void InstDepRecord::set_p_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_p_addr(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecord.p_addr)
}

// optional uint32 size = 4;
inline bool InstDepRecord::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InstDepRecord::has_size() const {
  return _internal_has_size();
}
inline void InstDepRecord::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstDepRecord::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstDepRecord::size() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecord.size)
  return _internal_size();
}
inline void InstDepRecord::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
}
inline void InstDepRecord::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecord.size)
}

// optional uint32 flags = 5;
inline bool InstDepRecord::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool InstDepRecord::has_flags() const {
  return _internal_has_flags();
}
inline void InstDepRecord::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstDepRecord::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstDepRecord::flags() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecord.flags)
  return _internal_flags();
}
inline void InstDepRecord::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  flags_ = value;
}
inline void InstDepRecord::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecord.flags)
}

// repeated uint64 rob_dep = 6;
inline int InstDepRecord::_internal_rob_dep_size() const {
  return rob_dep_.size();
}
inline int InstDepRecord::rob_dep_size() const {
  return _internal_rob_dep_size();
}
inline void InstDepRecord::clear_rob_dep() {
  rob_dep_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecord::_internal_rob_dep(int index) const {
  return rob_dep_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecord::rob_dep(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecord.rob_dep)
  return _internal_rob_dep(index);
}
inline void InstDepRecord::set_rob_dep(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  rob_dep_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecord.rob_dep)
}
inline void InstDepRecord::_internal_add_rob_dep(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  rob_dep_.Add(value);
}
inline void InstDepRecord::add_rob_dep(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_rob_dep(value);
  // @@protoc_insertion_point(field_add:ProtoMessage.InstDepRecord.rob_dep)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
InstDepRecord::_internal_rob_dep() const {
  return rob_dep_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
InstDepRecord::rob_dep() const {
  // @@protoc_insertion_point(field_list:ProtoMessage.InstDepRecord.rob_dep)
  return _internal_rob_dep();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
InstDepRecord::_internal_mutable_rob_dep() {
  return &rob_dep_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
InstDepRecord::mutable_rob_dep() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMessage.InstDepRecord.rob_dep)
  return _internal_mutable_rob_dep();
}

// required uint64 comp_delay = 7;
inline bool InstDepRecord::_internal_has_comp_delay() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InstDepRecord::has_comp_delay() const {
  return _internal_has_comp_delay();
}
inline void InstDepRecord::clear_comp_delay() {
  comp_delay_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecord::_internal_comp_delay() const {
  return comp_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecord::comp_delay() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecord.comp_delay)
  return _internal_comp_delay();
}
inline void InstDepRecord::_internal_set_comp_delay(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  comp_delay_ = value;
}
inline void InstDepRecord::set_comp_delay(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_comp_delay(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecord.comp_delay)
}

// repeated uint64 reg_dep = 8;
inline int InstDepRecord::_internal_reg_dep_size() const {
  return reg_dep_.size();
}
inline int InstDepRecord::reg_dep_size() const {
  return _internal_reg_dep_size();
}
inline void InstDepRecord::clear_reg_dep() {
  reg_dep_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecord::_internal_reg_dep(int index) const {
  return reg_dep_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecord::reg_dep(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecord.reg_dep)
  return _internal_reg_dep(index);
}
inline void InstDepRecord::set_reg_dep(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  reg_dep_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecord.reg_dep)
}
inline void InstDepRecord::_internal_add_reg_dep(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  reg_dep_.Add(value);
}
inline void InstDepRecord::add_reg_dep(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_reg_dep(value);
  // @@protoc_insertion_point(field_add:ProtoMessage.InstDepRecord.reg_dep)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
InstDepRecord::_internal_reg_dep() const {
  return reg_dep_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
InstDepRecord::reg_dep() const {
  // @@protoc_insertion_point(field_list:ProtoMessage.InstDepRecord.reg_dep)
  return _internal_reg_dep();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
InstDepRecord::_internal_mutable_reg_dep() {
  return &reg_dep_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
InstDepRecord::mutable_reg_dep() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMessage.InstDepRecord.reg_dep)
  return _internal_mutable_reg_dep();
}

// optional uint32 weight = 9;
inline bool InstDepRecord::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool InstDepRecord::has_weight() const {
  return _internal_has_weight();
}
inline void InstDepRecord::clear_weight() {
  weight_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstDepRecord::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstDepRecord::weight() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecord.weight)
  return _internal_weight();
}
inline void InstDepRecord::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  weight_ = value;
}
inline void InstDepRecord::set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecord.weight)
}

// optional uint64 pc = 10;
inline bool InstDepRecord::_internal_has_pc() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool InstDepRecord::has_pc() const {
  return _internal_has_pc();
}
inline void InstDepRecord::clear_pc() {
  pc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecord::_internal_pc() const {
  return pc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecord::pc() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecord.pc)
  return _internal_pc();
}
inline void InstDepRecord::_internal_set_pc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  pc_ = value;
}
inline void InstDepRecord::set_pc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pc(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecord.pc)
}

// optional uint64 v_addr = 11;
inline bool InstDepRecord::_internal_has_v_addr() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool InstDepRecord::has_v_addr() const {
  return _internal_has_v_addr();
}
inline void InstDepRecord::clear_v_addr() {
  v_addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecord::_internal_v_addr() const {
  return v_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstDepRecord::v_addr() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecord.v_addr)
  return _internal_v_addr();
}
inline void InstDepRecord::_internal_set_v_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  v_addr_ = value;
}
inline void InstDepRecord::set_v_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_v_addr(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecord.v_addr)
}

// optional uint32 asid = 12;
inline bool InstDepRecord::_internal_has_asid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool InstDepRecord::has_asid() const {
  return _internal_has_asid();
}
inline void InstDepRecord::clear_asid() {
  asid_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstDepRecord::_internal_asid() const {
  return asid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstDepRecord::asid() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstDepRecord.asid)
  return _internal_asid();
}
inline void InstDepRecord::_internal_set_asid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  asid_ = value;
}
inline void InstDepRecord::set_asid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asid(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstDepRecord.asid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMessage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ProtoMessage::InstDepRecord_RecordType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMessage::InstDepRecord_RecordType>() {
  return ::ProtoMessage::InstDepRecord_RecordType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_inst_5fdep_5frecord_2eproto
