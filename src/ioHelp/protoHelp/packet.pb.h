// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packet_2eproto;
namespace ProtoMessage {
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class PacketHeader;
class PacketHeaderDefaultTypeInternal;
extern PacketHeaderDefaultTypeInternal _PacketHeader_default_instance_;
class PacketHeader_IdStringEntry;
class PacketHeader_IdStringEntryDefaultTypeInternal;
extern PacketHeader_IdStringEntryDefaultTypeInternal _PacketHeader_IdStringEntry_default_instance_;
}  // namespace ProtoMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoMessage::Packet* Arena::CreateMaybeMessage<::ProtoMessage::Packet>(Arena*);
template<> ::ProtoMessage::PacketHeader* Arena::CreateMaybeMessage<::ProtoMessage::PacketHeader>(Arena*);
template<> ::ProtoMessage::PacketHeader_IdStringEntry* Arena::CreateMaybeMessage<::ProtoMessage::PacketHeader_IdStringEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoMessage {

// ===================================================================

class PacketHeader_IdStringEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMessage.PacketHeader.IdStringEntry) */ {
 public:
  inline PacketHeader_IdStringEntry() : PacketHeader_IdStringEntry(nullptr) {};
  virtual ~PacketHeader_IdStringEntry();

  PacketHeader_IdStringEntry(const PacketHeader_IdStringEntry& from);
  PacketHeader_IdStringEntry(PacketHeader_IdStringEntry&& from) noexcept
    : PacketHeader_IdStringEntry() {
    *this = ::std::move(from);
  }

  inline PacketHeader_IdStringEntry& operator=(const PacketHeader_IdStringEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketHeader_IdStringEntry& operator=(PacketHeader_IdStringEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PacketHeader_IdStringEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PacketHeader_IdStringEntry* internal_default_instance() {
    return reinterpret_cast<const PacketHeader_IdStringEntry*>(
               &_PacketHeader_IdStringEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PacketHeader_IdStringEntry& a, PacketHeader_IdStringEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketHeader_IdStringEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketHeader_IdStringEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketHeader_IdStringEntry* New() const final {
    return CreateMaybeMessage<PacketHeader_IdStringEntry>(nullptr);
  }

  PacketHeader_IdStringEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketHeader_IdStringEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketHeader_IdStringEntry& from);
  void MergeFrom(const PacketHeader_IdStringEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketHeader_IdStringEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMessage.PacketHeader.IdStringEntry";
  }
  protected:
  explicit PacketHeader_IdStringEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional uint32 key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMessage.PacketHeader.IdStringEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class PacketHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMessage.PacketHeader) */ {
 public:
  inline PacketHeader() : PacketHeader(nullptr) {};
  virtual ~PacketHeader();

  PacketHeader(const PacketHeader& from);
  PacketHeader(PacketHeader&& from) noexcept
    : PacketHeader() {
    *this = ::std::move(from);
  }

  inline PacketHeader& operator=(const PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketHeader& operator=(PacketHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PacketHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PacketHeader* internal_default_instance() {
    return reinterpret_cast<const PacketHeader*>(
               &_PacketHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PacketHeader& a, PacketHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketHeader* New() const final {
    return CreateMaybeMessage<PacketHeader>(nullptr);
  }

  PacketHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketHeader& from);
  void MergeFrom(const PacketHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMessage.PacketHeader";
  }
  protected:
  explicit PacketHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PacketHeader_IdStringEntry IdStringEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kIdStringsFieldNumber = 4,
    kObjIdFieldNumber = 1,
    kTickFreqFieldNumber = 3,
    kVerFieldNumber = 2,
  };
  // repeated .ProtoMessage.PacketHeader.IdStringEntry id_strings = 4;
  int id_strings_size() const;
  private:
  int _internal_id_strings_size() const;
  public:
  void clear_id_strings();
  ::ProtoMessage::PacketHeader_IdStringEntry* mutable_id_strings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMessage::PacketHeader_IdStringEntry >*
      mutable_id_strings();
  private:
  const ::ProtoMessage::PacketHeader_IdStringEntry& _internal_id_strings(int index) const;
  ::ProtoMessage::PacketHeader_IdStringEntry* _internal_add_id_strings();
  public:
  const ::ProtoMessage::PacketHeader_IdStringEntry& id_strings(int index) const;
  ::ProtoMessage::PacketHeader_IdStringEntry* add_id_strings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMessage::PacketHeader_IdStringEntry >&
      id_strings() const;

  // required string obj_id = 1;
  bool has_obj_id() const;
  private:
  bool _internal_has_obj_id() const;
  public:
  void clear_obj_id();
  const std::string& obj_id() const;
  void set_obj_id(const std::string& value);
  void set_obj_id(std::string&& value);
  void set_obj_id(const char* value);
  void set_obj_id(const char* value, size_t size);
  std::string* mutable_obj_id();
  std::string* release_obj_id();
  void set_allocated_obj_id(std::string* obj_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_obj_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_obj_id(
      std::string* obj_id);
  private:
  const std::string& _internal_obj_id() const;
  void _internal_set_obj_id(const std::string& value);
  std::string* _internal_mutable_obj_id();
  public:

  // required uint64 tick_freq = 3;
  bool has_tick_freq() const;
  private:
  bool _internal_has_tick_freq() const;
  public:
  void clear_tick_freq();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_freq() const;
  void set_tick_freq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick_freq() const;
  void _internal_set_tick_freq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 ver = 2 [default = 0];
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  ::PROTOBUF_NAMESPACE_ID::uint32 ver() const;
  void set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ver() const;
  void _internal_set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMessage.PacketHeader)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMessage::PacketHeader_IdStringEntry > id_strings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_freq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ver_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class Packet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMessage.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {};
  virtual ~Packet();

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMessage.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTickFieldNumber = 1,
    kAddrFieldNumber = 3,
    kCmdFieldNumber = 2,
    kSizeFieldNumber = 4,
    kPktIdFieldNumber = 6,
    kPcFieldNumber = 7,
    kFlagsFieldNumber = 5,
  };
  // required uint64 tick = 1;
  bool has_tick() const;
  private:
  bool _internal_has_tick() const;
  public:
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 addr = 3;
  bool has_addr() const;
  private:
  bool _internal_has_addr() const;
  public:
  void clear_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_addr() const;
  void _internal_set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 cmd = 2;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd() const;
  void set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cmd() const;
  void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 pkt_id = 6;
  bool has_pkt_id() const;
  private:
  bool _internal_has_pkt_id() const;
  public:
  void clear_pkt_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pkt_id() const;
  void set_pkt_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pkt_id() const;
  void _internal_set_pkt_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 pc = 7;
  bool has_pc() const;
  private:
  bool _internal_has_pc() const;
  public:
  void clear_pc();
  ::PROTOBUF_NAMESPACE_ID::uint64 pc() const;
  void set_pc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pc() const;
  void _internal_set_pc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 flags = 5;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMessage.Packet)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint64 addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pkt_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PacketHeader_IdStringEntry

// optional uint32 key = 1;
inline bool PacketHeader_IdStringEntry::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PacketHeader_IdStringEntry::has_key() const {
  return _internal_has_key();
}
inline void PacketHeader_IdStringEntry::clear_key() {
  key_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader_IdStringEntry::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader_IdStringEntry::key() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.PacketHeader.IdStringEntry.key)
  return _internal_key();
}
inline void PacketHeader_IdStringEntry::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  key_ = value;
}
inline void PacketHeader_IdStringEntry::set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.PacketHeader.IdStringEntry.key)
}

// optional string value = 2;
inline bool PacketHeader_IdStringEntry::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PacketHeader_IdStringEntry::has_value() const {
  return _internal_has_value();
}
inline void PacketHeader_IdStringEntry::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PacketHeader_IdStringEntry::value() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.PacketHeader.IdStringEntry.value)
  return _internal_value();
}
inline void PacketHeader_IdStringEntry::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.PacketHeader.IdStringEntry.value)
}
inline std::string* PacketHeader_IdStringEntry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:ProtoMessage.PacketHeader.IdStringEntry.value)
  return _internal_mutable_value();
}
inline const std::string& PacketHeader_IdStringEntry::_internal_value() const {
  return value_.Get();
}
inline void PacketHeader_IdStringEntry::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PacketHeader_IdStringEntry::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoMessage.PacketHeader.IdStringEntry.value)
}
inline void PacketHeader_IdStringEntry::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoMessage.PacketHeader.IdStringEntry.value)
}
inline void PacketHeader_IdStringEntry::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoMessage.PacketHeader.IdStringEntry.value)
}
inline std::string* PacketHeader_IdStringEntry::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PacketHeader_IdStringEntry::release_value() {
  // @@protoc_insertion_point(field_release:ProtoMessage.PacketHeader.IdStringEntry.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PacketHeader_IdStringEntry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoMessage.PacketHeader.IdStringEntry.value)
}
inline std::string* PacketHeader_IdStringEntry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoMessage.PacketHeader.IdStringEntry.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PacketHeader_IdStringEntry::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoMessage.PacketHeader.IdStringEntry.value)
}

// -------------------------------------------------------------------

// PacketHeader

// required string obj_id = 1;
inline bool PacketHeader::_internal_has_obj_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PacketHeader::has_obj_id() const {
  return _internal_has_obj_id();
}
inline void PacketHeader::clear_obj_id() {
  obj_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PacketHeader::obj_id() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.PacketHeader.obj_id)
  return _internal_obj_id();
}
inline void PacketHeader::set_obj_id(const std::string& value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.PacketHeader.obj_id)
}
inline std::string* PacketHeader::mutable_obj_id() {
  // @@protoc_insertion_point(field_mutable:ProtoMessage.PacketHeader.obj_id)
  return _internal_mutable_obj_id();
}
inline const std::string& PacketHeader::_internal_obj_id() const {
  return obj_id_.Get();
}
inline void PacketHeader::_internal_set_obj_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  obj_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PacketHeader::set_obj_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  obj_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoMessage.PacketHeader.obj_id)
}
inline void PacketHeader::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  obj_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoMessage.PacketHeader.obj_id)
}
inline void PacketHeader::set_obj_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  obj_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoMessage.PacketHeader.obj_id)
}
inline std::string* PacketHeader::_internal_mutable_obj_id() {
  _has_bits_[0] |= 0x00000001u;
  return obj_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PacketHeader::release_obj_id() {
  // @@protoc_insertion_point(field_release:ProtoMessage.PacketHeader.obj_id)
  if (!_internal_has_obj_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return obj_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PacketHeader::set_allocated_obj_id(std::string* obj_id) {
  if (obj_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obj_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoMessage.PacketHeader.obj_id)
}
inline std::string* PacketHeader::unsafe_arena_release_obj_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtoMessage.PacketHeader.obj_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return obj_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PacketHeader::unsafe_arena_set_allocated_obj_id(
    std::string* obj_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (obj_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obj_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      obj_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoMessage.PacketHeader.obj_id)
}

// optional uint32 ver = 2 [default = 0];
inline bool PacketHeader::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PacketHeader::has_ver() const {
  return _internal_has_ver();
}
inline void PacketHeader::clear_ver() {
  ver_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::_internal_ver() const {
  return ver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::ver() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.PacketHeader.ver)
  return _internal_ver();
}
inline void PacketHeader::_internal_set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ver_ = value;
}
inline void PacketHeader::set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.PacketHeader.ver)
}

// required uint64 tick_freq = 3;
inline bool PacketHeader::_internal_has_tick_freq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PacketHeader::has_tick_freq() const {
  return _internal_has_tick_freq();
}
inline void PacketHeader::clear_tick_freq() {
  tick_freq_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PacketHeader::_internal_tick_freq() const {
  return tick_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PacketHeader::tick_freq() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.PacketHeader.tick_freq)
  return _internal_tick_freq();
}
inline void PacketHeader::_internal_set_tick_freq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  tick_freq_ = value;
}
inline void PacketHeader::set_tick_freq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick_freq(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.PacketHeader.tick_freq)
}

// repeated .ProtoMessage.PacketHeader.IdStringEntry id_strings = 4;
inline int PacketHeader::_internal_id_strings_size() const {
  return id_strings_.size();
}
inline int PacketHeader::id_strings_size() const {
  return _internal_id_strings_size();
}
inline void PacketHeader::clear_id_strings() {
  id_strings_.Clear();
}
inline ::ProtoMessage::PacketHeader_IdStringEntry* PacketHeader::mutable_id_strings(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoMessage.PacketHeader.id_strings)
  return id_strings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMessage::PacketHeader_IdStringEntry >*
PacketHeader::mutable_id_strings() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMessage.PacketHeader.id_strings)
  return &id_strings_;
}
inline const ::ProtoMessage::PacketHeader_IdStringEntry& PacketHeader::_internal_id_strings(int index) const {
  return id_strings_.Get(index);
}
inline const ::ProtoMessage::PacketHeader_IdStringEntry& PacketHeader::id_strings(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMessage.PacketHeader.id_strings)
  return _internal_id_strings(index);
}
inline ::ProtoMessage::PacketHeader_IdStringEntry* PacketHeader::_internal_add_id_strings() {
  return id_strings_.Add();
}
inline ::ProtoMessage::PacketHeader_IdStringEntry* PacketHeader::add_id_strings() {
  // @@protoc_insertion_point(field_add:ProtoMessage.PacketHeader.id_strings)
  return _internal_add_id_strings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMessage::PacketHeader_IdStringEntry >&
PacketHeader::id_strings() const {
  // @@protoc_insertion_point(field_list:ProtoMessage.PacketHeader.id_strings)
  return id_strings_;
}

// -------------------------------------------------------------------

// Packet

// required uint64 tick = 1;
inline bool Packet::_internal_has_tick() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Packet::has_tick() const {
  return _internal_has_tick();
}
inline void Packet::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Packet::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Packet::tick() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Packet.tick)
  return _internal_tick();
}
inline void Packet::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  tick_ = value;
}
inline void Packet::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Packet.tick)
}

// required uint32 cmd = 2;
inline bool Packet::_internal_has_cmd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Packet::has_cmd() const {
  return _internal_has_cmd();
}
inline void Packet::clear_cmd() {
  cmd_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::cmd() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Packet.cmd)
  return _internal_cmd();
}
inline void Packet::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  cmd_ = value;
}
inline void Packet::set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Packet.cmd)
}

// required uint64 addr = 3;
inline bool Packet::_internal_has_addr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Packet::has_addr() const {
  return _internal_has_addr();
}
inline void Packet::clear_addr() {
  addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Packet::_internal_addr() const {
  return addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Packet::addr() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Packet.addr)
  return _internal_addr();
}
inline void Packet::_internal_set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  addr_ = value;
}
inline void Packet::set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Packet.addr)
}

// required uint32 size = 4;
inline bool Packet::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Packet::has_size() const {
  return _internal_has_size();
}
inline void Packet::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::size() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Packet.size)
  return _internal_size();
}
inline void Packet::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
}
inline void Packet::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Packet.size)
}

// optional uint32 flags = 5;
inline bool Packet::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Packet::has_flags() const {
  return _internal_has_flags();
}
inline void Packet::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::flags() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Packet.flags)
  return _internal_flags();
}
inline void Packet::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  flags_ = value;
}
inline void Packet::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Packet.flags)
}

// optional uint64 pkt_id = 6;
inline bool Packet::_internal_has_pkt_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Packet::has_pkt_id() const {
  return _internal_has_pkt_id();
}
inline void Packet::clear_pkt_id() {
  pkt_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Packet::_internal_pkt_id() const {
  return pkt_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Packet::pkt_id() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Packet.pkt_id)
  return _internal_pkt_id();
}
inline void Packet::_internal_set_pkt_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  pkt_id_ = value;
}
inline void Packet::set_pkt_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pkt_id(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Packet.pkt_id)
}

// optional uint64 pc = 7;
inline bool Packet::_internal_has_pc() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Packet::has_pc() const {
  return _internal_has_pc();
}
inline void Packet::clear_pc() {
  pc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Packet::_internal_pc() const {
  return pc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Packet::pc() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Packet.pc)
  return _internal_pc();
}
inline void Packet::_internal_set_pc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  pc_ = value;
}
inline void Packet::set_pc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pc(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Packet.pc)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMessage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
