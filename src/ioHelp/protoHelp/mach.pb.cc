// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mach.proto

#include "mach.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mach_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_machRecord_mach_2eproto;
namespace ProtoMessage {
class headerRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<headerRecord> _instance;
} _headerRecord_default_instance_;
class machRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<machRecord> _instance;
} _machRecord_default_instance_;
class InstrRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrRecord> _instance;
} _InstrRecord_default_instance_;
}  // namespace ProtoMessage
static void InitDefaultsscc_info_InstrRecord_mach_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoMessage::_InstrRecord_default_instance_;
    new (ptr) ::ProtoMessage::InstrRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoMessage::InstrRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrRecord_mach_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InstrRecord_mach_2eproto}, {
      &scc_info_machRecord_mach_2eproto.base,}};

static void InitDefaultsscc_info_headerRecord_mach_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoMessage::_headerRecord_default_instance_;
    new (ptr) ::ProtoMessage::headerRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoMessage::headerRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_headerRecord_mach_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_headerRecord_mach_2eproto}, {}};

static void InitDefaultsscc_info_machRecord_mach_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoMessage::_machRecord_default_instance_;
    new (ptr) ::ProtoMessage::machRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoMessage::machRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_machRecord_mach_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_machRecord_mach_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mach_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mach_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mach_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mach_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::headerRecord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::headerRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::headerRecord, obj_id_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::headerRecord, ver_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::machRecord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::machRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::machRecord, seq_num_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::machRecord, v_addr_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::machRecord, v_size_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::machRecord, p_effaddr_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::machRecord, p_effsize_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::machRecord, funcunit_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::machRecord, srcarchregid_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::machRecord, desarchregid_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::machRecord, srctempregid_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::machRecord, destempregid_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::machRecord, rectype_),
  0,
  1,
  3,
  2,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstrRecord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstrRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstrRecord, instr_num_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstrRecord, fetch_num_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstrRecord, uops_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstrRecord, v_instraddr_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstrRecord, v_instrsize_),
  0,
  1,
  ~0u,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ProtoMessage::headerRecord)},
  { 9, 25, sizeof(::ProtoMessage::machRecord)},
  { 36, 46, sizeof(::ProtoMessage::InstrRecord)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoMessage::_headerRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoMessage::_machRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoMessage::_InstrRecord_default_instance_),
};

const char descriptor_table_protodef_mach_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nmach.proto\022\014ProtoMessage\".\n\014headerReco"
  "rd\022\016\n\006obj_id\030\001 \002(\t\022\016\n\003ver\030\002 \001(\r:\0010\"\343\002\n\nm"
  "achRecord\022\017\n\007seq_num\030\001 \002(\004\022\016\n\006v_Addr\030\002 \001"
  "(\004\022\016\n\006v_Size\030\003 \001(\r\022\021\n\tp_effAddr\030\004 \001(\004\022\021\n"
  "\tp_effSize\030\005 \001(\r\022\020\n\010funcUnit\030\006 \002(\r\022\024\n\014sr"
  "cArchRegId\030\007 \003(\r\022\024\n\014desArchRegId\030\010 \003(\r\022\024"
  "\n\014srcTempRegId\030\t \003(\r\022\024\n\014desTempRegId\030\n \003"
  "(\r\022\?\n\007recType\030\013 \002(\0162#.ProtoMessage.machR"
  "ecord.RecordType:\tUOP_DUMMY\"S\n\nRecordTyp"
  "e\022\014\n\010UOP_COMP\020\000\022\014\n\010UOP_LOAD\020\001\022\r\n\tUOP_STO"
  "RE\020\002\022\013\n\007UOP_IMM\020\003\022\r\n\tUOP_DUMMY\020\004\"\205\001\n\013Ins"
  "trRecord\022\021\n\tinstr_num\030\001 \002(\004\022\021\n\tfetch_num"
  "\030\002 \002(\004\022&\n\004uops\030\003 \003(\0132\030.ProtoMessage.mach"
  "Record\022\023\n\013v_instrAddr\030\004 \002(\004\022\023\n\013v_instrSi"
  "ze\030\005 \002(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mach_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mach_2eproto_sccs[3] = {
  &scc_info_InstrRecord_mach_2eproto.base,
  &scc_info_headerRecord_mach_2eproto.base,
  &scc_info_machRecord_mach_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mach_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mach_2eproto = {
  false, false, descriptor_table_protodef_mach_2eproto, "mach.proto", 568,
  &descriptor_table_mach_2eproto_once, descriptor_table_mach_2eproto_sccs, descriptor_table_mach_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_mach_2eproto::offsets,
  file_level_metadata_mach_2eproto, 3, file_level_enum_descriptors_mach_2eproto, file_level_service_descriptors_mach_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mach_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mach_2eproto)), true);
namespace ProtoMessage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* machRecord_RecordType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mach_2eproto);
  return file_level_enum_descriptors_mach_2eproto[0];
}
bool machRecord_RecordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr machRecord_RecordType machRecord::UOP_COMP;
constexpr machRecord_RecordType machRecord::UOP_LOAD;
constexpr machRecord_RecordType machRecord::UOP_STORE;
constexpr machRecord_RecordType machRecord::UOP_IMM;
constexpr machRecord_RecordType machRecord::UOP_DUMMY;
constexpr machRecord_RecordType machRecord::RecordType_MIN;
constexpr machRecord_RecordType machRecord::RecordType_MAX;
constexpr int machRecord::RecordType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void headerRecord::InitAsDefaultInstance() {
}
class headerRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<headerRecord>()._has_bits_);
  static void set_has_obj_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

headerRecord::headerRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoMessage.headerRecord)
}
headerRecord::headerRecord(const headerRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  obj_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_obj_id()) {
    obj_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_obj_id(),
      GetArena());
  }
  ver_ = from.ver_;
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.headerRecord)
}

void headerRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_headerRecord_mach_2eproto.base);
  obj_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ver_ = 0u;
}

headerRecord::~headerRecord() {
  // @@protoc_insertion_point(destructor:ProtoMessage.headerRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void headerRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  obj_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void headerRecord::ArenaDtor(void* object) {
  headerRecord* _this = reinterpret_cast< headerRecord* >(object);
  (void)_this;
}
void headerRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void headerRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const headerRecord& headerRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_headerRecord_mach_2eproto.base);
  return *internal_default_instance();
}


void headerRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.headerRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    obj_id_.ClearNonDefaultToEmpty();
  }
  ver_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* headerRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string obj_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_obj_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoMessage.headerRecord.obj_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ver = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ver(&has_bits);
          ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* headerRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.headerRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string obj_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_obj_id().data(), static_cast<int>(this->_internal_obj_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoMessage.headerRecord.obj_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_obj_id(), target);
  }

  // optional uint32 ver = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.headerRecord)
  return target;
}

size_t headerRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.headerRecord)
  size_t total_size = 0;

  // required string obj_id = 1;
  if (_internal_has_obj_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obj_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 ver = 2 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ver());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void headerRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.headerRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const headerRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<headerRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.headerRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.headerRecord)
    MergeFrom(*source);
  }
}

void headerRecord::MergeFrom(const headerRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.headerRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_obj_id(from._internal_obj_id());
    }
    if (cached_has_bits & 0x00000002u) {
      ver_ = from.ver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void headerRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.headerRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void headerRecord::CopyFrom(const headerRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.headerRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool headerRecord::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void headerRecord::InternalSwap(headerRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obj_id_.Swap(&other->obj_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ver_, other->ver_);
}

::PROTOBUF_NAMESPACE_ID::Metadata headerRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void machRecord::InitAsDefaultInstance() {
}
class machRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<machRecord>()._has_bits_);
  static void set_has_seq_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_v_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_v_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_p_effaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_p_effsize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_funcunit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rectype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000061) ^ 0x00000061) != 0;
  }
};

machRecord::machRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  srcarchregid_(arena),
  desarchregid_(arena),
  srctempregid_(arena),
  destempregid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoMessage.machRecord)
}
machRecord::machRecord(const machRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      srcarchregid_(from.srcarchregid_),
      desarchregid_(from.desarchregid_),
      srctempregid_(from.srctempregid_),
      destempregid_(from.destempregid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seq_num_, &from.seq_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&rectype_) -
    reinterpret_cast<char*>(&seq_num_)) + sizeof(rectype_));
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.machRecord)
}

void machRecord::SharedCtor() {
  ::memset(&seq_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&funcunit_) -
      reinterpret_cast<char*>(&seq_num_)) + sizeof(funcunit_));
  rectype_ = 4;
}

machRecord::~machRecord() {
  // @@protoc_insertion_point(destructor:ProtoMessage.machRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void machRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void machRecord::ArenaDtor(void* object) {
  machRecord* _this = reinterpret_cast< machRecord* >(object);
  (void)_this;
}
void machRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void machRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const machRecord& machRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_machRecord_mach_2eproto.base);
  return *internal_default_instance();
}


void machRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.machRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcarchregid_.Clear();
  desarchregid_.Clear();
  srctempregid_.Clear();
  destempregid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&seq_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&funcunit_) -
        reinterpret_cast<char*>(&seq_num_)) + sizeof(funcunit_));
    rectype_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* machRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 seq_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seq_num(&has_bits);
          seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 v_Addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_v_addr(&has_bits);
          v_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 v_Size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_v_size(&has_bits);
          v_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 p_effAddr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_p_effaddr(&has_bits);
          p_effaddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 p_effSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_p_effsize(&has_bits);
          p_effsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 funcUnit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_funcunit(&has_bits);
          funcunit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 srcArchRegId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_srcarchregid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_srcarchregid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 desArchRegId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_desarchregid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_desarchregid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 srcTempRegId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_srctempregid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_srctempregid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 desTempRegId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_destempregid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_destempregid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ProtoMessage.machRecord.RecordType recType = 11 [default = UOP_DUMMY];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoMessage::machRecord_RecordType_IsValid(val))) {
            _internal_set_rectype(static_cast<::ProtoMessage::machRecord_RecordType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* machRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.machRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 seq_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seq_num(), target);
  }

  // optional uint64 v_Addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_v_addr(), target);
  }

  // optional uint32 v_Size = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_v_size(), target);
  }

  // optional uint64 p_effAddr = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_p_effaddr(), target);
  }

  // optional uint32 p_effSize = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_p_effsize(), target);
  }

  // required uint32 funcUnit = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_funcunit(), target);
  }

  // repeated uint32 srcArchRegId = 7;
  for (int i = 0, n = this->_internal_srcarchregid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_srcarchregid(i), target);
  }

  // repeated uint32 desArchRegId = 8;
  for (int i = 0, n = this->_internal_desarchregid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_desarchregid(i), target);
  }

  // repeated uint32 srcTempRegId = 9;
  for (int i = 0, n = this->_internal_srctempregid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_srctempregid(i), target);
  }

  // repeated uint32 desTempRegId = 10;
  for (int i = 0, n = this->_internal_destempregid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_destempregid(i), target);
  }

  // required .ProtoMessage.machRecord.RecordType recType = 11 [default = UOP_DUMMY];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_rectype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.machRecord)
  return target;
}

size_t machRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoMessage.machRecord)
  size_t total_size = 0;

  if (_internal_has_seq_num()) {
    // required uint64 seq_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_num());
  }

  if (_internal_has_funcunit()) {
    // required uint32 funcUnit = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_funcunit());
  }

  if (_internal_has_rectype()) {
    // required .ProtoMessage.machRecord.RecordType recType = 11 [default = UOP_DUMMY];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rectype());
  }

  return total_size;
}
size_t machRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.machRecord)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000061) ^ 0x00000061) == 0) {  // All required fields are present.
    // required uint64 seq_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_num());

    // required uint32 funcUnit = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_funcunit());

    // required .ProtoMessage.machRecord.RecordType recType = 11 [default = UOP_DUMMY];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rectype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 srcArchRegId = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->srcarchregid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_srcarchregid_size());
    total_size += data_size;
  }

  // repeated uint32 desArchRegId = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->desarchregid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_desarchregid_size());
    total_size += data_size;
  }

  // repeated uint32 srcTempRegId = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->srctempregid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_srctempregid_size());
    total_size += data_size;
  }

  // repeated uint32 desTempRegId = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->destempregid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_destempregid_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional uint64 v_Addr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_v_addr());
    }

    // optional uint64 p_effAddr = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_p_effaddr());
    }

    // optional uint32 v_Size = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_v_size());
    }

    // optional uint32 p_effSize = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_p_effsize());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void machRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.machRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const machRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<machRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.machRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.machRecord)
    MergeFrom(*source);
  }
}

void machRecord::MergeFrom(const machRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.machRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  srcarchregid_.MergeFrom(from.srcarchregid_);
  desarchregid_.MergeFrom(from.desarchregid_);
  srctempregid_.MergeFrom(from.srctempregid_);
  destempregid_.MergeFrom(from.destempregid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      seq_num_ = from.seq_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      v_addr_ = from.v_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      p_effaddr_ = from.p_effaddr_;
    }
    if (cached_has_bits & 0x00000008u) {
      v_size_ = from.v_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      p_effsize_ = from.p_effsize_;
    }
    if (cached_has_bits & 0x00000020u) {
      funcunit_ = from.funcunit_;
    }
    if (cached_has_bits & 0x00000040u) {
      rectype_ = from.rectype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void machRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.machRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void machRecord::CopyFrom(const machRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.machRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool machRecord::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void machRecord::InternalSwap(machRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  srcarchregid_.InternalSwap(&other->srcarchregid_);
  desarchregid_.InternalSwap(&other->desarchregid_);
  srctempregid_.InternalSwap(&other->srctempregid_);
  destempregid_.InternalSwap(&other->destempregid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(machRecord, funcunit_)
      + sizeof(machRecord::funcunit_)
      - PROTOBUF_FIELD_OFFSET(machRecord, seq_num_)>(
          reinterpret_cast<char*>(&seq_num_),
          reinterpret_cast<char*>(&other->seq_num_));
  swap(rectype_, other->rectype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata machRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstrRecord::InitAsDefaultInstance() {
}
class InstrRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<InstrRecord>()._has_bits_);
  static void set_has_instr_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fetch_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_v_instraddr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_v_instrsize(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

InstrRecord::InstrRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uops_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoMessage.InstrRecord)
}
InstrRecord::InstrRecord(const InstrRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      uops_(from.uops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&instr_num_, &from.instr_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_instrsize_) -
    reinterpret_cast<char*>(&instr_num_)) + sizeof(v_instrsize_));
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.InstrRecord)
}

void InstrRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrRecord_mach_2eproto.base);
  ::memset(&instr_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_instrsize_) -
      reinterpret_cast<char*>(&instr_num_)) + sizeof(v_instrsize_));
}

InstrRecord::~InstrRecord() {
  // @@protoc_insertion_point(destructor:ProtoMessage.InstrRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InstrRecord::ArenaDtor(void* object) {
  InstrRecord* _this = reinterpret_cast< InstrRecord* >(object);
  (void)_this;
}
void InstrRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrRecord& InstrRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrRecord_mach_2eproto.base);
  return *internal_default_instance();
}


void InstrRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.InstrRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uops_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&instr_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_instrsize_) -
        reinterpret_cast<char*>(&instr_num_)) + sizeof(v_instrsize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 instr_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_instr_num(&has_bits);
          instr_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 fetch_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fetch_num(&has_bits);
          fetch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProtoMessage.machRecord uops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required uint64 v_instrAddr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_v_instraddr(&has_bits);
          v_instraddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 v_instrSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_v_instrsize(&has_bits);
          v_instrsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.InstrRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 instr_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_instr_num(), target);
  }

  // required uint64 fetch_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_fetch_num(), target);
  }

  // repeated .ProtoMessage.machRecord uops = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_uops(i), target, stream);
  }

  // required uint64 v_instrAddr = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_v_instraddr(), target);
  }

  // required uint32 v_instrSize = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_v_instrsize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.InstrRecord)
  return target;
}

size_t InstrRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoMessage.InstrRecord)
  size_t total_size = 0;

  if (_internal_has_instr_num()) {
    // required uint64 instr_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_instr_num());
  }

  if (_internal_has_fetch_num()) {
    // required uint64 fetch_num = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fetch_num());
  }

  if (_internal_has_v_instraddr()) {
    // required uint64 v_instrAddr = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_v_instraddr());
  }

  if (_internal_has_v_instrsize()) {
    // required uint32 v_instrSize = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v_instrsize());
  }

  return total_size;
}
size_t InstrRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.InstrRecord)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 instr_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_instr_num());

    // required uint64 fetch_num = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fetch_num());

    // required uint64 v_instrAddr = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_v_instraddr());

    // required uint32 v_instrSize = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v_instrsize());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoMessage.machRecord uops = 3;
  total_size += 1UL * this->_internal_uops_size();
  for (const auto& msg : this->uops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoMessage.InstrRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoMessage.InstrRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoMessage.InstrRecord)
    MergeFrom(*source);
  }
}

void InstrRecord::MergeFrom(const InstrRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.InstrRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uops_.MergeFrom(from.uops_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      instr_num_ = from.instr_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      fetch_num_ = from.fetch_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      v_instraddr_ = from.v_instraddr_;
    }
    if (cached_has_bits & 0x00000008u) {
      v_instrsize_ = from.v_instrsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InstrRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoMessage.InstrRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrRecord::CopyFrom(const InstrRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.InstrRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrRecord::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uops_)) return false;
  return true;
}

void InstrRecord::InternalSwap(InstrRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uops_.InternalSwap(&other->uops_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrRecord, v_instrsize_)
      + sizeof(InstrRecord::v_instrsize_)
      - PROTOBUF_FIELD_OFFSET(InstrRecord, instr_num_)>(
          reinterpret_cast<char*>(&instr_num_),
          reinterpret_cast<char*>(&other->instr_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtoMessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProtoMessage::headerRecord* Arena::CreateMaybeMessage< ::ProtoMessage::headerRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMessage::headerRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoMessage::machRecord* Arena::CreateMaybeMessage< ::ProtoMessage::machRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMessage::machRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoMessage::InstrRecord* Arena::CreateMaybeMessage< ::ProtoMessage::InstrRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMessage::InstrRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
